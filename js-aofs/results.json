{"numFailedTestSuites":1,"numFailedTests":390,"numPassedTestSuites":0,"numPassedTests":4608,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":1,"numTotalTests":4998,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1724310572104,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["JS-AOFS","Amarendra7062","even_odd"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["JS-AOFS","Amarendra7062","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["JS-AOFS","Amarendra7062","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["JS-AOFS","Amarendra7062","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["JS-AOFS","Amarendra7062","even_odd"],"duration":25,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["JS-AOFS","Amarendra7062","even_odd"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["JS-AOFS","Amarendra7062","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["JS-AOFS","Amarendra7062","even_odd"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["JS-AOFS","Amarendra7062","even_odd"],"duration":112,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","'result' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"'result' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"'result' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Amarendra7062 even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Amarendra7062","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["JS-AOFS","Amarendra7062","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["JS-AOFS","Amarendra7062","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["JS-AOFS","Amarendra7062","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["JS-AOFS","Amarendra7062","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["JS-AOFS","Amarendra7062","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["JS-AOFS","Amarendra7062","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["JS-AOFS","Amarendra7062","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["JS-AOFS","Amarendra7062","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["JS-AOFS","Amarendra7062","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["JS-AOFS","Amarendra7062","categorise"],"duration":13,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'categorizeAndSort' has too many lines (32). Maximum allowed is 15.","'result' is never reassigned. Use 'const' instead.","'temp' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'categorizeAndSort' has too many lines (32). Maximum allowed is 15.\",\n+   \"'result' is never reassigned. Use 'const' instead.\",\n+   \"'temp' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'categorizeAndSort' has too many lines (32). Maximum allowed is 15.\",\n+   \"'result' is never reassigned. Use 'const' instead.\",\n+   \"'temp' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Amarendra7062 categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Amarendra7062","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["JS-AOFS","Amarendra7062","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["JS-AOFS","Amarendra7062","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["JS-AOFS","Amarendra7062","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["JS-AOFS","Amarendra7062","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["JS-AOFS","Amarendra7062","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["JS-AOFS","Amarendra7062","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["JS-AOFS","Amarendra7062","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["JS-AOFS","Amarendra7062","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["JS-AOFS","Amarendra7062","entries"],"duration":13,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'objectEntries' has too many lines (16). Maximum allowed is 15.","'result' is never reassigned. Use 'const' instead.","'keys' is never reassigned. Use 'const' instead.","'key' is never reassigned. Use 'const' instead.","'key' is never reassigned. Use 'const' instead.","'value' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 9\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'objectEntries' has too many lines (16). Maximum allowed is 15.\",\n+   \"'result' is never reassigned. Use 'const' instead.\",\n+   \"'keys' is never reassigned. Use 'const' instead.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"'value' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 9\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'objectEntries' has too many lines (16). Maximum allowed is 15.\",\n+   \"'result' is never reassigned. Use 'const' instead.\",\n+   \"'keys' is never reassigned. Use 'const' instead.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"'value' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Amarendra7062 entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Amarendra7062","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["JS-AOFS","Amarendra7062","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["JS-AOFS","Amarendra7062","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["JS-AOFS","Amarendra7062","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["JS-AOFS","Amarendra7062","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["JS-AOFS","Amarendra7062","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["JS-AOFS","Amarendra7062","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["JS-AOFS","Amarendra7062","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["JS-AOFS","Amarendra7062","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["JS-AOFS","Amarendra7062","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["JS-AOFS","Amarendra7062","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["JS-AOFS","Amarendra7062","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["JS-AOFS","Amarendra7062","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["JS-AOFS","Amarendra7062","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["JS-AOFS","Amarendra7062","remove_adjacent_spaces"],"duration":12,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'removeAdjacentSpaces' has too many lines (35). Maximum allowed is 15.","'char' is never reassigned. Use 'const' instead.","Identifier 'text_1' is not in camel case.","Identifier 'text_1' is not in camel case.","Identifier 'text_1' is not in camel case.","Identifier 'text_1' is not in camel case.","Identifier 'text_1' is not in camel case."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 10\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'removeAdjacentSpaces' has too many lines (35). Maximum allowed is 15.\",\n+   \"'char' is never reassigned. Use 'const' instead.\",\n+   \"Identifier 'text_1' is not in camel case.\",\n+   \"Identifier 'text_1' is not in camel case.\",\n+   \"Identifier 'text_1' is not in camel case.\",\n+   \"Identifier 'text_1' is not in camel case.\",\n+   \"Identifier 'text_1' is not in camel case.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 10\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'removeAdjacentSpaces' has too many lines (35). Maximum allowed is 15.\",\n+   \"'char' is never reassigned. Use 'const' instead.\",\n+   \"Identifier 'text_1' is not in camel case.\",\n+   \"Identifier 'text_1' is not in camel case.\",\n+   \"Identifier 'text_1' is not in camel case.\",\n+   \"Identifier 'text_1' is not in camel case.\",\n+   \"Identifier 'text_1' is not in camel case.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Amarendra7062 remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Amarendra7062","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["JS-AOFS","Amarendra7062","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["JS-AOFS","Amarendra7062","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["JS-AOFS","Amarendra7062","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["JS-AOFS","Amarendra7062","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["JS-AOFS","Amarendra7062","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["JS-AOFS","Amarendra7062","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["JS-AOFS","Amarendra7062","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["JS-AOFS","Amarendra7062","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["JS-AOFS","Amarendra7062","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["JS-AOFS","Amarendra7062","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["JS-AOFS","Amarendra7062","tribonacci"],"duration":13,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Expected { after 'if' condition."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Expected { after 'if' condition.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Expected { after 'if' condition.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Amarendra7062 tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Amarendra7062","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Amarendra7062","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["JS-AOFS","Amarendra7062","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["JS-AOFS","Amarendra7062","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["JS-AOFS","Amarendra7062","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","Amarendra7062","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","Amarendra7062","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Amarendra7062","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["JS-AOFS","Amarendra7062","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","Amarendra7062","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["JS-AOFS","Amarendra7062","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","Amarendra7062","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","Amarendra7062","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","Amarendra7062","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","Amarendra7062","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","Amarendra7062","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["JS-AOFS","Amarendra7062","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["JS-AOFS","Amarendra7062","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Amarendra7062","array_equals"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["JS-AOFS","Amarendra7062","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["JS-AOFS","Amarendra7062","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["JS-AOFS","Amarendra7062","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["JS-AOFS","Amarendra7062","array_equals"],"duration":9,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'array_Equal' has too many lines (24). Maximum allowed is 15.","Identifier 'array_Equal' is not in camel case.","Identifier 'boolean_Array_1' is not in camel case.","Identifier 'boolean_Array_2' is not in camel case.","Identifier 'boolean_Array_1' is not in camel case.","Identifier 'boolean_Array_2' is not in camel case.","Identifier 'boolean_Array_1' is not in camel case.","Identifier 'boolean_Array_2' is not in camel case.","Identifier 'boolean_Array_1' is not in camel case.","Identifier 'boolean_Array_1' is not in camel case.","Identifier 'boolean_Array_2' is not in camel case.","Identifier 'boolean_Array_1' is not in camel case.","Identifier 'boolean_Array_2' is not in camel case.","Identifier 'boolean_Array_1' is not in camel case.","Identifier 'boolean_Array_2' is not in camel case.","Identifier 'boolean_Array_1' is not in camel case.","Identifier 'boolean_Array_2' is not in camel case.","Unnecessary 'else' after 'return'."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 21\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'array_Equal' has too many lines (24). Maximum allowed is 15.\",\n+   \"Identifier 'array_Equal' is not in camel case.\",\n+   \"Identifier 'boolean_Array_1' is not in camel case.\",\n+   \"Identifier 'boolean_Array_2' is not in camel case.\",\n+   \"Identifier 'boolean_Array_1' is not in camel case.\",\n+   \"Identifier 'boolean_Array_2' is not in camel case.\",\n+   \"Identifier 'boolean_Array_1' is not in camel case.\",\n+   \"Identifier 'boolean_Array_2' is not in camel case.\",\n+   \"Identifier 'boolean_Array_1' is not in camel case.\",\n+   \"Identifier 'boolean_Array_1' is not in camel case.\",\n+   \"Identifier 'boolean_Array_2' is not in camel case.\",\n+   \"Identifier 'boolean_Array_1' is not in camel case.\",\n+   \"Identifier 'boolean_Array_2' is not in camel case.\",\n+   \"Identifier 'boolean_Array_1' is not in camel case.\",\n+   \"Identifier 'boolean_Array_2' is not in camel case.\",\n+   \"Identifier 'boolean_Array_1' is not in camel case.\",\n+   \"Identifier 'boolean_Array_2' is not in camel case.\",\n+   \"Unnecessary 'else' after 'return'.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 21\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'array_Equal' has too many lines (24). Maximum allowed is 15.\",\n+   \"Identifier 'array_Equal' is not in camel case.\",\n+   \"Identifier 'boolean_Array_1' is not in camel case.\",\n+   \"Identifier 'boolean_Array_2' is not in camel case.\",\n+   \"Identifier 'boolean_Array_1' is not in camel case.\",\n+   \"Identifier 'boolean_Array_2' is not in camel case.\",\n+   \"Identifier 'boolean_Array_1' is not in camel case.\",\n+   \"Identifier 'boolean_Array_2' is not in camel case.\",\n+   \"Identifier 'boolean_Array_1' is not in camel case.\",\n+   \"Identifier 'boolean_Array_1' is not in camel case.\",\n+   \"Identifier 'boolean_Array_2' is not in camel case.\",\n+   \"Identifier 'boolean_Array_1' is not in camel case.\",\n+   \"Identifier 'boolean_Array_2' is not in camel case.\",\n+   \"Identifier 'boolean_Array_1' is not in camel case.\",\n+   \"Identifier 'boolean_Array_2' is not in camel case.\",\n+   \"Identifier 'boolean_Array_1' is not in camel case.\",\n+   \"Identifier 'boolean_Array_2' is not in camel case.\",\n+   \"Unnecessary 'else' after 'return'.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Amarendra7062 array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Amarendra7062","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Amarendra7062","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Amarendra7062","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Amarendra7062","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Amarendra7062","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Amarendra7062","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","Amarendra7062","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","Amarendra7062","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","Amarendra7062","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","Amarendra7062","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["JS-AOFS","Amarendra7062","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","Amarendra7062","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","Amarendra7062","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["JS-AOFS","Amarendra7062","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["JS-AOFS","Amarendra7062","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["JS-AOFS","Amarendra7062","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["JS-AOFS","Amarendra7062","object_equals"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Amarendra7062 object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["JS-AOFS","Amarendra7062","object_equals"],"duration":13,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'objects_Equal' has too many lines (34). Maximum allowed is 15.","Identifier 'objects_Equal' is not in camel case.","'key' is defined but never used.","'key' is assigned a value but never used.","'key' is never reassigned. Use 'const' instead.","'key' is already declared in the upper scope on line 31 column 10.","'key' is assigned a value but never used.","'key' is never reassigned. Use 'const' instead.","'key' is already declared in the upper scope on line 31 column 10.","'key' is never reassigned. Use 'const' instead.","'key' is already declared in the upper scope on line 31 column 10.","Unexpected if as the only statement in an else block."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 15\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'objects_Equal' has too many lines (34). Maximum allowed is 15.\",\n+   \"Identifier 'objects_Equal' is not in camel case.\",\n+   \"'key' is defined but never used.\",\n+   \"'key' is assigned a value but never used.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"'key' is already declared in the upper scope on line 31 column 10.\",\n+   \"'key' is assigned a value but never used.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"'key' is already declared in the upper scope on line 31 column 10.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"'key' is already declared in the upper scope on line 31 column 10.\",\n+   \"Unexpected if as the only statement in an else block.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 15\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'objects_Equal' has too many lines (34). Maximum allowed is 15.\",\n+   \"Identifier 'objects_Equal' is not in camel case.\",\n+   \"'key' is defined but never used.\",\n+   \"'key' is assigned a value but never used.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"'key' is already declared in the upper scope on line 31 column 10.\",\n+   \"'key' is assigned a value but never used.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"'key' is already declared in the upper scope on line 31 column 10.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"'key' is already declared in the upper scope on line 31 column 10.\",\n+   \"Unexpected if as the only statement in an else block.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Amarendra7062 object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","even_odd"],"duration":7,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","'NUMBERS' is already declared in the upper scope on line 3 column 7.","'index' is never reassigned. Use 'const' instead.","'finalResult' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"'NUMBERS' is already declared in the upper scope on line 3 column 7.\",\n+   \"'index' is never reassigned. Use 'const' instead.\",\n+   \"'finalResult' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"'NUMBERS' is already declared in the upper scope on line 3 column 7.\",\n+   \"'index' is never reassigned. Use 'const' instead.\",\n+   \"'finalResult' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS AshwakKattubadi45 even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","categorise"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","categorise"],"duration":15,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","'NUMBERS' is already declared in the upper scope on line 3 column 7.","'duplicate' is never reassigned. Use 'const' instead.","Expected a function expression.","Function 'categorise' has too many lines (16). Maximum allowed is 15.","'NUMBERS' is already declared in the upper scope on line 3 column 7.","'categorisedArray' is never reassigned. Use 'const' instead.","'value' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 10\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"'NUMBERS' is already declared in the upper scope on line 3 column 7.\",\n+   \"'duplicate' is never reassigned. Use 'const' instead.\",\n+   \"Expected a function expression.\",\n+   \"Function 'categorise' has too many lines (16). Maximum allowed is 15.\",\n+   \"'NUMBERS' is already declared in the upper scope on line 3 column 7.\",\n+   \"'categorisedArray' is never reassigned. Use 'const' instead.\",\n+   \"'value' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 10\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"'NUMBERS' is already declared in the upper scope on line 3 column 7.\",\n+   \"'duplicate' is never reassigned. Use 'const' instead.\",\n+   \"Expected a function expression.\",\n+   \"Function 'categorise' has too many lines (16). Maximum allowed is 15.\",\n+   \"'NUMBERS' is already declared in the upper scope on line 3 column 7.\",\n+   \"'categorisedArray' is never reassigned. Use 'const' instead.\",\n+   \"'value' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS AshwakKattubadi45 categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","entries"],"duration":6,"failureDetails":[{"matcherResult":{"actual":["'OBJECT' is already declared in the upper scope on line 3 column 7.","'entriesArray' is never reassigned. Use 'const' instead.","'keys' is never reassigned. Use 'const' instead.","'finalResult' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"'OBJECT' is already declared in the upper scope on line 3 column 7.\",\n+   \"'entriesArray' is never reassigned. Use 'const' instead.\",\n+   \"'keys' is never reassigned. Use 'const' instead.\",\n+   \"'finalResult' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"'OBJECT' is already declared in the upper scope on line 3 column 7.\",\n+   \"'entriesArray' is never reassigned. Use 'const' instead.\",\n+   \"'keys' is never reassigned. Use 'const' instead.\",\n+   \"'finalResult' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS AshwakKattubadi45 entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","remove_adjacent_spaces"],"duration":9,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'removeSpaces' has too many lines (18). Maximum allowed is 15.","'TEXT' is already declared in the upper scope on line 3 column 7.","'newArray' is never reassigned. Use 'const' instead.","Expected '===' and instead saw '=='.","Expected '===' and instead saw '=='.","Expected '===' and instead saw '=='.","'final' is never reassigned. Use 'const' instead.","'result' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 11\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'removeSpaces' has too many lines (18). Maximum allowed is 15.\",\n+   \"'TEXT' is already declared in the upper scope on line 3 column 7.\",\n+   \"'newArray' is never reassigned. Use 'const' instead.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"'final' is never reassigned. Use 'const' instead.\",\n+   \"'result' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 11\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'removeSpaces' has too many lines (18). Maximum allowed is 15.\",\n+   \"'TEXT' is already declared in the upper scope on line 3 column 7.\",\n+   \"'newArray' is never reassigned. Use 'const' instead.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"'final' is never reassigned. Use 'const' instead.\",\n+   \"'result' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS AshwakKattubadi45 remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","tribonacci"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","tribonacci"],"duration":14,"failureDetails":[{"matcherResult":{"actual":["'tribonacciArray' is never reassigned. Use 'const' instead.","Expected a function expression.","'ENDING_RANGE' is already declared in the upper scope on line 3 column 7.","'result' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"'tribonacciArray' is never reassigned. Use 'const' instead.\",\n+   \"Expected a function expression.\",\n+   \"'ENDING_RANGE' is already declared in the upper scope on line 3 column 7.\",\n+   \"'result' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"'tribonacciArray' is never reassigned. Use 'const' instead.\",\n+   \"Expected a function expression.\",\n+   \"'ENDING_RANGE' is already declared in the upper scope on line 3 column 7.\",\n+   \"'result' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS AshwakKattubadi45 tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","array_equals"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","array_equals"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","array_equals"],"duration":10,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'arrIsEqual' has too many lines (25). Maximum allowed is 15.","'finalResult' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'arrIsEqual' has too many lines (25). Maximum allowed is 15.\",\n+   \"'finalResult' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'arrIsEqual' has too many lines (25). Maximum allowed is 15.\",\n+   \"'finalResult' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS AshwakKattubadi45 array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS AshwakKattubadi45 object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["JS-AOFS","AshwakKattubadi45","object_equals"],"duration":9,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'objIsEqual' has too many lines (19). Maximum allowed is 15.","'key' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'objIsEqual' has too many lines (19). Maximum allowed is 15.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'objIsEqual' has too many lines (19). Maximum allowed is 15.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS AshwakKattubadi45 object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Balaraju2007","even_odd"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["JS-AOFS","Balaraju2007","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["JS-AOFS","Balaraju2007","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["JS-AOFS","Balaraju2007","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["JS-AOFS","Balaraju2007","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["JS-AOFS","Balaraju2007","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["JS-AOFS","Balaraju2007","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["JS-AOFS","Balaraju2007","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["JS-AOFS","Balaraju2007","even_odd"],"duration":7,"failureDetails":[{"matcherResult":{"actual":["'displayEvenOddSeries' was used before it was defined.","Expected a function expression.","'obj' is never reassigned. Use 'const' instead.","'key' is never reassigned. Use 'const' instead.","'temporaryVariable' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 7\n\n- Array []\n+ Array [\n+   \"'displayEvenOddSeries' was used before it was defined.\",\n+   \"Expected a function expression.\",\n+   \"'obj' is never reassigned. Use 'const' instead.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"'temporaryVariable' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 7\n\n- Array []\n+ Array [\n+   \"'displayEvenOddSeries' was used before it was defined.\",\n+   \"Expected a function expression.\",\n+   \"'obj' is never reassigned. Use 'const' instead.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"'temporaryVariable' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Balaraju2007 even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Balaraju2007","categorise"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["JS-AOFS","Balaraju2007","categorise"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["JS-AOFS","Balaraju2007","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["JS-AOFS","Balaraju2007","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["JS-AOFS","Balaraju2007","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["JS-AOFS","Balaraju2007","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["JS-AOFS","Balaraju2007","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["JS-AOFS","Balaraju2007","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["JS-AOFS","Balaraju2007","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["JS-AOFS","Balaraju2007","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["JS-AOFS","Balaraju2007","categorise"],"duration":17,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'arrangeCategorise' has too many lines (26). Maximum allowed is 15.","'temp' is never reassigned. Use 'const' instead.","'globalArray' is never reassigned. Use 'const' instead.","'storeValue' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 7\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'arrangeCategorise' has too many lines (26). Maximum allowed is 15.\",\n+   \"'temp' is never reassigned. Use 'const' instead.\",\n+   \"'globalArray' is never reassigned. Use 'const' instead.\",\n+   \"'storeValue' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 7\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'arrangeCategorise' has too many lines (26). Maximum allowed is 15.\",\n+   \"'temp' is never reassigned. Use 'const' instead.\",\n+   \"'globalArray' is never reassigned. Use 'const' instead.\",\n+   \"'storeValue' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Balaraju2007 categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Balaraju2007","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["JS-AOFS","Balaraju2007","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["JS-AOFS","Balaraju2007","entries"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["JS-AOFS","Balaraju2007","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["JS-AOFS","Balaraju2007","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["JS-AOFS","Balaraju2007","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["JS-AOFS","Balaraju2007","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["JS-AOFS","Balaraju2007","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["JS-AOFS","Balaraju2007","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["JS-AOFS","Balaraju2007","entries"],"duration":7,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","'resultArray' is never reassigned. Use 'const' instead.","'key' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"'resultArray' is never reassigned. Use 'const' instead.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"'resultArray' is never reassigned. Use 'const' instead.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Balaraju2007 entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Balaraju2007","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["JS-AOFS","Balaraju2007","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["JS-AOFS","Balaraju2007","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["JS-AOFS","Balaraju2007","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["JS-AOFS","Balaraju2007","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["JS-AOFS","Balaraju2007","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["JS-AOFS","Balaraju2007","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["JS-AOFS","Balaraju2007","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["JS-AOFS","Balaraju2007","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["JS-AOFS","Balaraju2007","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["JS-AOFS","Balaraju2007","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["JS-AOFS","Balaraju2007","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["JS-AOFS","Balaraju2007","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["JS-AOFS","Balaraju2007","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["JS-AOFS","Balaraju2007","remove_adjacent_spaces"],"duration":12,"failureDetails":[{"matcherResult":{"actual":["'storeValue' is never reassigned. Use 'const' instead.","'removeAdjacentSpaces' was used before it was defined.","Expected a function expression.","Function 'removeAdjacentSpaces' has too many lines (28). Maximum allowed is 15.","Expected '!==' and instead saw '!='."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 7\n\n- Array []\n+ Array [\n+   \"'storeValue' is never reassigned. Use 'const' instead.\",\n+   \"'removeAdjacentSpaces' was used before it was defined.\",\n+   \"Expected a function expression.\",\n+   \"Function 'removeAdjacentSpaces' has too many lines (28). Maximum allowed is 15.\",\n+   \"Expected '!==' and instead saw '!='.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 7\n\n- Array []\n+ Array [\n+   \"'storeValue' is never reassigned. Use 'const' instead.\",\n+   \"'removeAdjacentSpaces' was used before it was defined.\",\n+   \"Expected a function expression.\",\n+   \"Function 'removeAdjacentSpaces' has too many lines (28). Maximum allowed is 15.\",\n+   \"Expected '!==' and instead saw '!='.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Balaraju2007 remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Balaraju2007","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["JS-AOFS","Balaraju2007","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["JS-AOFS","Balaraju2007","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["JS-AOFS","Balaraju2007","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["JS-AOFS","Balaraju2007","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["JS-AOFS","Balaraju2007","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["JS-AOFS","Balaraju2007","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["JS-AOFS","Balaraju2007","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["JS-AOFS","Balaraju2007","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["JS-AOFS","Balaraju2007","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["JS-AOFS","Balaraju2007","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["JS-AOFS","Balaraju2007","tribonacci"],"duration":10,"failureDetails":[{"matcherResult":{"actual":["'storeValue' is never reassigned. Use 'const' instead.","'tribonacci' was used before it was defined.","Expected a function expression.","Function 'tribonacci' has too many lines (20). Maximum allowed is 15.","'resultArray' is never reassigned. Use 'const' instead.","Expected a function expression.","Unnecessary 'else' after 'return'.","Assignment to function parameter 'firstNumber'.","Assignment to function parameter 'secondNumber'.","Assignment to function parameter 'thirdNumber'.","Assignment to function parameter 'finalNumber'."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 13\n\n- Array []\n+ Array [\n+   \"'storeValue' is never reassigned. Use 'const' instead.\",\n+   \"'tribonacci' was used before it was defined.\",\n+   \"Expected a function expression.\",\n+   \"Function 'tribonacci' has too many lines (20). Maximum allowed is 15.\",\n+   \"'resultArray' is never reassigned. Use 'const' instead.\",\n+   \"Expected a function expression.\",\n+   \"Unnecessary 'else' after 'return'.\",\n+   \"Assignment to function parameter 'firstNumber'.\",\n+   \"Assignment to function parameter 'secondNumber'.\",\n+   \"Assignment to function parameter 'thirdNumber'.\",\n+   \"Assignment to function parameter 'finalNumber'.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 13\n\n- Array []\n+ Array [\n+   \"'storeValue' is never reassigned. Use 'const' instead.\",\n+   \"'tribonacci' was used before it was defined.\",\n+   \"Expected a function expression.\",\n+   \"Function 'tribonacci' has too many lines (20). Maximum allowed is 15.\",\n+   \"'resultArray' is never reassigned. Use 'const' instead.\",\n+   \"Expected a function expression.\",\n+   \"Unnecessary 'else' after 'return'.\",\n+   \"Assignment to function parameter 'firstNumber'.\",\n+   \"Assignment to function parameter 'secondNumber'.\",\n+   \"Assignment to function parameter 'thirdNumber'.\",\n+   \"Assignment to function parameter 'finalNumber'.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Balaraju2007 tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Balaraju2007","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Balaraju2007","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["JS-AOFS","Balaraju2007","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["JS-AOFS","Balaraju2007","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["JS-AOFS","Balaraju2007","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","Balaraju2007","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","Balaraju2007","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Balaraju2007","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["JS-AOFS","Balaraju2007","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","Balaraju2007","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["JS-AOFS","Balaraju2007","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","Balaraju2007","array_equals"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","Balaraju2007","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","Balaraju2007","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","Balaraju2007","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","Balaraju2007","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["JS-AOFS","Balaraju2007","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["JS-AOFS","Balaraju2007","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Balaraju2007","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["JS-AOFS","Balaraju2007","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["JS-AOFS","Balaraju2007","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["JS-AOFS","Balaraju2007","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["JS-AOFS","Balaraju2007","array_equals"],"duration":8,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'compareArrays' has too many lines (19). Maximum allowed is 15.","Expected '!==' and instead saw '!='.","Expected '!==' and instead saw '!='."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'compareArrays' has too many lines (19). Maximum allowed is 15.\",\n+   \"Expected '!==' and instead saw '!='.\",\n+   \"Expected '!==' and instead saw '!='.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'compareArrays' has too many lines (19). Maximum allowed is 15.\",\n+   \"Expected '!==' and instead saw '!='.\",\n+   \"Expected '!==' and instead saw '!='.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Balaraju2007 array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Balaraju2007","object_equals"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Balaraju2007","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Balaraju2007","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Balaraju2007","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Balaraju2007","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Balaraju2007","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","Balaraju2007","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","Balaraju2007","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","Balaraju2007","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","Balaraju2007","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["JS-AOFS","Balaraju2007","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","Balaraju2007","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","Balaraju2007","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["JS-AOFS","Balaraju2007","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["JS-AOFS","Balaraju2007","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["JS-AOFS","Balaraju2007","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["JS-AOFS","Balaraju2007","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Balaraju2007 object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["JS-AOFS","Balaraju2007","object_equals"],"duration":23,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'compareArrays' has too many lines (26). Maximum allowed is 15.","'array1' is never reassigned. Use 'const' instead.","'array2' is never reassigned. Use 'const' instead.","Expected '!==' and instead saw '!='.","Expected '===' and instead saw '=='."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 8\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'compareArrays' has too many lines (26). Maximum allowed is 15.\",\n+   \"'array1' is never reassigned. Use 'const' instead.\",\n+   \"'array2' is never reassigned. Use 'const' instead.\",\n+   \"Expected '!==' and instead saw '!='.\",\n+   \"Expected '===' and instead saw '=='.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 8\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'compareArrays' has too many lines (26). Maximum allowed is 15.\",\n+   \"'array1' is never reassigned. Use 'const' instead.\",\n+   \"'array2' is never reassigned. Use 'const' instead.\",\n+   \"Expected '!==' and instead saw '!='.\",\n+   \"Expected '===' and instead saw '=='.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Balaraju2007 object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","even_odd"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","even_odd"],"duration":10,"failureDetails":[{"matcherResult":{"actual":["'array' is never reassigned. Use 'const' instead.","'array' is already declared in the upper scope on line 17 column 5.","'object' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"'array' is never reassigned. Use 'const' instead.\",\n+   \"'array' is already declared in the upper scope on line 17 column 5.\",\n+   \"'object' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"'array' is never reassigned. Use 'const' instead.\",\n+   \"'array' is already declared in the upper scope on line 17 column 5.\",\n+   \"'object' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Chandiniruttala even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","categorise"],"duration":12,"failureDetails":[{"matcherResult":{"actual":["'array' is never reassigned. Use 'const' instead.","Function has too many lines (27). Maximum allowed is 15.","'array' is already declared in the upper scope on line 26 column 5.","'temp' is never reassigned. Use 'const' instead.","'resultArray' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 7\n\n- Array []\n+ Array [\n+   \"'array' is never reassigned. Use 'const' instead.\",\n+   \"Function has too many lines (27). Maximum allowed is 15.\",\n+   \"'array' is already declared in the upper scope on line 26 column 5.\",\n+   \"'temp' is never reassigned. Use 'const' instead.\",\n+   \"'resultArray' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 7\n\n- Array []\n+ Array [\n+   \"'array' is never reassigned. Use 'const' instead.\",\n+   \"Function has too many lines (27). Maximum allowed is 15.\",\n+   \"'array' is already declared in the upper scope on line 26 column 5.\",\n+   \"'temp' is never reassigned. Use 'const' instead.\",\n+   \"'resultArray' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Chandiniruttala categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","entries"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["'object' is already declared in the upper scope on line 23 column 7.","'entriesArray' is never reassigned. Use 'const' instead.","'key' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"'object' is already declared in the upper scope on line 23 column 7.\",\n+   \"'entriesArray' is never reassigned. Use 'const' instead.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"'object' is already declared in the upper scope on line 23 column 7.\",\n+   \"'entriesArray' is never reassigned. Use 'const' instead.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Chandiniruttala entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","remove_adjacent_spaces"],"duration":6,"failureDetails":[{"matcherResult":{"actual":["'text' is never reassigned. Use 'const' instead.","Function has too many lines (24). Maximum allowed is 15.","'text' is already declared in the upper scope on line 32 column 5."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"'text' is never reassigned. Use 'const' instead.\",\n+   \"Function has too many lines (24). Maximum allowed is 15.\",\n+   \"'text' is already declared in the upper scope on line 32 column 5.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"'text' is never reassigned. Use 'const' instead.\",\n+   \"Function has too many lines (24). Maximum allowed is 15.\",\n+   \"'text' is already declared in the upper scope on line 32 column 5.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Chandiniruttala remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","tribonacci"],"duration":7,"failureDetails":[{"matcherResult":{"actual":["'tribonacciArray' is never reassigned. Use 'const' instead.","'endingRange' is already declared in the upper scope on line 23 column 7.","Assignment to function parameter 'firstOne'.","Assignment to function parameter 'secondOne'.","Assignment to function parameter 'thirdOne'.","Unnecessary 'else' after 'return'."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 8\n\n- Array []\n+ Array [\n+   \"'tribonacciArray' is never reassigned. Use 'const' instead.\",\n+   \"'endingRange' is already declared in the upper scope on line 23 column 7.\",\n+   \"Assignment to function parameter 'firstOne'.\",\n+   \"Assignment to function parameter 'secondOne'.\",\n+   \"Assignment to function parameter 'thirdOne'.\",\n+   \"Unnecessary 'else' after 'return'.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 8\n\n- Array []\n+ Array [\n+   \"'tribonacciArray' is never reassigned. Use 'const' instead.\",\n+   \"'endingRange' is already declared in the upper scope on line 23 column 7.\",\n+   \"Assignment to function parameter 'firstOne'.\",\n+   \"Assignment to function parameter 'secondOne'.\",\n+   \"Assignment to function parameter 'thirdOne'.\",\n+   \"Unnecessary 'else' after 'return'.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Chandiniruttala tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","array_equals"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","array_equals"],"duration":10,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (37). Maximum allowed is 15.","'array1' is never reassigned. Use 'const' instead.","'array2' is never reassigned. Use 'const' instead.","Identifier 'length_array1' is not in camel case.","Identifier 'length_array2' is not in camel case.","'index' is never reassigned. Use 'const' instead.","Identifier 'length_array1' is not in camel case.","'index' is never reassigned. Use 'const' instead.","Identifier 'length_array2' is not in camel case.","Identifier 'length_array1' is not in camel case.","Identifier 'length_array2' is not in camel case.","Identifier 'length_array1' is not in camel case.","Unexpected use of continue statement.","Expected '===' and instead saw '=='.","Expected '===' and instead saw '=='."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 17\n\n- Array []\n+ Array [\n+   \"Function has too many lines (37). Maximum allowed is 15.\",\n+   \"'array1' is never reassigned. Use 'const' instead.\",\n+   \"'array2' is never reassigned. Use 'const' instead.\",\n+   \"Identifier 'length_array1' is not in camel case.\",\n+   \"Identifier 'length_array2' is not in camel case.\",\n+   \"'index' is never reassigned. Use 'const' instead.\",\n+   \"Identifier 'length_array1' is not in camel case.\",\n+   \"'index' is never reassigned. Use 'const' instead.\",\n+   \"Identifier 'length_array2' is not in camel case.\",\n+   \"Identifier 'length_array1' is not in camel case.\",\n+   \"Identifier 'length_array2' is not in camel case.\",\n+   \"Identifier 'length_array1' is not in camel case.\",\n+   \"Unexpected use of continue statement.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Expected '===' and instead saw '=='.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 17\n\n- Array []\n+ Array [\n+   \"Function has too many lines (37). Maximum allowed is 15.\",\n+   \"'array1' is never reassigned. Use 'const' instead.\",\n+   \"'array2' is never reassigned. Use 'const' instead.\",\n+   \"Identifier 'length_array1' is not in camel case.\",\n+   \"Identifier 'length_array2' is not in camel case.\",\n+   \"'index' is never reassigned. Use 'const' instead.\",\n+   \"Identifier 'length_array1' is not in camel case.\",\n+   \"'index' is never reassigned. Use 'const' instead.\",\n+   \"Identifier 'length_array2' is not in camel case.\",\n+   \"Identifier 'length_array1' is not in camel case.\",\n+   \"Identifier 'length_array2' is not in camel case.\",\n+   \"Identifier 'length_array1' is not in camel case.\",\n+   \"Unexpected use of continue statement.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Expected '===' and instead saw '=='.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Chandiniruttala array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Chandiniruttala object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["JS-AOFS","Chandiniruttala","object_equals"],"duration":10,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (39). Maximum allowed is 15.","'array1' is never reassigned. Use 'const' instead.","'array2' is never reassigned. Use 'const' instead.","'key' is never reassigned. Use 'const' instead.","'key' is never reassigned. Use 'const' instead.","'key' is never reassigned. Use 'const' instead.","'value1' is never reassigned. Use 'const' instead.","'value2' is never reassigned. Use 'const' instead.","Expected '===' and instead saw '=='.","Expected '===' and instead saw '=='.","Unexpected use of continue statement.","Expected '===' and instead saw '=='.","Expected '===' and instead saw '=='."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 15\n\n- Array []\n+ Array [\n+   \"Function has too many lines (39). Maximum allowed is 15.\",\n+   \"'array1' is never reassigned. Use 'const' instead.\",\n+   \"'array2' is never reassigned. Use 'const' instead.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"'value1' is never reassigned. Use 'const' instead.\",\n+   \"'value2' is never reassigned. Use 'const' instead.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Unexpected use of continue statement.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Expected '===' and instead saw '=='.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 15\n\n- Array []\n+ Array [\n+   \"Function has too many lines (39). Maximum allowed is 15.\",\n+   \"'array1' is never reassigned. Use 'const' instead.\",\n+   \"'array2' is never reassigned. Use 'const' instead.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"'value1' is never reassigned. Use 'const' instead.\",\n+   \"'value2' is never reassigned. Use 'const' instead.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Unexpected use of continue statement.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Expected '===' and instead saw '=='.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Chandiniruttala object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Charantej21","even_odd"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["JS-AOFS","Charantej21","even_odd"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["JS-AOFS","Charantej21","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["JS-AOFS","Charantej21","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["JS-AOFS","Charantej21","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["JS-AOFS","Charantej21","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["JS-AOFS","Charantej21","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["JS-AOFS","Charantej21","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["JS-AOFS","Charantej21","even_odd"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Charantej21","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["JS-AOFS","Charantej21","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["JS-AOFS","Charantej21","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["JS-AOFS","Charantej21","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["JS-AOFS","Charantej21","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["JS-AOFS","Charantej21","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["JS-AOFS","Charantej21","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["JS-AOFS","Charantej21","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["JS-AOFS","Charantej21","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["JS-AOFS","Charantej21","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["JS-AOFS","Charantej21","categorise"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Charantej21","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["JS-AOFS","Charantej21","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["JS-AOFS","Charantej21","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["JS-AOFS","Charantej21","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["JS-AOFS","Charantej21","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["JS-AOFS","Charantej21","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["JS-AOFS","Charantej21","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["JS-AOFS","Charantej21","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["JS-AOFS","Charantej21","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["JS-AOFS","Charantej21","entries"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Charantej21","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["JS-AOFS","Charantej21","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["JS-AOFS","Charantej21","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["JS-AOFS","Charantej21","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["JS-AOFS","Charantej21","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["JS-AOFS","Charantej21","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["JS-AOFS","Charantej21","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["JS-AOFS","Charantej21","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["JS-AOFS","Charantej21","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["JS-AOFS","Charantej21","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["JS-AOFS","Charantej21","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["JS-AOFS","Charantej21","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["JS-AOFS","Charantej21","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["JS-AOFS","Charantej21","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["JS-AOFS","Charantej21","remove_adjacent_spaces"],"duration":6,"failureDetails":[{"matcherResult":{"actual":["Expected { after 'if' condition."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Expected { after 'if' condition.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Expected { after 'if' condition.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Charantej21 remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Charantej21","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["JS-AOFS","Charantej21","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["JS-AOFS","Charantej21","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["JS-AOFS","Charantej21","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["JS-AOFS","Charantej21","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["JS-AOFS","Charantej21","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["JS-AOFS","Charantej21","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["JS-AOFS","Charantej21","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["JS-AOFS","Charantej21","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["JS-AOFS","Charantej21","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["JS-AOFS","Charantej21","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["JS-AOFS","Charantej21","tribonacci"],"duration":8,"failureDetails":[{"matcherResult":{"actual":["'threeNumberssum' is never reassigned. Use 'const' instead.","Assignment to function parameter 'numberOne'.","Assignment to function parameter 'numberTwo'.","Assignment to function parameter 'numberThree'."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"'threeNumberssum' is never reassigned. Use 'const' instead.\",\n+   \"Assignment to function parameter 'numberOne'.\",\n+   \"Assignment to function parameter 'numberTwo'.\",\n+   \"Assignment to function parameter 'numberThree'.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"'threeNumberssum' is never reassigned. Use 'const' instead.\",\n+   \"Assignment to function parameter 'numberOne'.\",\n+   \"Assignment to function parameter 'numberTwo'.\",\n+   \"Assignment to function parameter 'numberThree'.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Charantej21 tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Charantej21","array_equals"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Charantej21","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["JS-AOFS","Charantej21","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["JS-AOFS","Charantej21","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["JS-AOFS","Charantej21","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","Charantej21","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","Charantej21","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Charantej21","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["JS-AOFS","Charantej21","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","Charantej21","array_equals"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["JS-AOFS","Charantej21","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","Charantej21","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","Charantej21","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","Charantej21","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","Charantej21","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","Charantej21","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["JS-AOFS","Charantej21","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["JS-AOFS","Charantej21","array_equals"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Charantej21","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["JS-AOFS","Charantej21","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["JS-AOFS","Charantej21","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["JS-AOFS","Charantej21","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["JS-AOFS","Charantej21","array_equals"],"duration":9,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (27). Maximum allowed is 15.","Unexpected use of continue statement.","Unexpected if as the only statement in an else block."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Function has too many lines (27). Maximum allowed is 15.\",\n+   \"Unexpected use of continue statement.\",\n+   \"Unexpected if as the only statement in an else block.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Function has too many lines (27). Maximum allowed is 15.\",\n+   \"Unexpected use of continue statement.\",\n+   \"Unexpected if as the only statement in an else block.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Charantej21 array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Charantej21","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Charantej21","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Charantej21","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Charantej21","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Charantej21","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Charantej21","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","Charantej21","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","Charantej21","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","Charantej21","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","Charantej21","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["JS-AOFS","Charantej21","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","Charantej21","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","Charantej21","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["JS-AOFS","Charantej21","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["JS-AOFS","Charantej21","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["JS-AOFS","Charantej21","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["JS-AOFS","Charantej21","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Charantej21 object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["JS-AOFS","Charantej21","object_equals"],"duration":8,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (22). Maximum allowed is 15.","'key' is never reassigned. Use 'const' instead.","Unnecessary 'else' after 'return'.","Unexpected if as the only statement in an else block."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Function has too many lines (22). Maximum allowed is 15.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"Unnecessary 'else' after 'return'.\",\n+   \"Unexpected if as the only statement in an else block.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Function has too many lines (22). Maximum allowed is 15.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"Unnecessary 'else' after 'return'.\",\n+   \"Unexpected if as the only statement in an else block.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Charantej21 object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","even_odd"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","even_odd"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","even_odd"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Identifier 'even_odd' is not in camel case.","'NUMBERS' is already declared in the upper scope on line 3 column 7.","'object' is never reassigned. Use 'const' instead.","Expected '===' and instead saw '=='."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 7\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Identifier 'even_odd' is not in camel case.\",\n+   \"'NUMBERS' is already declared in the upper scope on line 3 column 7.\",\n+   \"'object' is never reassigned. Use 'const' instead.\",\n+   \"Expected '===' and instead saw '=='.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 7\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Identifier 'even_odd' is not in camel case.\",\n+   \"'NUMBERS' is already declared in the upper scope on line 3 column 7.\",\n+   \"'object' is never reassigned. Use 'const' instead.\",\n+   \"Expected '===' and instead saw '=='.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Dhanalaxmi-Mendadala even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","categorise"],"duration":7,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","'NUMBERS' is already declared in the upper scope on line 3 column 7.","'SortedArray' is never reassigned. Use 'const' instead.","'temp' is never reassigned. Use 'const' instead.","'subArray' is never reassigned. Use 'const' instead.","Expected '===' and instead saw '=='."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 8\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"'NUMBERS' is already declared in the upper scope on line 3 column 7.\",\n+   \"'SortedArray' is never reassigned. Use 'const' instead.\",\n+   \"'temp' is never reassigned. Use 'const' instead.\",\n+   \"'subArray' is never reassigned. Use 'const' instead.\",\n+   \"Expected '===' and instead saw '=='.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 8\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"'NUMBERS' is already declared in the upper scope on line 3 column 7.\",\n+   \"'SortedArray' is never reassigned. Use 'const' instead.\",\n+   \"'temp' is never reassigned. Use 'const' instead.\",\n+   \"'subArray' is never reassigned. Use 'const' instead.\",\n+   \"Expected '===' and instead saw '=='.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Dhanalaxmi-Mendadala categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","entries"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","entries"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","entries"],"duration":14,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","'OBJECT' is already declared in the upper scope on line 3 column 7.","'ArrayOfData' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"'OBJECT' is already declared in the upper scope on line 3 column 7.\",\n+   \"'ArrayOfData' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"'OBJECT' is already declared in the upper scope on line 3 column 7.\",\n+   \"'ArrayOfData' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Dhanalaxmi-Mendadala entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","remove_adjacent_spaces"],"duration":5,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'remove' has too many lines (31). Maximum allowed is 15.","'TEXT' is already declared in the upper scope on line 3 column 7.","'string' is never reassigned. Use 'const' instead.","Expected '!==' and instead saw '!='.","Expected '!==' and instead saw '!='.","Expected '===' and instead saw '=='.","Expected '===' and instead saw '=='."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 10\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'remove' has too many lines (31). Maximum allowed is 15.\",\n+   \"'TEXT' is already declared in the upper scope on line 3 column 7.\",\n+   \"'string' is never reassigned. Use 'const' instead.\",\n+   \"Expected '!==' and instead saw '!='.\",\n+   \"Expected '!==' and instead saw '!='.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Expected '===' and instead saw '=='.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 10\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'remove' has too many lines (31). Maximum allowed is 15.\",\n+   \"'TEXT' is already declared in the upper scope on line 3 column 7.\",\n+   \"'string' is never reassigned. Use 'const' instead.\",\n+   \"Expected '!==' and instead saw '!='.\",\n+   \"Expected '!==' and instead saw '!='.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Expected '===' and instead saw '=='.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Dhanalaxmi-Mendadala remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","tribonacci"],"duration":8,"failureDetails":[{"matcherResult":{"actual":["'SequenceArray' is never reassigned. Use 'const' instead.","'ENDING_RANGE' is already declared in the upper scope on line 3 column 7.","Unnecessary 'else' after 'return'."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"'SequenceArray' is never reassigned. Use 'const' instead.\",\n+   \"'ENDING_RANGE' is already declared in the upper scope on line 3 column 7.\",\n+   \"Unnecessary 'else' after 'return'.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"'SequenceArray' is never reassigned. Use 'const' instead.\",\n+   \"'ENDING_RANGE' is already declared in the upper scope on line 3 column 7.\",\n+   \"Unnecessary 'else' after 'return'.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Dhanalaxmi-Mendadala tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","array_equals"],"duration":11,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'equal' has too many lines (24). Maximum allowed is 15.","Expected '===' and instead saw '=='.","Expected '===' and instead saw '=='.","Unexpected use of continue statement."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 7\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'equal' has too many lines (24). Maximum allowed is 15.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Unexpected use of continue statement.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 7\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'equal' has too many lines (24). Maximum allowed is 15.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Unexpected use of continue statement.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Dhanalaxmi-Mendadala array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Dhanalaxmi-Mendadala object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["JS-AOFS","Dhanalaxmi-Mendadala","object_equals"],"duration":6,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'object_equals' has too many lines (24). Maximum allowed is 15.","Identifier 'object_equals' is not in camel case.","Expected '===' and instead saw '=='.","Expected '===' and instead saw '=='.","Expected '!==' and instead saw '!='.","Unexpected use of continue statement.","Expected '!==' and instead saw '!='."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 10\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'object_equals' has too many lines (24). Maximum allowed is 15.\",\n+   \"Identifier 'object_equals' is not in camel case.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Expected '!==' and instead saw '!='.\",\n+   \"Unexpected use of continue statement.\",\n+   \"Expected '!==' and instead saw '!='.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 10\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'object_equals' has too many lines (24). Maximum allowed is 15.\",\n+   \"Identifier 'object_equals' is not in camel case.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Expected '!==' and instead saw '!='.\",\n+   \"Unexpected use of continue statement.\",\n+   \"Expected '!==' and instead saw '!='.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Dhanalaxmi-Mendadala object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","G-Rajini","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["JS-AOFS","G-Rajini","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["JS-AOFS","G-Rajini","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["JS-AOFS","G-Rajini","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["JS-AOFS","G-Rajini","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["JS-AOFS","G-Rajini","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["JS-AOFS","G-Rajini","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["JS-AOFS","G-Rajini","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["JS-AOFS","G-Rajini","even_odd"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["'key' is defined but never used.","'NUMBERS' is already declared in the upper scope on line 3 column 7.","'index' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"'key' is defined but never used.\",\n+   \"'NUMBERS' is already declared in the upper scope on line 3 column 7.\",\n+   \"'index' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"'key' is defined but never used.\",\n+   \"'NUMBERS' is already declared in the upper scope on line 3 column 7.\",\n+   \"'index' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS G-Rajini even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","G-Rajini","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["JS-AOFS","G-Rajini","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["JS-AOFS","G-Rajini","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["JS-AOFS","G-Rajini","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["JS-AOFS","G-Rajini","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["JS-AOFS","G-Rajini","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["JS-AOFS","G-Rajini","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["JS-AOFS","G-Rajini","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["JS-AOFS","G-Rajini","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["JS-AOFS","G-Rajini","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["JS-AOFS","G-Rajini","categorise"],"duration":6,"failureDetails":[{"matcherResult":{"actual":["'NUMBERS' is already declared in the upper scope on line 3 column 7.","'temp' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"'NUMBERS' is already declared in the upper scope on line 3 column 7.\",\n+   \"'temp' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"'NUMBERS' is already declared in the upper scope on line 3 column 7.\",\n+   \"'temp' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS G-Rajini categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","G-Rajini","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["JS-AOFS","G-Rajini","entries"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["JS-AOFS","G-Rajini","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["JS-AOFS","G-Rajini","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["JS-AOFS","G-Rajini","entries"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["JS-AOFS","G-Rajini","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["JS-AOFS","G-Rajini","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["JS-AOFS","G-Rajini","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["JS-AOFS","G-Rajini","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["JS-AOFS","G-Rajini","entries"],"duration":9,"failureDetails":[{"matcherResult":{"actual":["'key' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS G-Rajini entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","G-Rajini","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["JS-AOFS","G-Rajini","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["JS-AOFS","G-Rajini","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["JS-AOFS","G-Rajini","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["JS-AOFS","G-Rajini","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["JS-AOFS","G-Rajini","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["JS-AOFS","G-Rajini","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["JS-AOFS","G-Rajini","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["JS-AOFS","G-Rajini","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["JS-AOFS","G-Rajini","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["JS-AOFS","G-Rajini","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["JS-AOFS","G-Rajini","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["JS-AOFS","G-Rajini","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["JS-AOFS","G-Rajini","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["JS-AOFS","G-Rajini","remove_adjacent_spaces"],"duration":8,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (23). Maximum allowed is 15.","'TEXT' is already declared in the upper scope on line 3 column 7."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Function has too many lines (23). Maximum allowed is 15.\",\n+   \"'TEXT' is already declared in the upper scope on line 3 column 7.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Function has too many lines (23). Maximum allowed is 15.\",\n+   \"'TEXT' is already declared in the upper scope on line 3 column 7.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS G-Rajini remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","G-Rajini","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["JS-AOFS","G-Rajini","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["JS-AOFS","G-Rajini","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["JS-AOFS","G-Rajini","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["JS-AOFS","G-Rajini","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["JS-AOFS","G-Rajini","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["JS-AOFS","G-Rajini","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["JS-AOFS","G-Rajini","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["JS-AOFS","G-Rajini","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["JS-AOFS","G-Rajini","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["JS-AOFS","G-Rajini","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["JS-AOFS","G-Rajini","tribonacci"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["'ENDING_RANGE' is already declared in the upper scope on line 3 column 7."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"'ENDING_RANGE' is already declared in the upper scope on line 3 column 7.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"'ENDING_RANGE' is already declared in the upper scope on line 3 column 7.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS G-Rajini tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","G-Rajini","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","G-Rajini","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["JS-AOFS","G-Rajini","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["JS-AOFS","G-Rajini","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["JS-AOFS","G-Rajini","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","G-Rajini","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","G-Rajini","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","G-Rajini","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["JS-AOFS","G-Rajini","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","G-Rajini","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["JS-AOFS","G-Rajini","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","G-Rajini","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","G-Rajini","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","G-Rajini","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","G-Rajini","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","G-Rajini","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["JS-AOFS","G-Rajini","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["JS-AOFS","G-Rajini","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","G-Rajini","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["JS-AOFS","G-Rajini","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["JS-AOFS","G-Rajini","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["JS-AOFS","G-Rajini","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["JS-AOFS","G-Rajini","array_equals"],"duration":10,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (23). Maximum allowed is 15.","'y' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Function has too many lines (23). Maximum allowed is 15.\",\n+   \"'y' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Function has too many lines (23). Maximum allowed is 15.\",\n+   \"'y' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS G-Rajini array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","G-Rajini","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","G-Rajini","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","G-Rajini","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","G-Rajini","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","G-Rajini","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","G-Rajini","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","G-Rajini","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","G-Rajini","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","G-Rajini","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","G-Rajini","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["JS-AOFS","G-Rajini","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","G-Rajini","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","G-Rajini","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["JS-AOFS","G-Rajini","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["JS-AOFS","G-Rajini","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["JS-AOFS","G-Rajini","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["JS-AOFS","G-Rajini","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS G-Rajini object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["JS-AOFS","G-Rajini","object_equals"],"duration":6,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (30). Maximum allowed is 15.","'obj1Length' is never reassigned. Use 'const' instead.","'obj2Length' is never reassigned. Use 'const' instead.","'index' is never reassigned. Use 'const' instead.","'x' is never reassigned. Use 'const' instead.","Blocks are nested too deeply (5). Maximum allowed is 4.","Unnecessary 'else' after 'return'.","Unexpected use of continue statement."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 10\n\n- Array []\n+ Array [\n+   \"Function has too many lines (30). Maximum allowed is 15.\",\n+   \"'obj1Length' is never reassigned. Use 'const' instead.\",\n+   \"'obj2Length' is never reassigned. Use 'const' instead.\",\n+   \"'index' is never reassigned. Use 'const' instead.\",\n+   \"'x' is never reassigned. Use 'const' instead.\",\n+   \"Blocks are nested too deeply (5). Maximum allowed is 4.\",\n+   \"Unnecessary 'else' after 'return'.\",\n+   \"Unexpected use of continue statement.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 10\n\n- Array []\n+ Array [\n+   \"Function has too many lines (30). Maximum allowed is 15.\",\n+   \"'obj1Length' is never reassigned. Use 'const' instead.\",\n+   \"'obj2Length' is never reassigned. Use 'const' instead.\",\n+   \"'index' is never reassigned. Use 'const' instead.\",\n+   \"'x' is never reassigned. Use 'const' instead.\",\n+   \"Blocks are nested too deeply (5). Maximum allowed is 4.\",\n+   \"Unnecessary 'else' after 'return'.\",\n+   \"Unexpected use of continue statement.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS G-Rajini object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","even_odd"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","even_odd"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","even_odd"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","even_odd"],"duration":6,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'evenOdd' has too many lines (18). Maximum allowed is 15.","'finalObject' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'evenOdd' has too many lines (18). Maximum allowed is 15.\",\n+   \"'finalObject' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'evenOdd' has too many lines (18). Maximum allowed is 15.\",\n+   \"'finalObject' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS GOWRIPRASADTW even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","categorise"],"duration":9,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'categoriseArrayElements' has too many lines (24). Maximum allowed is 15.","'categoriseArray' is never reassigned. Use 'const' instead.","'commonArrayElement' is never reassigned. Use 'const' instead.","Expected '===' and instead saw '=='."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 7\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'categoriseArrayElements' has too many lines (24). Maximum allowed is 15.\",\n+   \"'categoriseArray' is never reassigned. Use 'const' instead.\",\n+   \"'commonArrayElement' is never reassigned. Use 'const' instead.\",\n+   \"Expected '===' and instead saw '=='.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 7\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'categoriseArrayElements' has too many lines (24). Maximum allowed is 15.\",\n+   \"'categoriseArray' is never reassigned. Use 'const' instead.\",\n+   \"'commonArrayElement' is never reassigned. Use 'const' instead.\",\n+   \"Expected '===' and instead saw '=='.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS GOWRIPRASADTW categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","entries"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","entries"],"duration":17,"failureDetails":[{"matcherResult":{"actual":["'finalResult' is never reassigned. Use 'const' instead.","'keys' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"'finalResult' is never reassigned. Use 'const' instead.\",\n+   \"'keys' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"'finalResult' is never reassigned. Use 'const' instead.\",\n+   \"'keys' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS GOWRIPRASADTW entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","remove_adjacent_spaces"],"duration":6,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","'resultantString' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"'resultantString' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"'resultantString' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS GOWRIPRASADTW remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","tribonacci"],"duration":5,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS GOWRIPRASADTW tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","array_equals"],"duration":10,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'arrayEqual' has too many lines (26). Maximum allowed is 15.","Unexpected if as the only statement in an else block."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'arrayEqual' has too many lines (26). Maximum allowed is 15.\",\n+   \"Unexpected if as the only statement in an else block.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'arrayEqual' has too many lines (26). Maximum allowed is 15.\",\n+   \"Unexpected if as the only statement in an else block.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS GOWRIPRASADTW array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS GOWRIPRASADTW object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["JS-AOFS","GOWRIPRASADTW","object_equals"],"duration":5,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'objectEqual' has too many lines (24). Maximum allowed is 15.","'element' is never reassigned. Use 'const' instead.","Unexpected if as the only statement in an else block."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'objectEqual' has too many lines (24). Maximum allowed is 15.\",\n+   \"'element' is never reassigned. Use 'const' instead.\",\n+   \"Unexpected if as the only statement in an else block.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'objectEqual' has too many lines (24). Maximum allowed is 15.\",\n+   \"'element' is never reassigned. Use 'const' instead.\",\n+   \"Unexpected if as the only statement in an else block.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS GOWRIPRASADTW object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","even_odd"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","'NUMBERS' is already declared in the upper scope on line 3 column 7."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"'NUMBERS' is already declared in the upper scope on line 3 column 7.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"'NUMBERS' is already declared in the upper scope on line 3 column 7.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Harshavardhanlav even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","categorise"],"duration":5,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'categorizeAndSort' has too many lines (30). Maximum allowed is 15."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'categorizeAndSort' has too many lines (30). Maximum allowed is 15.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'categorizeAndSort' has too many lines (30). Maximum allowed is 15.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Harshavardhanlav categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","entries"],"duration":20,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","'OBJECT' is already declared in the upper scope on line 3 column 7.","'result' is never reassigned. Use 'const' instead.","'key' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"'OBJECT' is already declared in the upper scope on line 3 column 7.\",\n+   \"'result' is never reassigned. Use 'const' instead.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"'OBJECT' is already declared in the upper scope on line 3 column 7.\",\n+   \"'result' is never reassigned. Use 'const' instead.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Harshavardhanlav entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","remove_adjacent_spaces"],"duration":19,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","remove_adjacent_spaces"],"duration":22,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'removeAdjacentSpaces' has too many lines (26). Maximum allowed is 15."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'removeAdjacentSpaces' has too many lines (26). Maximum allowed is 15.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'removeAdjacentSpaces' has too many lines (26). Maximum allowed is 15.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Harshavardhanlav remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","tribonacci"],"duration":6,"failureDetails":[{"matcherResult":{"actual":["'result' is assigned a value but never used.","'result' is never reassigned. Use 'const' instead.","Expected a function expression.","Function 'tribonacii' has too many lines (18). Maximum allowed is 15.","'result' is never reassigned. Use 'const' instead.","'result' is already declared in the upper scope on line 39 column 5.","Unnecessary 'else' after 'return'."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 9\n\n- Array []\n+ Array [\n+   \"'result' is assigned a value but never used.\",\n+   \"'result' is never reassigned. Use 'const' instead.\",\n+   \"Expected a function expression.\",\n+   \"Function 'tribonacii' has too many lines (18). Maximum allowed is 15.\",\n+   \"'result' is never reassigned. Use 'const' instead.\",\n+   \"'result' is already declared in the upper scope on line 39 column 5.\",\n+   \"Unnecessary 'else' after 'return'.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 9\n\n- Array []\n+ Array [\n+   \"'result' is assigned a value but never used.\",\n+   \"'result' is never reassigned. Use 'const' instead.\",\n+   \"Expected a function expression.\",\n+   \"Function 'tribonacii' has too many lines (18). Maximum allowed is 15.\",\n+   \"'result' is never reassigned. Use 'const' instead.\",\n+   \"'result' is already declared in the upper scope on line 39 column 5.\",\n+   \"Unnecessary 'else' after 'return'.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Harshavardhanlav tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","array_equals"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","array_equals"],"duration":10,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'array_equals' has too many lines (26). Maximum allowed is 15.","Identifier 'array_equals' is not in camel case."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'array_equals' has too many lines (26). Maximum allowed is 15.\",\n+   \"Identifier 'array_equals' is not in camel case.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'array_equals' has too many lines (26). Maximum allowed is 15.\",\n+   \"Identifier 'array_equals' is not in camel case.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Harshavardhanlav array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","object_equals"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Harshavardhanlav object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["JS-AOFS","Harshavardhanlav","object_equals"],"duration":5,"failureDetails":[{"matcherResult":{"actual":["Multiple 'use strict' directives.","Expected a function expression.","Function 'object_equals' has too many lines (28). Maximum allowed is 15.","Identifier 'object_equals' is not in camel case.","Identifier 'obj1_keys' is not in camel case.","Identifier 'obj2_keys' is not in camel case.","Identifier 'obj1_keys' is not in camel case.","Identifier 'obj2_keys' is not in camel case.","'key' is never reassigned. Use 'const' instead.","Identifier 'obj1_keys' is not in camel case."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 12\n\n- Array []\n+ Array [\n+   \"Multiple 'use strict' directives.\",\n+   \"Expected a function expression.\",\n+   \"Function 'object_equals' has too many lines (28). Maximum allowed is 15.\",\n+   \"Identifier 'object_equals' is not in camel case.\",\n+   \"Identifier 'obj1_keys' is not in camel case.\",\n+   \"Identifier 'obj2_keys' is not in camel case.\",\n+   \"Identifier 'obj1_keys' is not in camel case.\",\n+   \"Identifier 'obj2_keys' is not in camel case.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"Identifier 'obj1_keys' is not in camel case.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 12\n\n- Array []\n+ Array [\n+   \"Multiple 'use strict' directives.\",\n+   \"Expected a function expression.\",\n+   \"Function 'object_equals' has too many lines (28). Maximum allowed is 15.\",\n+   \"Identifier 'object_equals' is not in camel case.\",\n+   \"Identifier 'obj1_keys' is not in camel case.\",\n+   \"Identifier 'obj2_keys' is not in camel case.\",\n+   \"Identifier 'obj1_keys' is not in camel case.\",\n+   \"Identifier 'obj2_keys' is not in camel case.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"Identifier 'obj1_keys' is not in camel case.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Harshavardhanlav object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","even_odd"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","categorise"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","categorise"],"duration":7,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (16). Maximum allowed is 15."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Function has too many lines (16). Maximum allowed is 15.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Function has too many lines (16). Maximum allowed is 15.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS HemPradeepthummala categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","entries"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","entries"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","entries"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","remove_adjacent_spaces"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","tribonacci"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","tribonacci"],"duration":9,"failureDetails":[{"matcherResult":{"actual":["'FIRST_NUMBER' is already declared in the upper scope on line 24 column 7.","'SECOND_NUMBER' is already declared in the upper scope on line 25 column 7.","'THIRD_NUMBER' is already declared in the upper scope on line 26 column 7."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"'FIRST_NUMBER' is already declared in the upper scope on line 24 column 7.\",\n+   \"'SECOND_NUMBER' is already declared in the upper scope on line 25 column 7.\",\n+   \"'THIRD_NUMBER' is already declared in the upper scope on line 26 column 7.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"'FIRST_NUMBER' is already declared in the upper scope on line 24 column 7.\",\n+   \"'SECOND_NUMBER' is already declared in the upper scope on line 25 column 7.\",\n+   \"'THIRD_NUMBER' is already declared in the upper scope on line 26 column 7.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS HemPradeepthummala tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","array_equals"],"duration":5,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (17). Maximum allowed is 15."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Function has too many lines (17). Maximum allowed is 15.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Function has too many lines (17). Maximum allowed is 15.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS HemPradeepthummala array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["JS-AOFS","HemPradeepthummala","object_equals"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS HemPradeepthummala object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","even_odd"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","categorise"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","entries"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","remove_adjacent_spaces"],"duration":5,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'removeAdjacentSpaces' has too many lines (16). Maximum allowed is 15."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'removeAdjacentSpaces' has too many lines (16). Maximum allowed is 15.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'removeAdjacentSpaces' has too many lines (16). Maximum allowed is 15.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS JAGADEESH2004PJ remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","tribonacci"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","array_equals"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["JS-AOFS","JAGADEESH2004PJ","object_equals"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS JAGADEESH2004PJ object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","even_odd"],"duration":7,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Identifier 'even_odd' is not in camel case.","'result' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Identifier 'even_odd' is not in camel case.\",\n+   \"'result' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Identifier 'even_odd' is not in camel case.\",\n+   \"'result' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS KARTHEEK-TAMADA even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","categorise"],"duration":5,"failureDetails":[{"matcherResult":{"actual":["'categorise' was used before it was defined.","Expected a function expression.","Function 'categorise' has too many lines (21). Maximum allowed is 15.","'NUMBERS' is already declared in the upper scope on line 3 column 7.","'n' is never reassigned. Use 'const' instead.","'temp' is never reassigned. Use 'const' instead.","'result' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 9\n\n- Array []\n+ Array [\n+   \"'categorise' was used before it was defined.\",\n+   \"Expected a function expression.\",\n+   \"Function 'categorise' has too many lines (21). Maximum allowed is 15.\",\n+   \"'NUMBERS' is already declared in the upper scope on line 3 column 7.\",\n+   \"'n' is never reassigned. Use 'const' instead.\",\n+   \"'temp' is never reassigned. Use 'const' instead.\",\n+   \"'result' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 9\n\n- Array []\n+ Array [\n+   \"'categorise' was used before it was defined.\",\n+   \"Expected a function expression.\",\n+   \"Function 'categorise' has too many lines (21). Maximum allowed is 15.\",\n+   \"'NUMBERS' is already declared in the upper scope on line 3 column 7.\",\n+   \"'n' is never reassigned. Use 'const' instead.\",\n+   \"'temp' is never reassigned. Use 'const' instead.\",\n+   \"'result' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS KARTHEEK-TAMADA categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","entries"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","entries"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","'resultantArray' is never reassigned. Use 'const' instead.","'key' is never reassigned. Use 'const' instead.","'tempArray' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"'resultantArray' is never reassigned. Use 'const' instead.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"'tempArray' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"'resultantArray' is never reassigned. Use 'const' instead.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"'tempArray' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS KARTHEEK-TAMADA entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","remove_adjacent_spaces"],"duration":6,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (40). Maximum allowed is 15.","'finalResult' is already declared in the upper scope on line 43 column 9."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Function has too many lines (40). Maximum allowed is 15.\",\n+   \"'finalResult' is already declared in the upper scope on line 43 column 9.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Function has too many lines (40). Maximum allowed is 15.\",\n+   \"'finalResult' is already declared in the upper scope on line 43 column 9.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS KARTHEEK-TAMADA remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","tribonacci"],"duration":8,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (16). Maximum allowed is 15.","'temp' is never reassigned. Use 'const' instead.","'index' is assigned a value but never used."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Function has too many lines (16). Maximum allowed is 15.\",\n+   \"'temp' is never reassigned. Use 'const' instead.\",\n+   \"'index' is assigned a value but never used.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Function has too many lines (16). Maximum allowed is 15.\",\n+   \"'temp' is never reassigned. Use 'const' instead.\",\n+   \"'index' is assigned a value but never used.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS KARTHEEK-TAMADA tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","array_equals"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'areArrayEqual' has too many lines (21). Maximum allowed is 15.","Expected '===' and instead saw '=='.","Expected '===' and instead saw '=='."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'areArrayEqual' has too many lines (21). Maximum allowed is 15.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Expected '===' and instead saw '=='.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'areArrayEqual' has too many lines (21). Maximum allowed is 15.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Expected '===' and instead saw '=='.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS KARTHEEK-TAMADA array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KARTHEEK-TAMADA object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["JS-AOFS","KARTHEEK-TAMADA","object_equals"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'objectEqual' has too many lines (20). Maximum allowed is 15.","'key' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'objectEqual' has too many lines (20). Maximum allowed is 15.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'objectEqual' has too many lines (20). Maximum allowed is 15.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS KARTHEEK-TAMADA object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","even_odd"],"duration":11,"failureDetails":[{"matcherResult":{"actual":["'NUMBERS' is already declared in the upper scope on line 3 column 7."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"'NUMBERS' is already declared in the upper scope on line 3 column 7.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"'NUMBERS' is already declared in the upper scope on line 3 column 7.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS KalluriBhagyasree even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","categorise"],"duration":8,"failureDetails":[{"matcherResult":{"actual":["'arr' is never reassigned. Use 'const' instead.","Function has too many lines (29). Maximum allowed is 15.","'arr' is already declared in the upper scope on line 26 column 5.","'temp' is never reassigned. Use 'const' instead.","'finalArray' is never reassigned. Use 'const' instead.","Unnecessary 'else' after 'return'."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 8\n\n- Array []\n+ Array [\n+   \"'arr' is never reassigned. Use 'const' instead.\",\n+   \"Function has too many lines (29). Maximum allowed is 15.\",\n+   \"'arr' is already declared in the upper scope on line 26 column 5.\",\n+   \"'temp' is never reassigned. Use 'const' instead.\",\n+   \"'finalArray' is never reassigned. Use 'const' instead.\",\n+   \"Unnecessary 'else' after 'return'.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 8\n\n- Array []\n+ Array [\n+   \"'arr' is never reassigned. Use 'const' instead.\",\n+   \"Function has too many lines (29). Maximum allowed is 15.\",\n+   \"'arr' is already declared in the upper scope on line 26 column 5.\",\n+   \"'temp' is never reassigned. Use 'const' instead.\",\n+   \"'finalArray' is never reassigned. Use 'const' instead.\",\n+   \"Unnecessary 'else' after 'return'.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS KalluriBhagyasree categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","entries"],"duration":8,"failureDetails":[{"matcherResult":{"actual":["'OBJECT' is already declared in the upper scope on line 3 column 7.","'finalEntity' is never reassigned. Use 'const' instead.","'objectKeys' is never reassigned. Use 'const' instead.","'key' is never reassigned. Use 'const' instead.","'value' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 7\n\n- Array []\n+ Array [\n+   \"'OBJECT' is already declared in the upper scope on line 3 column 7.\",\n+   \"'finalEntity' is never reassigned. Use 'const' instead.\",\n+   \"'objectKeys' is never reassigned. Use 'const' instead.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"'value' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 7\n\n- Array []\n+ Array [\n+   \"'OBJECT' is already declared in the upper scope on line 3 column 7.\",\n+   \"'finalEntity' is never reassigned. Use 'const' instead.\",\n+   \"'objectKeys' is never reassigned. Use 'const' instead.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"'value' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS KalluriBhagyasree entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","remove_adjacent_spaces"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","remove_adjacent_spaces"],"duration":6,"failureDetails":[{"matcherResult":{"actual":["'text' is never reassigned. Use 'const' instead.","Function has too many lines (17). Maximum allowed is 15.","'text' is already declared in the upper scope on line 31 column 5."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"'text' is never reassigned. Use 'const' instead.\",\n+   \"Function has too many lines (17). Maximum allowed is 15.\",\n+   \"'text' is already declared in the upper scope on line 31 column 5.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"'text' is never reassigned. Use 'const' instead.\",\n+   \"Function has too many lines (17). Maximum allowed is 15.\",\n+   \"'text' is already declared in the upper scope on line 31 column 5.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS KalluriBhagyasree remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","tribonacci"],"duration":9,"failureDetails":[{"matcherResult":{"actual":["'array' is never reassigned. Use 'const' instead.","'ENDING_RANGE' is already declared in the upper scope on line 3 column 7.","'flag' is never reassigned. Use 'const' instead.","Unnecessary 'else' after 'return'."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"'array' is never reassigned. Use 'const' instead.\",\n+   \"'ENDING_RANGE' is already declared in the upper scope on line 3 column 7.\",\n+   \"'flag' is never reassigned. Use 'const' instead.\",\n+   \"Unnecessary 'else' after 'return'.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"'array' is never reassigned. Use 'const' instead.\",\n+   \"'ENDING_RANGE' is already declared in the upper scope on line 3 column 7.\",\n+   \"'flag' is never reassigned. Use 'const' instead.\",\n+   \"Unnecessary 'else' after 'return'.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS KalluriBhagyasree tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","array_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[true],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS KalluriBhagyasree array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","array_equals"],"duration":5,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (29). Maximum allowed is 15.","'ARRAY_1' is already declared in the upper scope on line 3 column 7.","'ARRAY_2' is already declared in the upper scope on line 4 column 7.","'array1' is never reassigned. Use 'const' instead.","'array2' is never reassigned. Use 'const' instead.","Identifier 'length_Array1' is not in camel case.","Identifier 'length_Array2' is not in camel case.","'i' is never reassigned. Use 'const' instead.","Identifier 'length_Array1' is not in camel case.","'i' is never reassigned. Use 'const' instead.","Identifier 'length_Array2' is not in camel case.","Identifier 'length_Array1' is not in camel case.","Identifier 'length_Array2' is not in camel case.","Identifier 'length_Array1' is not in camel case.","Expected '===' and instead saw '=='.","Unexpected use of continue statement.","Unnecessary 'else' after 'return'."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 19\n\n- Array []\n+ Array [\n+   \"Function has too many lines (29). Maximum allowed is 15.\",\n+   \"'ARRAY_1' is already declared in the upper scope on line 3 column 7.\",\n+   \"'ARRAY_2' is already declared in the upper scope on line 4 column 7.\",\n+   \"'array1' is never reassigned. Use 'const' instead.\",\n+   \"'array2' is never reassigned. Use 'const' instead.\",\n+   \"Identifier 'length_Array1' is not in camel case.\",\n+   \"Identifier 'length_Array2' is not in camel case.\",\n+   \"'i' is never reassigned. Use 'const' instead.\",\n+   \"Identifier 'length_Array1' is not in camel case.\",\n+   \"'i' is never reassigned. Use 'const' instead.\",\n+   \"Identifier 'length_Array2' is not in camel case.\",\n+   \"Identifier 'length_Array1' is not in camel case.\",\n+   \"Identifier 'length_Array2' is not in camel case.\",\n+   \"Identifier 'length_Array1' is not in camel case.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Unexpected use of continue statement.\",\n+   \"Unnecessary 'else' after 'return'.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 19\n\n- Array []\n+ Array [\n+   \"Function has too many lines (29). Maximum allowed is 15.\",\n+   \"'ARRAY_1' is already declared in the upper scope on line 3 column 7.\",\n+   \"'ARRAY_2' is already declared in the upper scope on line 4 column 7.\",\n+   \"'array1' is never reassigned. Use 'const' instead.\",\n+   \"'array2' is never reassigned. Use 'const' instead.\",\n+   \"Identifier 'length_Array1' is not in camel case.\",\n+   \"Identifier 'length_Array2' is not in camel case.\",\n+   \"'i' is never reassigned. Use 'const' instead.\",\n+   \"Identifier 'length_Array1' is not in camel case.\",\n+   \"'i' is never reassigned. Use 'const' instead.\",\n+   \"Identifier 'length_Array2' is not in camel case.\",\n+   \"Identifier 'length_Array1' is not in camel case.\",\n+   \"Identifier 'length_Array2' is not in camel case.\",\n+   \"Identifier 'length_Array1' is not in camel case.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Unexpected use of continue statement.\",\n+   \"Unnecessary 'else' after 'return'.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS KalluriBhagyasree array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS KalluriBhagyasree object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["JS-AOFS","KalluriBhagyasree","object_equals"],"duration":8,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (33). Maximum allowed is 15.","'OBJECT_1' is already declared in the upper scope on line 3 column 7.","'OBJECT_2' is already declared in the upper scope on line 4 column 7.","'keys1' is never reassigned. Use 'const' instead.","'keys2' is never reassigned. Use 'const' instead.","'key' is never reassigned. Use 'const' instead.","'key' is never reassigned. Use 'const' instead.","'key' is never reassigned. Use 'const' instead.","'value1' is never reassigned. Use 'const' instead.","'value2' is never reassigned. Use 'const' instead.","Expected '===' and instead saw '=='.","Expected '===' and instead saw '=='.","Unexpected use of continue statement.","Unnecessary 'else' after 'return'."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 16\n\n- Array []\n+ Array [\n+   \"Function has too many lines (33). Maximum allowed is 15.\",\n+   \"'OBJECT_1' is already declared in the upper scope on line 3 column 7.\",\n+   \"'OBJECT_2' is already declared in the upper scope on line 4 column 7.\",\n+   \"'keys1' is never reassigned. Use 'const' instead.\",\n+   \"'keys2' is never reassigned. Use 'const' instead.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"'value1' is never reassigned. Use 'const' instead.\",\n+   \"'value2' is never reassigned. Use 'const' instead.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Unexpected use of continue statement.\",\n+   \"Unnecessary 'else' after 'return'.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 16\n\n- Array []\n+ Array [\n+   \"Function has too many lines (33). Maximum allowed is 15.\",\n+   \"'OBJECT_1' is already declared in the upper scope on line 3 column 7.\",\n+   \"'OBJECT_2' is already declared in the upper scope on line 4 column 7.\",\n+   \"'keys1' is never reassigned. Use 'const' instead.\",\n+   \"'keys2' is never reassigned. Use 'const' instead.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"'value1' is never reassigned. Use 'const' instead.\",\n+   \"'value2' is never reassigned. Use 'const' instead.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Unexpected use of continue statement.\",\n+   \"Unnecessary 'else' after 'return'.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS KalluriBhagyasree object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","even_odd"],"duration":10,"failureDetails":[{"matcherResult":{"actual":["'copyArray' is never reassigned. Use 'const' instead.","'evenArray' is never reassigned. Use 'const' instead.","'oddArray' is never reassigned. Use 'const' instead.","'result' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"'copyArray' is never reassigned. Use 'const' instead.\",\n+   \"'evenArray' is never reassigned. Use 'const' instead.\",\n+   \"'oddArray' is never reassigned. Use 'const' instead.\",\n+   \"'result' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"'copyArray' is never reassigned. Use 'const' instead.\",\n+   \"'evenArray' is never reassigned. Use 'const' instead.\",\n+   \"'oddArray' is never reassigned. Use 'const' instead.\",\n+   \"'result' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Krishnakoushik005 even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","categorise"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","categorise"],"duration":6,"failureDetails":[{"matcherResult":{"actual":["'arry' is defined but never used.","'copyArray' is never reassigned. Use 'const' instead.","'resultArray' is never reassigned. Use 'const' instead.","'subArray' is never reassigned. Use 'const' instead.","Expected '===' and instead saw '=='."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 7\n\n- Array []\n+ Array [\n+   \"'arry' is defined but never used.\",\n+   \"'copyArray' is never reassigned. Use 'const' instead.\",\n+   \"'resultArray' is never reassigned. Use 'const' instead.\",\n+   \"'subArray' is never reassigned. Use 'const' instead.\",\n+   \"Expected '===' and instead saw '=='.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 7\n\n- Array []\n+ Array [\n+   \"'arry' is defined but never used.\",\n+   \"'copyArray' is never reassigned. Use 'const' instead.\",\n+   \"'resultArray' is never reassigned. Use 'const' instead.\",\n+   \"'subArray' is never reassigned. Use 'const' instead.\",\n+   \"Expected '===' and instead saw '=='.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Krishnakoushik005 categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","entries"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","entries"],"duration":5,"failureDetails":[{"matcherResult":{"actual":["'resultArray' is never reassigned. Use 'const' instead.","'key' is never reassigned. Use 'const' instead.","'subArray' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"'resultArray' is never reassigned. Use 'const' instead.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"'subArray' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"'resultArray' is never reassigned. Use 'const' instead.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"'subArray' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Krishnakoushik005 entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","remove_adjacent_spaces"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["Expected '!==' and instead saw '!='.","Expected '===' and instead saw '=='.","Expected '!==' and instead saw '!='."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Expected '!==' and instead saw '!='.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Expected '!==' and instead saw '!='.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Expected '!==' and instead saw '!='.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Expected '!==' and instead saw '!='.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Krishnakoushik005 remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","tribonacci"],"duration":9,"failureDetails":[{"matcherResult":{"actual":["Assignment to function parameter 'third'.","Assignment to function parameter 'first'.","Assignment to function parameter 'second'."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Assignment to function parameter 'third'.\",\n+   \"Assignment to function parameter 'first'.\",\n+   \"Assignment to function parameter 'second'.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Assignment to function parameter 'third'.\",\n+   \"Assignment to function parameter 'first'.\",\n+   \"Assignment to function parameter 'second'.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Krishnakoushik005 tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","array_equals"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (17). Maximum allowed is 15.","'recusionCondition' is never reassigned. Use 'const' instead.","'bool' is never reassigned. Use 'const' instead.","Unexpected use of continue statement."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Function has too many lines (17). Maximum allowed is 15.\",\n+   \"'recusionCondition' is never reassigned. Use 'const' instead.\",\n+   \"'bool' is never reassigned. Use 'const' instead.\",\n+   \"Unexpected use of continue statement.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Function has too many lines (17). Maximum allowed is 15.\",\n+   \"'recusionCondition' is never reassigned. Use 'const' instead.\",\n+   \"'bool' is never reassigned. Use 'const' instead.\",\n+   \"Unexpected use of continue statement.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Krishnakoushik005 array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Krishnakoushik005 object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["JS-AOFS","Krishnakoushik005","object_equals"],"duration":5,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (21). Maximum allowed is 15.","'keys' is never reassigned. Use 'const' instead.","'recusionCondition' is never reassigned. Use 'const' instead.","Expected '!==' and instead saw '!='.","Expected '!==' and instead saw '!='.","'bool' is never reassigned. Use 'const' instead.","Unexpected use of continue statement."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 9\n\n- Array []\n+ Array [\n+   \"Function has too many lines (21). Maximum allowed is 15.\",\n+   \"'keys' is never reassigned. Use 'const' instead.\",\n+   \"'recusionCondition' is never reassigned. Use 'const' instead.\",\n+   \"Expected '!==' and instead saw '!='.\",\n+   \"Expected '!==' and instead saw '!='.\",\n+   \"'bool' is never reassigned. Use 'const' instead.\",\n+   \"Unexpected use of continue statement.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 9\n\n- Array []\n+ Array [\n+   \"Function has too many lines (21). Maximum allowed is 15.\",\n+   \"'keys' is never reassigned. Use 'const' instead.\",\n+   \"'recusionCondition' is never reassigned. Use 'const' instead.\",\n+   \"Expected '!==' and instead saw '!='.\",\n+   \"Expected '!==' and instead saw '!='.\",\n+   \"'bool' is never reassigned. Use 'const' instead.\",\n+   \"Unexpected use of continue statement.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Krishnakoushik005 object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Kshivaji333","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["JS-AOFS","Kshivaji333","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["JS-AOFS","Kshivaji333","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["JS-AOFS","Kshivaji333","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["JS-AOFS","Kshivaji333","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["JS-AOFS","Kshivaji333","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["JS-AOFS","Kshivaji333","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["JS-AOFS","Kshivaji333","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["JS-AOFS","Kshivaji333","even_odd"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Kshivaji333","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["JS-AOFS","Kshivaji333","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["JS-AOFS","Kshivaji333","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["JS-AOFS","Kshivaji333","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["JS-AOFS","Kshivaji333","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["JS-AOFS","Kshivaji333","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["JS-AOFS","Kshivaji333","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["JS-AOFS","Kshivaji333","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["JS-AOFS","Kshivaji333","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["JS-AOFS","Kshivaji333","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["JS-AOFS","Kshivaji333","categorise"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["Arrow function has too many lines (25). Maximum allowed is 15."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (25). Maximum allowed is 15.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (25). Maximum allowed is 15.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Kshivaji333 categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Kshivaji333","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["JS-AOFS","Kshivaji333","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["JS-AOFS","Kshivaji333","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["JS-AOFS","Kshivaji333","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["JS-AOFS","Kshivaji333","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["JS-AOFS","Kshivaji333","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["JS-AOFS","Kshivaji333","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["JS-AOFS","Kshivaji333","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["JS-AOFS","Kshivaji333","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["JS-AOFS","Kshivaji333","entries"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Kshivaji333","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["JS-AOFS","Kshivaji333","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["JS-AOFS","Kshivaji333","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["JS-AOFS","Kshivaji333","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["JS-AOFS","Kshivaji333","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["JS-AOFS","Kshivaji333","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["JS-AOFS","Kshivaji333","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["JS-AOFS","Kshivaji333","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["JS-AOFS","Kshivaji333","remove_adjacent_spaces"],"duration":1,"failureDetails":[{"matcherResult":{"actual":["Leading spaces!!! & Trailing Spaces!!! "],"expected":["Leading spaces!!! & Trailing Spaces!!!"],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   \"Leading spaces!!! & Trailing Spaces!!!\",\n+   \"Leading spaces!!! & Trailing Spaces!!! \",\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   \"Leading spaces!!! & Trailing Spaces!!!\",\n+   \"Leading spaces!!! & Trailing Spaces!!! \",\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Kshivaji333 remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["JS-AOFS","Kshivaji333","remove_adjacent_spaces"],"duration":1,"failureDetails":[{"matcherResult":{"actual":["Trailing Spaces!!! "],"expected":["Trailing Spaces!!!"],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   \"Trailing Spaces!!!\",\n+   \"Trailing Spaces!!! \",\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   \"Trailing Spaces!!!\",\n+   \"Trailing Spaces!!! \",\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Kshivaji333 remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["JS-AOFS","Kshivaji333","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["JS-AOFS","Kshivaji333","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["JS-AOFS","Kshivaji333","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["JS-AOFS","Kshivaji333","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["JS-AOFS","Kshivaji333","remove_adjacent_spaces"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Kshivaji333","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["JS-AOFS","Kshivaji333","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["JS-AOFS","Kshivaji333","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["JS-AOFS","Kshivaji333","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["JS-AOFS","Kshivaji333","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["JS-AOFS","Kshivaji333","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["JS-AOFS","Kshivaji333","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["JS-AOFS","Kshivaji333","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["JS-AOFS","Kshivaji333","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["JS-AOFS","Kshivaji333","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["JS-AOFS","Kshivaji333","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["JS-AOFS","Kshivaji333","tribonacci"],"duration":8,"failureDetails":[{"matcherResult":{"actual":["Assignment to function parameter 'third'.","Assignment to function parameter 'first'.","Assignment to function parameter 'second'."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Assignment to function parameter 'third'.\",\n+   \"Assignment to function parameter 'first'.\",\n+   \"Assignment to function parameter 'second'.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Assignment to function parameter 'third'.\",\n+   \"Assignment to function parameter 'first'.\",\n+   \"Assignment to function parameter 'second'.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Kshivaji333 tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Kshivaji333","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Kshivaji333","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["JS-AOFS","Kshivaji333","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["JS-AOFS","Kshivaji333","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["JS-AOFS","Kshivaji333","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","Kshivaji333","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","Kshivaji333","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Kshivaji333","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["JS-AOFS","Kshivaji333","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","Kshivaji333","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["JS-AOFS","Kshivaji333","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","Kshivaji333","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","Kshivaji333","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","Kshivaji333","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","Kshivaji333","array_equals"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","Kshivaji333","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["JS-AOFS","Kshivaji333","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["JS-AOFS","Kshivaji333","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Kshivaji333","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["JS-AOFS","Kshivaji333","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["JS-AOFS","Kshivaji333","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["JS-AOFS","Kshivaji333","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["JS-AOFS","Kshivaji333","array_equals"],"duration":5,"failureDetails":[{"matcherResult":{"actual":["Arrow function has too many lines (21). Maximum allowed is 15."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (21). Maximum allowed is 15.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (21). Maximum allowed is 15.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Kshivaji333 array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Kshivaji333","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Kshivaji333","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Kshivaji333","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Kshivaji333","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Kshivaji333","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Kshivaji333","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","Kshivaji333","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","Kshivaji333","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","Kshivaji333","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","Kshivaji333","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["JS-AOFS","Kshivaji333","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","Kshivaji333","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","Kshivaji333","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["JS-AOFS","Kshivaji333","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["JS-AOFS","Kshivaji333","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["JS-AOFS","Kshivaji333","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["JS-AOFS","Kshivaji333","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Kshivaji333 object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["JS-AOFS","Kshivaji333","object_equals"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["Arrow function has too many lines (17). Maximum allowed is 15.","Expected { after 'if' condition.","Expected { after 'if' condition.","Expected { after 'if' condition.","Expected { after 'if' condition."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 7\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (17). Maximum allowed is 15.\",\n+   \"Expected { after 'if' condition.\",\n+   \"Expected { after 'if' condition.\",\n+   \"Expected { after 'if' condition.\",\n+   \"Expected { after 'if' condition.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 7\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (17). Maximum allowed is 15.\",\n+   \"Expected { after 'if' condition.\",\n+   \"Expected { after 'if' condition.\",\n+   \"Expected { after 'if' condition.\",\n+   \"Expected { after 'if' condition.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Kshivaji333 object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","even_odd"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","categorise"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","categorise"],"duration":6,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (16). Maximum allowed is 15.","'temp' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Function has too many lines (16). Maximum allowed is 15.\",\n+   \"'temp' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Function has too many lines (16). Maximum allowed is 15.\",\n+   \"'temp' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Nagalakshmivaranasi categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","entries"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","remove_adjacent_spaces"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (16). Maximum allowed is 15."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Function has too many lines (16). Maximum allowed is 15.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Function has too many lines (16). Maximum allowed is 15.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Nagalakshmivaranasi remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","tribonacci"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","array_equals"],"duration":7,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (18). Maximum allowed is 15.","'lengthOfArray' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Function has too many lines (18). Maximum allowed is 15.\",\n+   \"'lengthOfArray' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Function has too many lines (18). Maximum allowed is 15.\",\n+   \"'lengthOfArray' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Nagalakshmivaranasi array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","object_equals"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nagalakshmivaranasi object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["JS-AOFS","Nagalakshmivaranasi","object_equals"],"duration":7,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (17). Maximum allowed is 15."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Function has too many lines (17). Maximum allowed is 15.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Function has too many lines (17). Maximum allowed is 15.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Nagalakshmivaranasi object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Nithin7411","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["JS-AOFS","Nithin7411","even_odd"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["JS-AOFS","Nithin7411","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["JS-AOFS","Nithin7411","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["JS-AOFS","Nithin7411","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["JS-AOFS","Nithin7411","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["JS-AOFS","Nithin7411","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["JS-AOFS","Nithin7411","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["JS-AOFS","Nithin7411","even_odd"],"duration":8,"failureDetails":[{"matcherResult":{"actual":["'even' is never reassigned. Use 'const' instead.","'odd' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"'even' is never reassigned. Use 'const' instead.\",\n+   \"'odd' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"'even' is never reassigned. Use 'const' instead.\",\n+   \"'odd' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Nithin7411 even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Nithin7411","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["JS-AOFS","Nithin7411","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["JS-AOFS","Nithin7411","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["JS-AOFS","Nithin7411","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["JS-AOFS","Nithin7411","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["JS-AOFS","Nithin7411","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["JS-AOFS","Nithin7411","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["JS-AOFS","Nithin7411","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["JS-AOFS","Nithin7411","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["JS-AOFS","Nithin7411","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["JS-AOFS","Nithin7411","categorise"],"duration":5,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (36). Maximum allowed is 15.","'temp' is never reassigned. Use 'const' instead.","'subArray' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Function has too many lines (36). Maximum allowed is 15.\",\n+   \"'temp' is never reassigned. Use 'const' instead.\",\n+   \"'subArray' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Function has too many lines (36). Maximum allowed is 15.\",\n+   \"'temp' is never reassigned. Use 'const' instead.\",\n+   \"'subArray' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Nithin7411 categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Nithin7411","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["JS-AOFS","Nithin7411","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["JS-AOFS","Nithin7411","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["JS-AOFS","Nithin7411","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["JS-AOFS","Nithin7411","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["JS-AOFS","Nithin7411","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["JS-AOFS","Nithin7411","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["JS-AOFS","Nithin7411","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["JS-AOFS","Nithin7411","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["JS-AOFS","Nithin7411","entries"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["'array' is never reassigned. Use 'const' instead.","'key' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"'array' is never reassigned. Use 'const' instead.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"'array' is never reassigned. Use 'const' instead.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Nithin7411 entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Nithin7411","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["JS-AOFS","Nithin7411","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["JS-AOFS","Nithin7411","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["JS-AOFS","Nithin7411","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["JS-AOFS","Nithin7411","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["JS-AOFS","Nithin7411","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["JS-AOFS","Nithin7411","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["JS-AOFS","Nithin7411","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["JS-AOFS","Nithin7411","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["JS-AOFS","Nithin7411","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["JS-AOFS","Nithin7411","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["JS-AOFS","Nithin7411","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["JS-AOFS","Nithin7411","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["JS-AOFS","Nithin7411","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["JS-AOFS","Nithin7411","remove_adjacent_spaces"],"duration":8,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (44). Maximum allowed is 15.","'charCount' is never reassigned. Use 'const' instead.","'cleanedSentence' is never reassigned. Use 'const' instead.","'result' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Function has too many lines (44). Maximum allowed is 15.\",\n+   \"'charCount' is never reassigned. Use 'const' instead.\",\n+   \"'cleanedSentence' is never reassigned. Use 'const' instead.\",\n+   \"'result' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Function has too many lines (44). Maximum allowed is 15.\",\n+   \"'charCount' is never reassigned. Use 'const' instead.\",\n+   \"'cleanedSentence' is never reassigned. Use 'const' instead.\",\n+   \"'result' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Nithin7411 remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Nithin7411","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["JS-AOFS","Nithin7411","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["JS-AOFS","Nithin7411","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["JS-AOFS","Nithin7411","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["JS-AOFS","Nithin7411","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["JS-AOFS","Nithin7411","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["JS-AOFS","Nithin7411","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["JS-AOFS","Nithin7411","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["JS-AOFS","Nithin7411","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["JS-AOFS","Nithin7411","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["JS-AOFS","Nithin7411","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["JS-AOFS","Nithin7411","tribonacci"],"duration":10,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (24). Maximum allowed is 15.","'nextNumber' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Function has too many lines (24). Maximum allowed is 15.\",\n+   \"'nextNumber' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Function has too many lines (24). Maximum allowed is 15.\",\n+   \"'nextNumber' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Nithin7411 tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Nithin7411","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Nithin7411","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["JS-AOFS","Nithin7411","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["JS-AOFS","Nithin7411","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["JS-AOFS","Nithin7411","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","Nithin7411","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","Nithin7411","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Nithin7411","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["JS-AOFS","Nithin7411","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","Nithin7411","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["JS-AOFS","Nithin7411","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","Nithin7411","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","Nithin7411","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","Nithin7411","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","Nithin7411","array_equals"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","Nithin7411","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["JS-AOFS","Nithin7411","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["JS-AOFS","Nithin7411","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Nithin7411","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["JS-AOFS","Nithin7411","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["JS-AOFS","Nithin7411","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["JS-AOFS","Nithin7411","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["JS-AOFS","Nithin7411","array_equals"],"duration":7,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (25). Maximum allowed is 15.","Expected '===' and instead saw '=='.","'subArray1' is never reassigned. Use 'const' instead.","'subArray2' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Function has too many lines (25). Maximum allowed is 15.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"'subArray1' is never reassigned. Use 'const' instead.\",\n+   \"'subArray2' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Function has too many lines (25). Maximum allowed is 15.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"'subArray1' is never reassigned. Use 'const' instead.\",\n+   \"'subArray2' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Nithin7411 array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Nithin7411","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Nithin7411","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Nithin7411","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Nithin7411","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Nithin7411","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Nithin7411","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","Nithin7411","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","Nithin7411","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","Nithin7411","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","Nithin7411","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["JS-AOFS","Nithin7411","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","Nithin7411","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","Nithin7411","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["JS-AOFS","Nithin7411","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["JS-AOFS","Nithin7411","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["JS-AOFS","Nithin7411","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["JS-AOFS","Nithin7411","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Nithin7411 object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["JS-AOFS","Nithin7411","object_equals"],"duration":5,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (34). Maximum allowed is 15.","'keysOfObj1' is never reassigned. Use 'const' instead.","'keysOfObj2' is never reassigned. Use 'const' instead.","'key' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Function has too many lines (34). Maximum allowed is 15.\",\n+   \"'keysOfObj1' is never reassigned. Use 'const' instead.\",\n+   \"'keysOfObj2' is never reassigned. Use 'const' instead.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Function has too many lines (34). Maximum allowed is 15.\",\n+   \"'keysOfObj1' is never reassigned. Use 'const' instead.\",\n+   \"'keysOfObj2' is never reassigned. Use 'const' instead.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Nithin7411 object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","even_odd"],"duration":9,"failureDetails":[{"matcherResult":{"actual":["'NUMBERS' is already declared in the upper scope on line 18 column 7.","'OBJECT' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"'NUMBERS' is already declared in the upper scope on line 18 column 7.\",\n+   \"'OBJECT' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"'NUMBERS' is already declared in the upper scope on line 18 column 7.\",\n+   \"'OBJECT' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Pardhasaradhi031 even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","categorise"],"duration":8,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (28). Maximum allowed is 15.","'temp' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Function has too many lines (28). Maximum allowed is 15.\",\n+   \"'temp' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Function has too many lines (28). Maximum allowed is 15.\",\n+   \"'temp' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Pardhasaradhi031 categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","entries"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","entries"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","entries"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["'OBJECT' is already declared in the upper scope on line 23 column 7.","'subArray' is never reassigned. Use 'const' instead.","'key' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"'OBJECT' is already declared in the upper scope on line 23 column 7.\",\n+   \"'subArray' is never reassigned. Use 'const' instead.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"'OBJECT' is already declared in the upper scope on line 23 column 7.\",\n+   \"'subArray' is never reassigned. Use 'const' instead.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Pardhasaradhi031 entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","remove_adjacent_spaces"],"duration":5,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (24). Maximum allowed is 15.","'currentChar' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Function has too many lines (24). Maximum allowed is 15.\",\n+   \"'currentChar' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Function has too many lines (24). Maximum allowed is 15.\",\n+   \"'currentChar' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Pardhasaradhi031 remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","tribonacci"],"duration":9,"failureDetails":[{"matcherResult":{"actual":["'ENDING_RANGE' is already declared in the upper scope on line 23 column 7."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"'ENDING_RANGE' is already declared in the upper scope on line 23 column 7.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"'ENDING_RANGE' is already declared in the upper scope on line 23 column 7.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Pardhasaradhi031 tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","array_equals"],"duration":5,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (27). Maximum allowed is 15."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Function has too many lines (27). Maximum allowed is 15.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Function has too many lines (27). Maximum allowed is 15.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Pardhasaradhi031 array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","object_equals"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","object_equals"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pardhasaradhi031 object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["JS-AOFS","Pardhasaradhi031","object_equals"],"duration":6,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'isObjectEqual' has too many lines (21). Maximum allowed is 15."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'isObjectEqual' has too many lines (21). Maximum allowed is 15.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'isObjectEqual' has too many lines (21). Maximum allowed is 15.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Pardhasaradhi031 object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","even_odd"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","even_odd"],"duration":10,"failureDetails":[{"matcherResult":{"actual":["'oddEvenObj' is never reassigned. Use 'const' instead.","'index' is never reassigned. Use 'const' instead.","Unexpected use of continue statement.","'oddEvenObject' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"'oddEvenObj' is never reassigned. Use 'const' instead.\",\n+   \"'index' is never reassigned. Use 'const' instead.\",\n+   \"Unexpected use of continue statement.\",\n+   \"'oddEvenObject' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"'oddEvenObj' is never reassigned. Use 'const' instead.\",\n+   \"'index' is never reassigned. Use 'const' instead.\",\n+   \"Unexpected use of continue statement.\",\n+   \"'oddEvenObject' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Pujari-Praveen even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","categorise"],"duration":10,"failureDetails":[{"matcherResult":{"actual":["'numberList' is never reassigned. Use 'const' instead.","'index' is never reassigned. Use 'const' instead.","'temp' is never reassigned. Use 'const' instead.","Function has too many lines (16). Maximum allowed is 15.","'categorisedList' is never reassigned. Use 'const' instead.","'tempList' is never reassigned. Use 'const' instead.","'finalList' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 9\n\n- Array []\n+ Array [\n+   \"'numberList' is never reassigned. Use 'const' instead.\",\n+   \"'index' is never reassigned. Use 'const' instead.\",\n+   \"'temp' is never reassigned. Use 'const' instead.\",\n+   \"Function has too many lines (16). Maximum allowed is 15.\",\n+   \"'categorisedList' is never reassigned. Use 'const' instead.\",\n+   \"'tempList' is never reassigned. Use 'const' instead.\",\n+   \"'finalList' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 9\n\n- Array []\n+ Array [\n+   \"'numberList' is never reassigned. Use 'const' instead.\",\n+   \"'index' is never reassigned. Use 'const' instead.\",\n+   \"'temp' is never reassigned. Use 'const' instead.\",\n+   \"Function has too many lines (16). Maximum allowed is 15.\",\n+   \"'categorisedList' is never reassigned. Use 'const' instead.\",\n+   \"'tempList' is never reassigned. Use 'const' instead.\",\n+   \"'finalList' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Pujari-Praveen categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","entries"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["'finalList' is never reassigned. Use 'const' instead.","'key' is never reassigned. Use 'const' instead.","'tempList' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"'finalList' is never reassigned. Use 'const' instead.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"'tempList' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"'finalList' is never reassigned. Use 'const' instead.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"'tempList' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Pujari-Praveen entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","remove_adjacent_spaces"],"duration":5,"failureDetails":[{"matcherResult":{"actual":["Expected '===' and instead saw '=='.","Expected '!==' and instead saw '!='.","Expected '===' and instead saw '=='.","Expected '!==' and instead saw '!='."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Expected '!==' and instead saw '!='.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Expected '!==' and instead saw '!='.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Expected '!==' and instead saw '!='.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Expected '!==' and instead saw '!='.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Pujari-Praveen remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","tribonacci"],"duration":10,"failureDetails":[{"matcherResult":{"actual":["'finalOne' is never reassigned. Use 'const' instead.","'finalList' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"'finalOne' is never reassigned. Use 'const' instead.\",\n+   \"'finalList' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"'finalOne' is never reassigned. Use 'const' instead.\",\n+   \"'finalList' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Pujari-Praveen tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","array_equals"],"duration":5,"failureDetails":[{"matcherResult":{"actual":["'key' is never reassigned. Use 'const' instead.","'isArrayEqual' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"'isArrayEqual' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"'isArrayEqual' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Pujari-Praveen array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Pujari-Praveen object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["JS-AOFS","Pujari-Praveen","object_equals"],"duration":5,"failureDetails":[{"matcherResult":{"actual":["'key' is never reassigned. Use 'const' instead.","'isObjEqual' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"'isObjEqual' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"'isObjEqual' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Pujari-Praveen object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","even_odd"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","even_odd"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","even_odd"],"duration":10,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS RAKESHGURUGU even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","categorise"],"duration":5,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'sortAndCategorize' has too many lines (26). Maximum allowed is 15.","'temp' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'sortAndCategorize' has too many lines (26). Maximum allowed is 15.\",\n+   \"'temp' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'sortAndCategorize' has too many lines (26). Maximum allowed is 15.\",\n+   \"'temp' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS RAKESHGURUGU categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","entries"],"duration":4,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:28\n        array.push(object[key]);\n                   ^\n\nReferenceError: object is not defined\n    at entries (evalmachine.<anonymous>:28:20)\n    at evalmachine.<anonymous>:33:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)"],"fullName":"JS-AOFS RAKESHGURUGU entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","entries"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:28\n        array.push(object[key]);\n                   ^\n\nReferenceError: object is not defined\n    at entries (evalmachine.<anonymous>:28:20)\n    at evalmachine.<anonymous>:33:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)"],"fullName":"JS-AOFS RAKESHGURUGU entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","entries"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:28\n        array.push(object[key]);\n                   ^\n\nReferenceError: object is not defined\n    at entries (evalmachine.<anonymous>:28:20)\n    at evalmachine.<anonymous>:33:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)"],"fullName":"JS-AOFS RAKESHGURUGU entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","entries"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:28\n        array.push(object[key]);\n                   ^\n\nReferenceError: object is not defined\n    at entries (evalmachine.<anonymous>:28:20)\n    at evalmachine.<anonymous>:33:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)"],"fullName":"JS-AOFS RAKESHGURUGU entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","entries"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:28\n        array.push(object[key]);\n                   ^\n\nReferenceError: object is not defined\n    at entries (evalmachine.<anonymous>:28:20)\n    at evalmachine.<anonymous>:33:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)"],"fullName":"JS-AOFS RAKESHGURUGU entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","entries"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:28\n        array.push(object[key]);\n                   ^\n\nReferenceError: object is not defined\n    at entries (evalmachine.<anonymous>:28:20)\n    at evalmachine.<anonymous>:33:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)"],"fullName":"JS-AOFS RAKESHGURUGU entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","entries"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:28\n        array.push(object[key]);\n                   ^\n\nReferenceError: object is not defined\n    at entries (evalmachine.<anonymous>:28:20)\n    at evalmachine.<anonymous>:33:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)"],"fullName":"JS-AOFS RAKESHGURUGU entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","entries"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:28\n        array.push(object[key]);\n                   ^\n\nReferenceError: object is not defined\n    at entries (evalmachine.<anonymous>:28:20)\n    at evalmachine.<anonymous>:33:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)"],"fullName":"JS-AOFS RAKESHGURUGU entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","entries"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS RAKESHGURUGU entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","remove_adjacent_spaces"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'adjacentSpaces' has too many lines (18). Maximum allowed is 15."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'adjacentSpaces' has too many lines (18). Maximum allowed is 15.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'adjacentSpaces' has too many lines (18). Maximum allowed is 15.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS RAKESHGURUGU remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","tribonacci"],"duration":27,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS RAKESHGURUGU tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","array_equals"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","array_equals"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","array_equals"],"duration":27,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'areArraysEqual' has too many lines (17). Maximum allowed is 15."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'areArraysEqual' has too many lines (17). Maximum allowed is 15.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'areArraysEqual' has too many lines (17). Maximum allowed is 15.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS RAKESHGURUGU array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS RAKESHGURUGU object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["JS-AOFS","RAKESHGURUGU","object_equals"],"duration":5,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'areObjectsEqual' has too many lines (16). Maximum allowed is 15.","'key' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'areObjectsEqual' has too many lines (16). Maximum allowed is 15.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'areObjectsEqual' has too many lines (16). Maximum allowed is 15.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS RAKESHGURUGU object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Rafiya1207","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["JS-AOFS","Rafiya1207","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["JS-AOFS","Rafiya1207","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["JS-AOFS","Rafiya1207","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["JS-AOFS","Rafiya1207","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["JS-AOFS","Rafiya1207","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["JS-AOFS","Rafiya1207","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["JS-AOFS","Rafiya1207","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["JS-AOFS","Rafiya1207","even_odd"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Rafiya1207","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["JS-AOFS","Rafiya1207","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["JS-AOFS","Rafiya1207","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["JS-AOFS","Rafiya1207","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["JS-AOFS","Rafiya1207","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["JS-AOFS","Rafiya1207","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["JS-AOFS","Rafiya1207","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["JS-AOFS","Rafiya1207","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["JS-AOFS","Rafiya1207","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["JS-AOFS","Rafiya1207","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["JS-AOFS","Rafiya1207","categorise"],"duration":6,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (30). Maximum allowed is 15.","'temp' is never reassigned. Use 'const' instead.","Unexpected use of continue statement."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Function has too many lines (30). Maximum allowed is 15.\",\n+   \"'temp' is never reassigned. Use 'const' instead.\",\n+   \"Unexpected use of continue statement.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Function has too many lines (30). Maximum allowed is 15.\",\n+   \"'temp' is never reassigned. Use 'const' instead.\",\n+   \"Unexpected use of continue statement.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Rafiya1207 categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Rafiya1207","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["JS-AOFS","Rafiya1207","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["JS-AOFS","Rafiya1207","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["JS-AOFS","Rafiya1207","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["JS-AOFS","Rafiya1207","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["JS-AOFS","Rafiya1207","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["JS-AOFS","Rafiya1207","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["JS-AOFS","Rafiya1207","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["JS-AOFS","Rafiya1207","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["JS-AOFS","Rafiya1207","entries"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Rafiya1207","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["JS-AOFS","Rafiya1207","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["JS-AOFS","Rafiya1207","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["JS-AOFS","Rafiya1207","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["JS-AOFS","Rafiya1207","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["JS-AOFS","Rafiya1207","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["JS-AOFS","Rafiya1207","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["JS-AOFS","Rafiya1207","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["JS-AOFS","Rafiya1207","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["JS-AOFS","Rafiya1207","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["JS-AOFS","Rafiya1207","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["JS-AOFS","Rafiya1207","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["JS-AOFS","Rafiya1207","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["JS-AOFS","Rafiya1207","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["JS-AOFS","Rafiya1207","remove_adjacent_spaces"],"duration":7,"failureDetails":[{"matcherResult":{"actual":["Unexpected use of continue statement."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Unexpected use of continue statement.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Unexpected use of continue statement.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Rafiya1207 remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Rafiya1207","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["JS-AOFS","Rafiya1207","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["JS-AOFS","Rafiya1207","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["JS-AOFS","Rafiya1207","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["JS-AOFS","Rafiya1207","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["JS-AOFS","Rafiya1207","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["JS-AOFS","Rafiya1207","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["JS-AOFS","Rafiya1207","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["JS-AOFS","Rafiya1207","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["JS-AOFS","Rafiya1207","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["JS-AOFS","Rafiya1207","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["JS-AOFS","Rafiya1207","tribonacci"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (20). Maximum allowed is 15.","'previousNumber1' is never reassigned. Use 'const' instead.","'previousNumber2' is never reassigned. Use 'const' instead.","'previousNumber3' is never reassigned. Use 'const' instead.","'convertedArray' is never reassigned. Use 'const' instead.","'previousNumber1' is already declared in the upper scope on line 25 column 9.","'previousNumber2' is already declared in the upper scope on line 26 column 9.","'previousNumber3' is already declared in the upper scope on line 27 column 9."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 10\n\n- Array []\n+ Array [\n+   \"Function has too many lines (20). Maximum allowed is 15.\",\n+   \"'previousNumber1' is never reassigned. Use 'const' instead.\",\n+   \"'previousNumber2' is never reassigned. Use 'const' instead.\",\n+   \"'previousNumber3' is never reassigned. Use 'const' instead.\",\n+   \"'convertedArray' is never reassigned. Use 'const' instead.\",\n+   \"'previousNumber1' is already declared in the upper scope on line 25 column 9.\",\n+   \"'previousNumber2' is already declared in the upper scope on line 26 column 9.\",\n+   \"'previousNumber3' is already declared in the upper scope on line 27 column 9.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 10\n\n- Array []\n+ Array [\n+   \"Function has too many lines (20). Maximum allowed is 15.\",\n+   \"'previousNumber1' is never reassigned. Use 'const' instead.\",\n+   \"'previousNumber2' is never reassigned. Use 'const' instead.\",\n+   \"'previousNumber3' is never reassigned. Use 'const' instead.\",\n+   \"'convertedArray' is never reassigned. Use 'const' instead.\",\n+   \"'previousNumber1' is already declared in the upper scope on line 25 column 9.\",\n+   \"'previousNumber2' is already declared in the upper scope on line 26 column 9.\",\n+   \"'previousNumber3' is already declared in the upper scope on line 27 column 9.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Rafiya1207 tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Rafiya1207","array_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[false],"expected":[true],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   true,\n+   false,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   true,\n+   false,\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Rafiya1207 array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Rafiya1207","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["JS-AOFS","Rafiya1207","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["JS-AOFS","Rafiya1207","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["JS-AOFS","Rafiya1207","array_equals"],"duration":0,"failureDetails":[{"matcherResult":{"actual":[false],"expected":[true],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   true,\n+   false,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   true,\n+   false,\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Rafiya1207 array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","Rafiya1207","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","Rafiya1207","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Rafiya1207","array_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[false],"expected":[true],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   true,\n+   false,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   true,\n+   false,\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Rafiya1207 array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["JS-AOFS","Rafiya1207","array_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[false],"expected":[true],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   true,\n+   false,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   true,\n+   false,\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Rafiya1207 array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","Rafiya1207","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["JS-AOFS","Rafiya1207","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","Rafiya1207","array_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[false],"expected":[true],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   true,\n+   false,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   true,\n+   false,\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Rafiya1207 array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","Rafiya1207","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","Rafiya1207","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","Rafiya1207","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","Rafiya1207","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["JS-AOFS","Rafiya1207","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["JS-AOFS","Rafiya1207","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Rafiya1207","array_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[false],"expected":[true],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   true,\n+   false,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   true,\n+   false,\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Rafiya1207 array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["JS-AOFS","Rafiya1207","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["JS-AOFS","Rafiya1207","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["JS-AOFS","Rafiya1207","array_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[false],"expected":[true],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   true,\n+   false,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   true,\n+   false,\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Rafiya1207 array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["JS-AOFS","Rafiya1207","array_equals"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (19). Maximum allowed is 15.","Unexpected if as the only statement in an else block.","Blocks are nested too deeply (5). Maximum allowed is 4.","Unexpected use of continue statement."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Function has too many lines (19). Maximum allowed is 15.\",\n+   \"Unexpected if as the only statement in an else block.\",\n+   \"Blocks are nested too deeply (5). Maximum allowed is 4.\",\n+   \"Unexpected use of continue statement.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Function has too many lines (19). Maximum allowed is 15.\",\n+   \"Unexpected if as the only statement in an else block.\",\n+   \"Blocks are nested too deeply (5). Maximum allowed is 4.\",\n+   \"Unexpected use of continue statement.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Rafiya1207 array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Rafiya1207","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Rafiya1207","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Rafiya1207","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Rafiya1207","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Rafiya1207","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Rafiya1207","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","Rafiya1207","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","Rafiya1207","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","Rafiya1207","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","Rafiya1207","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["JS-AOFS","Rafiya1207","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","Rafiya1207","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","Rafiya1207","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["JS-AOFS","Rafiya1207","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["JS-AOFS","Rafiya1207","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["JS-AOFS","Rafiya1207","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["JS-AOFS","Rafiya1207","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rafiya1207 object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["JS-AOFS","Rafiya1207","object_equals"],"duration":13,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (22). Maximum allowed is 15.","'firstObjectKeys' is never reassigned. Use 'const' instead.","'secondObjectKeys' is never reassigned. Use 'const' instead.","'key' is assigned a value but never used.","Expected '===' and instead saw '=='.","Expected '!==' and instead saw '!='.","Unexpected use of continue statement."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 9\n\n- Array []\n+ Array [\n+   \"Function has too many lines (22). Maximum allowed is 15.\",\n+   \"'firstObjectKeys' is never reassigned. Use 'const' instead.\",\n+   \"'secondObjectKeys' is never reassigned. Use 'const' instead.\",\n+   \"'key' is assigned a value but never used.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Expected '!==' and instead saw '!='.\",\n+   \"Unexpected use of continue statement.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 9\n\n- Array []\n+ Array [\n+   \"Function has too many lines (22). Maximum allowed is 15.\",\n+   \"'firstObjectKeys' is never reassigned. Use 'const' instead.\",\n+   \"'secondObjectKeys' is never reassigned. Use 'const' instead.\",\n+   \"'key' is assigned a value but never used.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Expected '!==' and instead saw '!='.\",\n+   \"Unexpected use of continue statement.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Rafiya1207 object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","even_odd"],"duration":3,"failureDetails":[{"matcherResult":{"actual":["'evenArray' is never reassigned. Use 'const' instead.","'oddArray' is never reassigned. Use 'const' instead.","Expected '===' and instead saw '=='."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"'evenArray' is never reassigned. Use 'const' instead.\",\n+   \"'oddArray' is never reassigned. Use 'const' instead.\",\n+   \"Expected '===' and instead saw '=='.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"'evenArray' is never reassigned. Use 'const' instead.\",\n+   \"'oddArray' is never reassigned. Use 'const' instead.\",\n+   \"Expected '===' and instead saw '=='.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Revanth-backbencher even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","categorise"],"duration":5,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","'outerArray' is never reassigned. Use 'const' instead.","Expected a function expression.","Function 'arrays' has too many lines (18). Maximum allowed is 15.","'outerArray' is never reassigned. Use 'const' instead.","Expected '===' and instead saw '=='.","Expected '===' and instead saw '=='."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 9\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"'outerArray' is never reassigned. Use 'const' instead.\",\n+   \"Expected a function expression.\",\n+   \"Function 'arrays' has too many lines (18). Maximum allowed is 15.\",\n+   \"'outerArray' is never reassigned. Use 'const' instead.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Expected '===' and instead saw '=='.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 9\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"'outerArray' is never reassigned. Use 'const' instead.\",\n+   \"Expected a function expression.\",\n+   \"Function 'arrays' has too many lines (18). Maximum allowed is 15.\",\n+   \"'outerArray' is never reassigned. Use 'const' instead.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Expected '===' and instead saw '=='.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Revanth-backbencher categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","entries"],"duration":3,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","'printArray' is never reassigned. Use 'const' instead.","'key' is never reassigned. Use 'const' instead.","'array' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"'printArray' is never reassigned. Use 'const' instead.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"'array' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"'printArray' is never reassigned. Use 'const' instead.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"'array' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Revanth-backbencher entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","remove_adjacent_spaces"],"duration":10,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'Remove_space' has too many lines (23). Maximum allowed is 15.","Identifier 'Remove_space' is not in camel case.","'finalText' is never reassigned. Use 'const' instead.","'joinText' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 7\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'Remove_space' has too many lines (23). Maximum allowed is 15.\",\n+   \"Identifier 'Remove_space' is not in camel case.\",\n+   \"'finalText' is never reassigned. Use 'const' instead.\",\n+   \"'joinText' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 7\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'Remove_space' has too many lines (23). Maximum allowed is 15.\",\n+   \"Identifier 'Remove_space' is not in camel case.\",\n+   \"'finalText' is never reassigned. Use 'const' instead.\",\n+   \"'joinText' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Revanth-backbencher remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","tribonacci"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","tribonacci"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["'array' is never reassigned. Use 'const' instead.","Expected a function expression.","'Sum' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"'array' is never reassigned. Use 'const' instead.\",\n+   \"Expected a function expression.\",\n+   \"'Sum' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"'array' is never reassigned. Use 'const' instead.\",\n+   \"Expected a function expression.\",\n+   \"'Sum' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Revanth-backbencher tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","array_equals"],"duration":5,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'booleanArray' has too many lines (21). Maximum allowed is 15.","Expected '===' and instead saw '=='.","Expected '===' and instead saw '=='."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'booleanArray' has too many lines (21). Maximum allowed is 15.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Expected '===' and instead saw '=='.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'booleanArray' has too many lines (21). Maximum allowed is 15.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Expected '===' and instead saw '=='.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Revanth-backbencher array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Revanth-backbencher object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["JS-AOFS","Revanth-backbencher","object_equals"],"duration":9,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'BooleanObject' has too many lines (33). Maximum allowed is 15.","Expected '===' and instead saw '=='.","Expected '===' and instead saw '=='.","Expected '===' and instead saw '=='.","'bool' is never reassigned. Use 'const' instead.","Blocks are nested too deeply (5). Maximum allowed is 4.","Expected '===' and instead saw '=='."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 10\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'BooleanObject' has too many lines (33). Maximum allowed is 15.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"'bool' is never reassigned. Use 'const' instead.\",\n+   \"Blocks are nested too deeply (5). Maximum allowed is 4.\",\n+   \"Expected '===' and instead saw '=='.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 10\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'BooleanObject' has too many lines (33). Maximum allowed is 15.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"'bool' is never reassigned. Use 'const' instead.\",\n+   \"Blocks are nested too deeply (5). Maximum allowed is 4.\",\n+   \"Expected '===' and instead saw '=='.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Revanth-backbencher object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Rohith-216","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["JS-AOFS","Rohith-216","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["JS-AOFS","Rohith-216","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["JS-AOFS","Rohith-216","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["JS-AOFS","Rohith-216","even_odd"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["JS-AOFS","Rohith-216","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["JS-AOFS","Rohith-216","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["JS-AOFS","Rohith-216","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["JS-AOFS","Rohith-216","even_odd"],"duration":6,"failureDetails":[{"matcherResult":{"actual":["'numbers' is never reassigned. Use 'const' instead.","Expected a function expression.","'numbers' is already declared in the upper scope on line 19 column 5.","'even' is never reassigned. Use 'const' instead.","'odd' is never reassigned. Use 'const' instead.","'result' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 8\n\n- Array []\n+ Array [\n+   \"'numbers' is never reassigned. Use 'const' instead.\",\n+   \"Expected a function expression.\",\n+   \"'numbers' is already declared in the upper scope on line 19 column 5.\",\n+   \"'even' is never reassigned. Use 'const' instead.\",\n+   \"'odd' is never reassigned. Use 'const' instead.\",\n+   \"'result' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 8\n\n- Array []\n+ Array [\n+   \"'numbers' is never reassigned. Use 'const' instead.\",\n+   \"Expected a function expression.\",\n+   \"'numbers' is already declared in the upper scope on line 19 column 5.\",\n+   \"'even' is never reassigned. Use 'const' instead.\",\n+   \"'odd' is never reassigned. Use 'const' instead.\",\n+   \"'result' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Rohith-216 even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Rohith-216","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["JS-AOFS","Rohith-216","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["JS-AOFS","Rohith-216","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["JS-AOFS","Rohith-216","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["JS-AOFS","Rohith-216","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["JS-AOFS","Rohith-216","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["JS-AOFS","Rohith-216","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["JS-AOFS","Rohith-216","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["JS-AOFS","Rohith-216","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["JS-AOFS","Rohith-216","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["JS-AOFS","Rohith-216","categorise"],"duration":5,"failureDetails":[{"matcherResult":{"actual":["'duplicate' is never reassigned. Use 'const' instead.","'sort' is never reassigned. Use 'const' instead.","Function has too many lines (23). Maximum allowed is 15.","'duplicate' is already declared in the upper scope on line 26 column 5.","'temporary' is never reassigned. Use 'const' instead.","'outerArray' is never reassigned. Use 'const' instead.","'result' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 9\n\n- Array []\n+ Array [\n+   \"'duplicate' is never reassigned. Use 'const' instead.\",\n+   \"'sort' is never reassigned. Use 'const' instead.\",\n+   \"Function has too many lines (23). Maximum allowed is 15.\",\n+   \"'duplicate' is already declared in the upper scope on line 26 column 5.\",\n+   \"'temporary' is never reassigned. Use 'const' instead.\",\n+   \"'outerArray' is never reassigned. Use 'const' instead.\",\n+   \"'result' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 9\n\n- Array []\n+ Array [\n+   \"'duplicate' is never reassigned. Use 'const' instead.\",\n+   \"'sort' is never reassigned. Use 'const' instead.\",\n+   \"Function has too many lines (23). Maximum allowed is 15.\",\n+   \"'duplicate' is already declared in the upper scope on line 26 column 5.\",\n+   \"'temporary' is never reassigned. Use 'const' instead.\",\n+   \"'outerArray' is never reassigned. Use 'const' instead.\",\n+   \"'result' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Rohith-216 categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Rohith-216","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["JS-AOFS","Rohith-216","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["JS-AOFS","Rohith-216","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["JS-AOFS","Rohith-216","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["JS-AOFS","Rohith-216","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["JS-AOFS","Rohith-216","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["JS-AOFS","Rohith-216","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["JS-AOFS","Rohith-216","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["JS-AOFS","Rohith-216","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["JS-AOFS","Rohith-216","entries"],"duration":3,"failureDetails":[{"matcherResult":{"actual":["'duplicate' is never reassigned. Use 'const' instead.","'data' is never reassigned. Use 'const' instead.","'duplicate' is already declared in the upper scope on line 23 column 5.","'result' is never reassigned. Use 'const' instead.","'key' is never reassigned. Use 'const' instead.","'entries' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 8\n\n- Array []\n+ Array [\n+   \"'duplicate' is never reassigned. Use 'const' instead.\",\n+   \"'data' is never reassigned. Use 'const' instead.\",\n+   \"'duplicate' is already declared in the upper scope on line 23 column 5.\",\n+   \"'result' is never reassigned. Use 'const' instead.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"'entries' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 8\n\n- Array []\n+ Array [\n+   \"'duplicate' is never reassigned. Use 'const' instead.\",\n+   \"'data' is never reassigned. Use 'const' instead.\",\n+   \"'duplicate' is already declared in the upper scope on line 23 column 5.\",\n+   \"'result' is never reassigned. Use 'const' instead.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"'entries' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Rohith-216 entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Rohith-216","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["JS-AOFS","Rohith-216","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["JS-AOFS","Rohith-216","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["JS-AOFS","Rohith-216","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["JS-AOFS","Rohith-216","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["JS-AOFS","Rohith-216","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["JS-AOFS","Rohith-216","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["JS-AOFS","Rohith-216","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["JS-AOFS","Rohith-216","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["JS-AOFS","Rohith-216","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["JS-AOFS","Rohith-216","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["JS-AOFS","Rohith-216","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["JS-AOFS","Rohith-216","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["JS-AOFS","Rohith-216","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["JS-AOFS","Rohith-216","remove_adjacent_spaces"],"duration":9,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'removeSpace' has too many lines (24). Maximum allowed is 15.","Unexpected use of continue statement.","'finalVaule' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'removeSpace' has too many lines (24). Maximum allowed is 15.\",\n+   \"Unexpected use of continue statement.\",\n+   \"'finalVaule' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'removeSpace' has too many lines (24). Maximum allowed is 15.\",\n+   \"Unexpected use of continue statement.\",\n+   \"'finalVaule' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Rohith-216 remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Rohith-216","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["JS-AOFS","Rohith-216","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["JS-AOFS","Rohith-216","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["JS-AOFS","Rohith-216","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["JS-AOFS","Rohith-216","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["JS-AOFS","Rohith-216","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["JS-AOFS","Rohith-216","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["JS-AOFS","Rohith-216","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["JS-AOFS","Rohith-216","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["JS-AOFS","Rohith-216","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["JS-AOFS","Rohith-216","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["JS-AOFS","Rohith-216","tribonacci"],"duration":8,"failureDetails":[{"matcherResult":{"actual":["'number' is never reassigned. Use 'const' instead.","Expected a function expression.","Function 'tribonacci' has too many lines (25). Maximum allowed is 15.","'number' is already declared in the upper scope on line 23 column 5.","'firstNumber' is assigned a value but never used.","'firstNumber' is never reassigned. Use 'const' instead.","'secondNumber' is assigned a value but never used.","'secondNumber' is never reassigned. Use 'const' instead.","'thirdNumber' is assigned a value but never used.","'thirdNumber' is never reassigned. Use 'const' instead.","'fourthNumber' is defined but never used.","'result' is never reassigned. Use 'const' instead.","Expected a function expression.","'firstNumber' is already declared in the upper scope on line 26 column 7.","'secondNumber' is already declared in the upper scope on line 27 column 7.","'thirdNumber' is already declared in the upper scope on line 28 column 7.","'fourthNumber' is already declared in the upper scope on line 29 column 7.","Assignment to function parameter 'firstNumber'.","Assignment to function parameter 'secondNumber'.","Assignment to function parameter 'thirdNumber'.","Assignment to function parameter 'fourthNumber'.","Unnecessary 'else' after 'return'.","'sum' is never reassigned. Use 'const' instead.","'finalResult' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 26\n\n- Array []\n+ Array [\n+   \"'number' is never reassigned. Use 'const' instead.\",\n+   \"Expected a function expression.\",\n+   \"Function 'tribonacci' has too many lines (25). Maximum allowed is 15.\",\n+   \"'number' is already declared in the upper scope on line 23 column 5.\",\n+   \"'firstNumber' is assigned a value but never used.\",\n+   \"'firstNumber' is never reassigned. Use 'const' instead.\",\n+   \"'secondNumber' is assigned a value but never used.\",\n+   \"'secondNumber' is never reassigned. Use 'const' instead.\",\n+   \"'thirdNumber' is assigned a value but never used.\",\n+   \"'thirdNumber' is never reassigned. Use 'const' instead.\",\n+   \"'fourthNumber' is defined but never used.\",\n+   \"'result' is never reassigned. Use 'const' instead.\",\n+   \"Expected a function expression.\",\n+   \"'firstNumber' is already declared in the upper scope on line 26 column 7.\",\n+   \"'secondNumber' is already declared in the upper scope on line 27 column 7.\",\n+   \"'thirdNumber' is already declared in the upper scope on line 28 column 7.\",\n+   \"'fourthNumber' is already declared in the upper scope on line 29 column 7.\",\n+   \"Assignment to function parameter 'firstNumber'.\",\n+   \"Assignment to function parameter 'secondNumber'.\",\n+   \"Assignment to function parameter 'thirdNumber'.\",\n+   \"Assignment to function parameter 'fourthNumber'.\",\n+   \"Unnecessary 'else' after 'return'.\",\n+   \"'sum' is never reassigned. Use 'const' instead.\",\n+   \"'finalResult' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 26\n\n- Array []\n+ Array [\n+   \"'number' is never reassigned. Use 'const' instead.\",\n+   \"Expected a function expression.\",\n+   \"Function 'tribonacci' has too many lines (25). Maximum allowed is 15.\",\n+   \"'number' is already declared in the upper scope on line 23 column 5.\",\n+   \"'firstNumber' is assigned a value but never used.\",\n+   \"'firstNumber' is never reassigned. Use 'const' instead.\",\n+   \"'secondNumber' is assigned a value but never used.\",\n+   \"'secondNumber' is never reassigned. Use 'const' instead.\",\n+   \"'thirdNumber' is assigned a value but never used.\",\n+   \"'thirdNumber' is never reassigned. Use 'const' instead.\",\n+   \"'fourthNumber' is defined but never used.\",\n+   \"'result' is never reassigned. Use 'const' instead.\",\n+   \"Expected a function expression.\",\n+   \"'firstNumber' is already declared in the upper scope on line 26 column 7.\",\n+   \"'secondNumber' is already declared in the upper scope on line 27 column 7.\",\n+   \"'thirdNumber' is already declared in the upper scope on line 28 column 7.\",\n+   \"'fourthNumber' is already declared in the upper scope on line 29 column 7.\",\n+   \"Assignment to function parameter 'firstNumber'.\",\n+   \"Assignment to function parameter 'secondNumber'.\",\n+   \"Assignment to function parameter 'thirdNumber'.\",\n+   \"Assignment to function parameter 'fourthNumber'.\",\n+   \"Unnecessary 'else' after 'return'.\",\n+   \"'sum' is never reassigned. Use 'const' instead.\",\n+   \"'finalResult' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Rohith-216 tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Rohith-216","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Rohith-216","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["JS-AOFS","Rohith-216","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["JS-AOFS","Rohith-216","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["JS-AOFS","Rohith-216","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","Rohith-216","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","Rohith-216","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Rohith-216","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["JS-AOFS","Rohith-216","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","Rohith-216","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["JS-AOFS","Rohith-216","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","Rohith-216","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","Rohith-216","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","Rohith-216","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","Rohith-216","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","Rohith-216","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["JS-AOFS","Rohith-216","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["JS-AOFS","Rohith-216","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Rohith-216","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["JS-AOFS","Rohith-216","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["JS-AOFS","Rohith-216","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["JS-AOFS","Rohith-216","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["JS-AOFS","Rohith-216","array_equals"],"duration":5,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'equalArray' has too many lines (23). Maximum allowed is 15.","Expected '===' and instead saw '=='.","Expected '===' and instead saw '=='.","Expected '===' and instead saw '=='.","Invalid typeof comparison value.","Expected '!==' and instead saw '!='.","Unnecessary 'else' after 'return'.","'result' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 11\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'equalArray' has too many lines (23). Maximum allowed is 15.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Invalid typeof comparison value.\",\n+   \"Expected '!==' and instead saw '!='.\",\n+   \"Unnecessary 'else' after 'return'.\",\n+   \"'result' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 11\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'equalArray' has too many lines (23). Maximum allowed is 15.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Invalid typeof comparison value.\",\n+   \"Expected '!==' and instead saw '!='.\",\n+   \"Unnecessary 'else' after 'return'.\",\n+   \"'result' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Rohith-216 array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Rohith-216","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Rohith-216","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Rohith-216","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Rohith-216","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Rohith-216","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Rohith-216","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","Rohith-216","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","Rohith-216","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","Rohith-216","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","Rohith-216","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["JS-AOFS","Rohith-216","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","Rohith-216","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","Rohith-216","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["JS-AOFS","Rohith-216","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["JS-AOFS","Rohith-216","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["JS-AOFS","Rohith-216","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["JS-AOFS","Rohith-216","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Rohith-216 object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["JS-AOFS","Rohith-216","object_equals"],"duration":11,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'objectEquals' has too many lines (18). Maximum allowed is 15.","'index' is never reassigned. Use 'const' instead.","'result' is never reassigned. Use 'const' instead.","'finalVaule' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 7\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'objectEquals' has too many lines (18). Maximum allowed is 15.\",\n+   \"'index' is never reassigned. Use 'const' instead.\",\n+   \"'result' is never reassigned. Use 'const' instead.\",\n+   \"'finalVaule' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 7\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'objectEquals' has too many lines (18). Maximum allowed is 15.\",\n+   \"'index' is never reassigned. Use 'const' instead.\",\n+   \"'result' is never reassigned. Use 'const' instead.\",\n+   \"'finalVaule' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Rohith-216 object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","SACHITH31","even_odd"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["JS-AOFS","SACHITH31","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["JS-AOFS","SACHITH31","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["JS-AOFS","SACHITH31","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["JS-AOFS","SACHITH31","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["JS-AOFS","SACHITH31","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["JS-AOFS","SACHITH31","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["JS-AOFS","SACHITH31","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["JS-AOFS","SACHITH31","even_odd"],"duration":5,"failureDetails":[{"matcherResult":{"actual":["'separateEvenOdd' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"'separateEvenOdd' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"'separateEvenOdd' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS SACHITH31 even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","SACHITH31","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["JS-AOFS","SACHITH31","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["JS-AOFS","SACHITH31","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["JS-AOFS","SACHITH31","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["JS-AOFS","SACHITH31","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["JS-AOFS","SACHITH31","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["JS-AOFS","SACHITH31","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["JS-AOFS","SACHITH31","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["JS-AOFS","SACHITH31","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["JS-AOFS","SACHITH31","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["JS-AOFS","SACHITH31","categorise"],"duration":6,"failureDetails":[{"matcherResult":{"actual":["'myArray' is never reassigned. Use 'const' instead.","Expected a function expression.","Function 'bubbleSort' has too many lines (24). Maximum allowed is 15.","'n' is never reassigned. Use 'const' instead.","'temp' is never reassigned. Use 'const' instead.","'subresult' is never reassigned. Use 'const' instead.","'anotherArray' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 9\n\n- Array []\n+ Array [\n+   \"'myArray' is never reassigned. Use 'const' instead.\",\n+   \"Expected a function expression.\",\n+   \"Function 'bubbleSort' has too many lines (24). Maximum allowed is 15.\",\n+   \"'n' is never reassigned. Use 'const' instead.\",\n+   \"'temp' is never reassigned. Use 'const' instead.\",\n+   \"'subresult' is never reassigned. Use 'const' instead.\",\n+   \"'anotherArray' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 9\n\n- Array []\n+ Array [\n+   \"'myArray' is never reassigned. Use 'const' instead.\",\n+   \"Expected a function expression.\",\n+   \"Function 'bubbleSort' has too many lines (24). Maximum allowed is 15.\",\n+   \"'n' is never reassigned. Use 'const' instead.\",\n+   \"'temp' is never reassigned. Use 'const' instead.\",\n+   \"'subresult' is never reassigned. Use 'const' instead.\",\n+   \"'anotherArray' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS SACHITH31 categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","SACHITH31","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["JS-AOFS","SACHITH31","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["JS-AOFS","SACHITH31","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["JS-AOFS","SACHITH31","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["JS-AOFS","SACHITH31","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["JS-AOFS","SACHITH31","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["JS-AOFS","SACHITH31","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["JS-AOFS","SACHITH31","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["JS-AOFS","SACHITH31","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["JS-AOFS","SACHITH31","entries"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["'result' is never reassigned. Use 'const' instead.","'key' is never reassigned. Use 'const' instead.","'subresult' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"'result' is never reassigned. Use 'const' instead.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"'subresult' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"'result' is never reassigned. Use 'const' instead.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"'subresult' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS SACHITH31 entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","SACHITH31","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["JS-AOFS","SACHITH31","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["JS-AOFS","SACHITH31","remove_adjacent_spaces"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[" "],"expected":[""],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   \"\",\n+   \" \",\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   \"\",\n+   \" \",\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS SACHITH31 remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["JS-AOFS","SACHITH31","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["JS-AOFS","SACHITH31","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["JS-AOFS","SACHITH31","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["JS-AOFS","SACHITH31","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["JS-AOFS","SACHITH31","remove_adjacent_spaces"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[" Leading spaces!!!"],"expected":["Leading spaces!!!"],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   \"Leading spaces!!!\",\n+   \" Leading spaces!!!\",\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   \"Leading spaces!!!\",\n+   \" Leading spaces!!!\",\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS SACHITH31 remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["JS-AOFS","SACHITH31","remove_adjacent_spaces"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[" Leading spaces!!! & Trailing Spaces!!! "],"expected":["Leading spaces!!! & Trailing Spaces!!!"],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   \"Leading spaces!!! & Trailing Spaces!!!\",\n+   \" Leading spaces!!! & Trailing Spaces!!! \",\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   \"Leading spaces!!! & Trailing Spaces!!!\",\n+   \" Leading spaces!!! & Trailing Spaces!!! \",\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS SACHITH31 remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["JS-AOFS","SACHITH31","remove_adjacent_spaces"],"duration":1,"failureDetails":[{"matcherResult":{"actual":["Trailing Spaces!!! "],"expected":["Trailing Spaces!!!"],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   \"Trailing Spaces!!!\",\n+   \"Trailing Spaces!!! \",\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   \"Trailing Spaces!!!\",\n+   \"Trailing Spaces!!! \",\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS SACHITH31 remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["JS-AOFS","SACHITH31","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["JS-AOFS","SACHITH31","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["JS-AOFS","SACHITH31","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["JS-AOFS","SACHITH31","remove_adjacent_spaces"],"duration":2,"failureDetails":[{"matcherResult":{"actual":[" こんにちは 世界 "],"expected":["こんにちは 世界"],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   \"こんにちは 世界\",\n+   \" こんにちは 世界 \",\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   \"こんにちは 世界\",\n+   \" こんにちは 世界 \",\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS SACHITH31 remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["JS-AOFS","SACHITH31","remove_adjacent_spaces"],"duration":9,"failureDetails":[{"matcherResult":{"actual":["'removeAdjacentSpaces' is never reassigned. Use 'const' instead.","'char' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"'removeAdjacentSpaces' is never reassigned. Use 'const' instead.\",\n+   \"'char' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"'removeAdjacentSpaces' is never reassigned. Use 'const' instead.\",\n+   \"'char' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS SACHITH31 remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","SACHITH31","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["JS-AOFS","SACHITH31","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["JS-AOFS","SACHITH31","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["JS-AOFS","SACHITH31","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["JS-AOFS","SACHITH31","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["JS-AOFS","SACHITH31","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["JS-AOFS","SACHITH31","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["JS-AOFS","SACHITH31","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["JS-AOFS","SACHITH31","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["JS-AOFS","SACHITH31","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["JS-AOFS","SACHITH31","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["JS-AOFS","SACHITH31","tribonacci"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","'ENDING_RANGE' is already declared in the upper scope on line 3 column 7.","Unnecessary 'else' after 'return'.","'nextNumber' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"'ENDING_RANGE' is already declared in the upper scope on line 3 column 7.\",\n+   \"Unnecessary 'else' after 'return'.\",\n+   \"'nextNumber' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"'ENDING_RANGE' is already declared in the upper scope on line 3 column 7.\",\n+   \"Unnecessary 'else' after 'return'.\",\n+   \"'nextNumber' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS SACHITH31 tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","SACHITH31","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","SACHITH31","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["JS-AOFS","SACHITH31","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["JS-AOFS","SACHITH31","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["JS-AOFS","SACHITH31","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","SACHITH31","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","SACHITH31","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","SACHITH31","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["JS-AOFS","SACHITH31","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","SACHITH31","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["JS-AOFS","SACHITH31","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","SACHITH31","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","SACHITH31","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","SACHITH31","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","SACHITH31","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","SACHITH31","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["JS-AOFS","SACHITH31","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["JS-AOFS","SACHITH31","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","SACHITH31","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["JS-AOFS","SACHITH31","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["JS-AOFS","SACHITH31","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["JS-AOFS","SACHITH31","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["JS-AOFS","SACHITH31","array_equals"],"duration":5,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (25). Maximum allowed is 15.","Identifier 'array_length1' is not in camel case.","'array_length1' is never reassigned. Use 'const' instead.","Identifier 'array_length2' is not in camel case.","'array_length2' is never reassigned. Use 'const' instead.","Identifier 'array_length1' is not in camel case.","Identifier 'array_length2' is not in camel case.","Identifier 'array_length1' is not in camel case."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 10\n\n- Array []\n+ Array [\n+   \"Function has too many lines (25). Maximum allowed is 15.\",\n+   \"Identifier 'array_length1' is not in camel case.\",\n+   \"'array_length1' is never reassigned. Use 'const' instead.\",\n+   \"Identifier 'array_length2' is not in camel case.\",\n+   \"'array_length2' is never reassigned. Use 'const' instead.\",\n+   \"Identifier 'array_length1' is not in camel case.\",\n+   \"Identifier 'array_length2' is not in camel case.\",\n+   \"Identifier 'array_length1' is not in camel case.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 10\n\n- Array []\n+ Array [\n+   \"Function has too many lines (25). Maximum allowed is 15.\",\n+   \"Identifier 'array_length1' is not in camel case.\",\n+   \"'array_length1' is never reassigned. Use 'const' instead.\",\n+   \"Identifier 'array_length2' is not in camel case.\",\n+   \"'array_length2' is never reassigned. Use 'const' instead.\",\n+   \"Identifier 'array_length1' is not in camel case.\",\n+   \"Identifier 'array_length2' is not in camel case.\",\n+   \"Identifier 'array_length1' is not in camel case.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS SACHITH31 array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","SACHITH31","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","SACHITH31","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","SACHITH31","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","SACHITH31","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","SACHITH31","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","SACHITH31","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","SACHITH31","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","SACHITH31","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","SACHITH31","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","SACHITH31","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["JS-AOFS","SACHITH31","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","SACHITH31","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","SACHITH31","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["JS-AOFS","SACHITH31","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["JS-AOFS","SACHITH31","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["JS-AOFS","SACHITH31","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["JS-AOFS","SACHITH31","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SACHITH31 object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["JS-AOFS","SACHITH31","object_equals"],"duration":11,"failureDetails":[{"matcherResult":{"actual":["'myobj' is never reassigned. Use 'const' instead.","Function has too many lines (27). Maximum allowed is 15."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"'myobj' is never reassigned. Use 'const' instead.\",\n+   \"Function has too many lines (27). Maximum allowed is 15.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"'myobj' is never reassigned. Use 'const' instead.\",\n+   \"Function has too many lines (27). Maximum allowed is 15.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS SACHITH31 object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","even_odd"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","even_odd"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","categorise"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","entries"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","remove_adjacent_spaces"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","tribonacci"],"duration":6,"failureDetails":[{"matcherResult":{"actual":["'firstNumber' is never reassigned. Use 'const' instead.","'secondNumber' is never reassigned. Use 'const' instead.","'thirdNumber' is never reassigned. Use 'const' instead.","Assignment to function parameter 'firstNum'.","Assignment to function parameter 'secondNum'.","Assignment to function parameter 'thirdNum'."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 8\n\n- Array []\n+ Array [\n+   \"'firstNumber' is never reassigned. Use 'const' instead.\",\n+   \"'secondNumber' is never reassigned. Use 'const' instead.\",\n+   \"'thirdNumber' is never reassigned. Use 'const' instead.\",\n+   \"Assignment to function parameter 'firstNum'.\",\n+   \"Assignment to function parameter 'secondNum'.\",\n+   \"Assignment to function parameter 'thirdNum'.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 8\n\n- Array []\n+ Array [\n+   \"'firstNumber' is never reassigned. Use 'const' instead.\",\n+   \"'secondNumber' is never reassigned. Use 'const' instead.\",\n+   \"'thirdNumber' is never reassigned. Use 'const' instead.\",\n+   \"Assignment to function parameter 'firstNum'.\",\n+   \"Assignment to function parameter 'secondNum'.\",\n+   \"Assignment to function parameter 'thirdNum'.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS SaiLokeshGoud tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","array_equals"],"duration":5,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'arraysAreEqualOrNot' has too many lines (22). Maximum allowed is 15."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'arraysAreEqualOrNot' has too many lines (22). Maximum allowed is 15.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'arraysAreEqualOrNot' has too many lines (22). Maximum allowed is 15.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS SaiLokeshGoud array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SaiLokeshGoud object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["JS-AOFS","SaiLokeshGoud","object_equals"],"duration":10,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'compareValuesOfObjects' has too many lines (23). Maximum allowed is 15.","'key' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'compareValuesOfObjects' has too many lines (23). Maximum allowed is 15.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'compareValuesOfObjects' has too many lines (23). Maximum allowed is 15.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS SaiLokeshGoud object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","even_odd"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","even_odd"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","categorise"],"duration":6,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (21). Maximum allowed is 15."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Function has too many lines (21). Maximum allowed is 15.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Function has too many lines (21). Maximum allowed is 15.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Saicharanteja-844 categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","entries"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","remove_adjacent_spaces"],"duration":9,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (40). Maximum allowed is 15."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Function has too many lines (40). Maximum allowed is 15.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Function has too many lines (40). Maximum allowed is 15.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Saicharanteja-844 remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","tribonacci"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","array_equals"],"duration":5,"failureDetails":[{"matcherResult":{"actual":["Arrow function has too many lines (35). Maximum allowed is 15."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (35). Maximum allowed is 15.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (35). Maximum allowed is 15.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Saicharanteja-844 array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Saicharanteja-844 object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["JS-AOFS","Saicharanteja-844","object_equals"],"duration":10,"failureDetails":[{"matcherResult":{"actual":["Arrow function has too many lines (23). Maximum allowed is 15."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (23). Maximum allowed is 15.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (23). Maximum allowed is 15.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Saicharanteja-844 object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","even_odd"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","categorise"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["Arrow function has too many lines (18). Maximum allowed is 15."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (18). Maximum allowed is 15.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (18). Maximum allowed is 15.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Shek-Nowshik66 categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","entries"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","remove_adjacent_spaces"],"duration":10,"failureDetails":[{"matcherResult":{"actual":["Arrow function has too many lines (18). Maximum allowed is 15."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (18). Maximum allowed is 15.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (18). Maximum allowed is 15.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Shek-Nowshik66 remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","tribonacci"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","array_equals"],"duration":5,"failureDetails":[{"matcherResult":{"actual":["Arrow function has too many lines (19). Maximum allowed is 15."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (19). Maximum allowed is 15.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (19). Maximum allowed is 15.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Shek-Nowshik66 array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Shek-Nowshik66 object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["JS-AOFS","Shek-Nowshik66","object_equals"],"duration":8,"failureDetails":[{"matcherResult":{"actual":["Arrow function has too many lines (19). Maximum allowed is 15."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (19). Maximum allowed is 15.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (19). Maximum allowed is 15.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Shek-Nowshik66 object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Siddhu83","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["JS-AOFS","Siddhu83","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["JS-AOFS","Siddhu83","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["JS-AOFS","Siddhu83","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["JS-AOFS","Siddhu83","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["JS-AOFS","Siddhu83","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["JS-AOFS","Siddhu83","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["JS-AOFS","Siddhu83","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["JS-AOFS","Siddhu83","even_odd"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["'value' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"'value' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"'value' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Siddhu83 even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Siddhu83","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["JS-AOFS","Siddhu83","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["JS-AOFS","Siddhu83","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["JS-AOFS","Siddhu83","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["JS-AOFS","Siddhu83","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["JS-AOFS","Siddhu83","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["JS-AOFS","Siddhu83","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["JS-AOFS","Siddhu83","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["JS-AOFS","Siddhu83","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["JS-AOFS","Siddhu83","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["JS-AOFS","Siddhu83","categorise"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Siddhu83","entries"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["JS-AOFS","Siddhu83","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["JS-AOFS","Siddhu83","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["JS-AOFS","Siddhu83","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["JS-AOFS","Siddhu83","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["JS-AOFS","Siddhu83","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["JS-AOFS","Siddhu83","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["JS-AOFS","Siddhu83","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["JS-AOFS","Siddhu83","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["JS-AOFS","Siddhu83","entries"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Siddhu83","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["JS-AOFS","Siddhu83","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["JS-AOFS","Siddhu83","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["JS-AOFS","Siddhu83","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["JS-AOFS","Siddhu83","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["JS-AOFS","Siddhu83","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["JS-AOFS","Siddhu83","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["JS-AOFS","Siddhu83","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["JS-AOFS","Siddhu83","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["JS-AOFS","Siddhu83","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["JS-AOFS","Siddhu83","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["JS-AOFS","Siddhu83","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["JS-AOFS","Siddhu83","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["JS-AOFS","Siddhu83","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["JS-AOFS","Siddhu83","remove_adjacent_spaces"],"duration":8,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (18). Maximum allowed is 15."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Function has too many lines (18). Maximum allowed is 15.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Function has too many lines (18). Maximum allowed is 15.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Siddhu83 remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Siddhu83","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["JS-AOFS","Siddhu83","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["JS-AOFS","Siddhu83","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["JS-AOFS","Siddhu83","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["JS-AOFS","Siddhu83","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["JS-AOFS","Siddhu83","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["JS-AOFS","Siddhu83","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["JS-AOFS","Siddhu83","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["JS-AOFS","Siddhu83","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["JS-AOFS","Siddhu83","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["JS-AOFS","Siddhu83","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["JS-AOFS","Siddhu83","tribonacci"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Siddhu83","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Siddhu83","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["JS-AOFS","Siddhu83","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["JS-AOFS","Siddhu83","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["JS-AOFS","Siddhu83","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","Siddhu83","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","Siddhu83","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Siddhu83","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["JS-AOFS","Siddhu83","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","Siddhu83","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["JS-AOFS","Siddhu83","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","Siddhu83","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","Siddhu83","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","Siddhu83","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","Siddhu83","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","Siddhu83","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["JS-AOFS","Siddhu83","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["JS-AOFS","Siddhu83","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Siddhu83","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["JS-AOFS","Siddhu83","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["JS-AOFS","Siddhu83","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["JS-AOFS","Siddhu83","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["JS-AOFS","Siddhu83","array_equals"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (18). Maximum allowed is 15."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Function has too many lines (18). Maximum allowed is 15.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Function has too many lines (18). Maximum allowed is 15.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Siddhu83 array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Siddhu83","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Siddhu83","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Siddhu83","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Siddhu83","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Siddhu83","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Siddhu83","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","Siddhu83","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","Siddhu83","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","Siddhu83","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","Siddhu83","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["JS-AOFS","Siddhu83","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","Siddhu83","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","Siddhu83","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["JS-AOFS","Siddhu83","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["JS-AOFS","Siddhu83","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["JS-AOFS","Siddhu83","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["JS-AOFS","Siddhu83","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Siddhu83 object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["JS-AOFS","Siddhu83","object_equals"],"duration":9,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (28). Maximum allowed is 15."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Function has too many lines (28). Maximum allowed is 15.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Function has too many lines (28). Maximum allowed is 15.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Siddhu83 object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","SkAkramali","even_odd"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["JS-AOFS","SkAkramali","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["JS-AOFS","SkAkramali","even_odd"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["JS-AOFS","SkAkramali","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["JS-AOFS","SkAkramali","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["JS-AOFS","SkAkramali","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["JS-AOFS","SkAkramali","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["JS-AOFS","SkAkramali","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["JS-AOFS","SkAkramali","even_odd"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","SkAkramali","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["JS-AOFS","SkAkramali","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["JS-AOFS","SkAkramali","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["JS-AOFS","SkAkramali","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["JS-AOFS","SkAkramali","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["JS-AOFS","SkAkramali","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["JS-AOFS","SkAkramali","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["JS-AOFS","SkAkramali","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["JS-AOFS","SkAkramali","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["JS-AOFS","SkAkramali","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["JS-AOFS","SkAkramali","categorise"],"duration":5,"failureDetails":[{"matcherResult":{"actual":["'temporary' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"'temporary' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"'temporary' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS SkAkramali categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","SkAkramali","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["JS-AOFS","SkAkramali","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["JS-AOFS","SkAkramali","entries"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["JS-AOFS","SkAkramali","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["JS-AOFS","SkAkramali","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["JS-AOFS","SkAkramali","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["JS-AOFS","SkAkramali","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["JS-AOFS","SkAkramali","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["JS-AOFS","SkAkramali","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["JS-AOFS","SkAkramali","entries"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","SkAkramali","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["JS-AOFS","SkAkramali","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["JS-AOFS","SkAkramali","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["JS-AOFS","SkAkramali","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["JS-AOFS","SkAkramali","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["JS-AOFS","SkAkramali","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["JS-AOFS","SkAkramali","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["JS-AOFS","SkAkramali","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["JS-AOFS","SkAkramali","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["JS-AOFS","SkAkramali","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["JS-AOFS","SkAkramali","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["JS-AOFS","SkAkramali","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["JS-AOFS","SkAkramali","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["JS-AOFS","SkAkramali","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["JS-AOFS","SkAkramali","remove_adjacent_spaces"],"duration":9,"failureDetails":[{"matcherResult":{"actual":["Arrow function has too many lines (27). Maximum allowed is 15.","'TEXT' is already declared in the upper scope on line 2 column 7."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (27). Maximum allowed is 15.\",\n+   \"'TEXT' is already declared in the upper scope on line 2 column 7.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (27). Maximum allowed is 15.\",\n+   \"'TEXT' is already declared in the upper scope on line 2 column 7.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS SkAkramali remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","SkAkramali","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["JS-AOFS","SkAkramali","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["JS-AOFS","SkAkramali","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["JS-AOFS","SkAkramali","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["JS-AOFS","SkAkramali","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["JS-AOFS","SkAkramali","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["JS-AOFS","SkAkramali","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["JS-AOFS","SkAkramali","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["JS-AOFS","SkAkramali","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["JS-AOFS","SkAkramali","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["JS-AOFS","SkAkramali","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["JS-AOFS","SkAkramali","tribonacci"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","SkAkramali","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","SkAkramali","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["JS-AOFS","SkAkramali","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["JS-AOFS","SkAkramali","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["JS-AOFS","SkAkramali","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","SkAkramali","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","SkAkramali","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","SkAkramali","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["JS-AOFS","SkAkramali","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","SkAkramali","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["JS-AOFS","SkAkramali","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","SkAkramali","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","SkAkramali","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","SkAkramali","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","SkAkramali","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","SkAkramali","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["JS-AOFS","SkAkramali","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["JS-AOFS","SkAkramali","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","SkAkramali","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["JS-AOFS","SkAkramali","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["JS-AOFS","SkAkramali","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["JS-AOFS","SkAkramali","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["JS-AOFS","SkAkramali","array_equals"],"duration":6,"failureDetails":[{"matcherResult":{"actual":["Arrow function has too many lines (22). Maximum allowed is 15.","Unnecessary 'else' after 'return'.","Unnecessary use of boolean literals in conditional expression."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (22). Maximum allowed is 15.\",\n+   \"Unnecessary 'else' after 'return'.\",\n+   \"Unnecessary use of boolean literals in conditional expression.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (22). Maximum allowed is 15.\",\n+   \"Unnecessary 'else' after 'return'.\",\n+   \"Unnecessary use of boolean literals in conditional expression.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS SkAkramali array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","SkAkramali","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","SkAkramali","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","SkAkramali","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","SkAkramali","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","SkAkramali","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","SkAkramali","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","SkAkramali","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","SkAkramali","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","SkAkramali","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","SkAkramali","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["JS-AOFS","SkAkramali","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","SkAkramali","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","SkAkramali","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["JS-AOFS","SkAkramali","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["JS-AOFS","SkAkramali","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["JS-AOFS","SkAkramali","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["JS-AOFS","SkAkramali","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["JS-AOFS","SkAkramali","object_equals"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS SkAkramali object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Sravani175","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sravani175 even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["JS-AOFS","Sravani175","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sravani175 even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["JS-AOFS","Sravani175","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sravani175 even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["JS-AOFS","Sravani175","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sravani175 even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["JS-AOFS","Sravani175","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sravani175 even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["JS-AOFS","Sravani175","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sravani175 even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["JS-AOFS","Sravani175","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sravani175 even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["JS-AOFS","Sravani175","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sravani175 even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["JS-AOFS","Sravani175","even_odd"],"duration":3,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","'mine' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"'mine' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"'mine' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Sravani175 even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Sravani175","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sravani175 categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["JS-AOFS","Sravani175","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sravani175 categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["JS-AOFS","Sravani175","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sravani175 categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["JS-AOFS","Sravani175","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sravani175 categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["JS-AOFS","Sravani175","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sravani175 categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["JS-AOFS","Sravani175","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sravani175 categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["JS-AOFS","Sravani175","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sravani175 categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["JS-AOFS","Sravani175","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sravani175 categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["JS-AOFS","Sravani175","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sravani175 categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["JS-AOFS","Sravani175","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sravani175 categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["JS-AOFS","Sravani175","categorise"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'groupNumbers' has too many lines (16). Maximum allowed is 15.","'num' is never reassigned. Use 'const' instead.","'arrays' is never reassigned. Use 'const' instead.","'keys' is never reassigned. Use 'const' instead.","'k' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 8\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'groupNumbers' has too many lines (16). Maximum allowed is 15.\",\n+   \"'num' is never reassigned. Use 'const' instead.\",\n+   \"'arrays' is never reassigned. Use 'const' instead.\",\n+   \"'keys' is never reassigned. Use 'const' instead.\",\n+   \"'k' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 8\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'groupNumbers' has too many lines (16). Maximum allowed is 15.\",\n+   \"'num' is never reassigned. Use 'const' instead.\",\n+   \"'arrays' is never reassigned. Use 'const' instead.\",\n+   \"'keys' is never reassigned. Use 'const' instead.\",\n+   \"'k' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Sravani175 categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Sravani175","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sravani175 entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["JS-AOFS","Sravani175","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sravani175 entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["JS-AOFS","Sravani175","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sravani175 entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["JS-AOFS","Sravani175","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sravani175 entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["JS-AOFS","Sravani175","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sravani175 entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["JS-AOFS","Sravani175","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sravani175 entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["JS-AOFS","Sravani175","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sravani175 entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["JS-AOFS","Sravani175","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sravani175 entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["JS-AOFS","Sravani175","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sravani175 entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["JS-AOFS","Sravani175","entries"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["'OBJECT' is already declared in the upper scope on line 3 column 7.","'mine' is never reassigned. Use 'const' instead.","'index' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"'OBJECT' is already declared in the upper scope on line 3 column 7.\",\n+   \"'mine' is never reassigned. Use 'const' instead.\",\n+   \"'index' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"'OBJECT' is already declared in the upper scope on line 3 column 7.\",\n+   \"'mine' is never reassigned. Use 'const' instead.\",\n+   \"'index' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Sravani175 entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Sravani175","remove_adjacent_spaces"],"duration":2,"failureDetails":[{"matcherResult":{"actual":[],"expected":["One extra space!!!"],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   \"One extra space!!!\",\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   \"One extra space!!!\",\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["JS-AOFS","Sravani175","remove_adjacent_spaces"],"duration":6,"failureDetails":[{"matcherResult":{"actual":[],"expected":["Multiple extra spaces!!!"],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   \"Multiple extra spaces!!!\",\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   \"Multiple extra spaces!!!\",\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["JS-AOFS","Sravani175","remove_adjacent_spaces"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[""],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   \"\",\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   \"\",\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["JS-AOFS","Sravani175","remove_adjacent_spaces"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[""],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   \"\",\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   \"\",\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["JS-AOFS","Sravani175","remove_adjacent_spaces"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":["SingleWord"],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   \"SingleWord\",\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   \"SingleWord\",\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["JS-AOFS","Sravani175","remove_adjacent_spaces"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":["a"],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   \"a\",\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   \"a\",\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["JS-AOFS","Sravani175","remove_adjacent_spaces"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":["ItsALongSentenceWithoutAnySpaces"],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   \"ItsALongSentenceWithoutAnySpaces\",\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   \"ItsALongSentenceWithoutAnySpaces\",\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["JS-AOFS","Sravani175","remove_adjacent_spaces"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":["Leading spaces!!!"],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   \"Leading spaces!!!\",\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   \"Leading spaces!!!\",\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["JS-AOFS","Sravani175","remove_adjacent_spaces"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":["Leading spaces!!! & Trailing Spaces!!!"],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   \"Leading spaces!!! & Trailing Spaces!!!\",\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   \"Leading spaces!!! & Trailing Spaces!!!\",\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["JS-AOFS","Sravani175","remove_adjacent_spaces"],"duration":0,"failureDetails":[{"matcherResult":{"actual":[],"expected":["Trailing Spaces!!!"],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   \"Trailing Spaces!!!\",\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   \"Trailing Spaces!!!\",\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["JS-AOFS","Sravani175","remove_adjacent_spaces"],"duration":0,"failureDetails":[{"matcherResult":{"actual":[],"expected":["String \t with \t spaces \t and \t tabs!!!"],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   \"String \t with \t spaces \t and \t tabs!!!\",\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   \"String \t with \t spaces \t and \t tabs!!!\",\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["JS-AOFS","Sravani175","remove_adjacent_spaces"],"duration":0,"failureDetails":[{"matcherResult":{"actual":[],"expected":["String \n with \n spaces \n and \n newlines!!!"],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 7\n+ Received  + 1\n\n- Array [\n-   \"String \n-  with \n-  spaces \n-  and \n-  newlines!!!\",\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 7\n+ Received  + 1\n\n- Array [\n-   \"String \n-  with \n-  spaces \n-  and \n-  newlines!!!\",\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["JS-AOFS","Sravani175","remove_adjacent_spaces"],"duration":0,"failureDetails":[{"matcherResult":{"actual":[],"expected":["123 456 789"],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   \"123 456 789\",\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   \"123 456 789\",\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["JS-AOFS","Sravani175","remove_adjacent_spaces"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":["こんにちは 世界"],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   \"こんにちは 世界\",\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   \"こんにちは 世界\",\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["JS-AOFS","Sravani175","remove_adjacent_spaces"],"duration":8,"failureDetails":[{"matcherResult":{"actual":["'TEXT' is assigned a value but never used."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"'TEXT' is assigned a value but never used.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"'TEXT' is assigned a value but never used.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Sravani175 remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Sravani175","tribonacci"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[[0,0,1,1,2,4,7]],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 11\n+ Received  +  1\n\n- Array [\n-   Array [\n-     0,\n-     0,\n-     1,\n-     1,\n-     2,\n-     4,\n-     7,\n-   ],\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 11\n+ Received  +  1\n\n- Array [\n-   Array [\n-     0,\n-     0,\n-     1,\n-     1,\n-     2,\n-     4,\n-     7,\n-   ],\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["JS-AOFS","Sravani175","tribonacci"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[[0,0,1,1,2,4,7,13,24]],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 13\n+ Received  +  1\n\n- Array [\n-   Array [\n-     0,\n-     0,\n-     1,\n-     1,\n-     2,\n-     4,\n-     7,\n-     13,\n-     24,\n-   ],\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 13\n+ Received  +  1\n\n- Array [\n-   Array [\n-     0,\n-     0,\n-     1,\n-     1,\n-     2,\n-     4,\n-     7,\n-     13,\n-     24,\n-   ],\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["JS-AOFS","Sravani175","tribonacci"],"duration":0,"failureDetails":[{"matcherResult":{"actual":[],"expected":[[0,0,1,1,2,4,7,13,24,44,81]],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 15\n+ Received  +  1\n\n- Array [\n-   Array [\n-     0,\n-     0,\n-     1,\n-     1,\n-     2,\n-     4,\n-     7,\n-     13,\n-     24,\n-     44,\n-     81,\n-   ],\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 15\n+ Received  +  1\n\n- Array [\n-   Array [\n-     0,\n-     0,\n-     1,\n-     1,\n-     2,\n-     4,\n-     7,\n-     13,\n-     24,\n-     44,\n-     81,\n-   ],\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["JS-AOFS","Sravani175","tribonacci"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[[0,0,1,1,2,4,7,13,24,44,81,149,274]],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 17\n+ Received  +  1\n\n- Array [\n-   Array [\n-     0,\n-     0,\n-     1,\n-     1,\n-     2,\n-     4,\n-     7,\n-     13,\n-     24,\n-     44,\n-     81,\n-     149,\n-     274,\n-   ],\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 17\n+ Received  +  1\n\n- Array [\n-   Array [\n-     0,\n-     0,\n-     1,\n-     1,\n-     2,\n-     4,\n-     7,\n-     13,\n-     24,\n-     44,\n-     81,\n-     149,\n-     274,\n-   ],\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["JS-AOFS","Sravani175","tribonacci"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[[0,0,1,1,2]],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 9\n+ Received  + 1\n\n- Array [\n-   Array [\n-     0,\n-     0,\n-     1,\n-     1,\n-     2,\n-   ],\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 9\n+ Received  + 1\n\n- Array [\n-   Array [\n-     0,\n-     0,\n-     1,\n-     1,\n-     2,\n-   ],\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["JS-AOFS","Sravani175","tribonacci"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[[0,0,1,1]],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 8\n+ Received  + 1\n\n- Array [\n-   Array [\n-     0,\n-     0,\n-     1,\n-     1,\n-   ],\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 8\n+ Received  + 1\n\n- Array [\n-   Array [\n-     0,\n-     0,\n-     1,\n-     1,\n-   ],\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["JS-AOFS","Sravani175","tribonacci"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[[0,0]],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 6\n+ Received  + 1\n\n- Array [\n-   Array [\n-     0,\n-     0,\n-   ],\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 6\n+ Received  + 1\n\n- Array [\n-   Array [\n-     0,\n-     0,\n-   ],\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["JS-AOFS","Sravani175","tribonacci"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[[]],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   Array [],\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   Array [],\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["JS-AOFS","Sravani175","tribonacci"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[[]],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   Array [],\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   Array [],\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["JS-AOFS","Sravani175","tribonacci"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[[]],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   Array [],\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   Array [],\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["JS-AOFS","Sravani175","tribonacci"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[[0,0,1,1,2,4,7,13,24,44,81,149,274,504,927,1705,3136,5768]],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 22\n+ Received  +  1\n\n- Array [\n-   Array [\n-     0,\n-     0,\n-     1,\n-     1,\n-     2,\n-     4,\n-     7,\n-     13,\n-     24,\n-     44,\n-     81,\n-     149,\n-     274,\n-     504,\n-     927,\n-     1705,\n-     3136,\n-     5768,\n-   ],\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 22\n+ Received  +  1\n\n- Array [\n-   Array [\n-     0,\n-     0,\n-     1,\n-     1,\n-     2,\n-     4,\n-     7,\n-     13,\n-     24,\n-     44,\n-     81,\n-     149,\n-     274,\n-     504,\n-     927,\n-     1705,\n-     3136,\n-     5768,\n-   ],\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["JS-AOFS","Sravani175","tribonacci"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["'ENDING_RANGE' is assigned a value but never used."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"'ENDING_RANGE' is assigned a value but never used.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"'ENDING_RANGE' is assigned a value but never used.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Sravani175 tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Sravani175","array_equals"],"duration":2,"failureDetails":[{"matcherResult":{"actual":[],"expected":[true],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Sravani175","array_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["JS-AOFS","Sravani175","array_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["JS-AOFS","Sravani175","array_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["JS-AOFS","Sravani175","array_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[true],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","Sravani175","array_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","Sravani175","array_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Sravani175","array_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[true],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["JS-AOFS","Sravani175","array_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[true],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","Sravani175","array_equals"],"duration":0,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["JS-AOFS","Sravani175","array_equals"],"duration":0,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","Sravani175","array_equals"],"duration":0,"failureDetails":[{"matcherResult":{"actual":[],"expected":[true],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","Sravani175","array_equals"],"duration":0,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","Sravani175","array_equals"],"duration":0,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","Sravani175","array_equals"],"duration":0,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","Sravani175","array_equals"],"duration":0,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["JS-AOFS","Sravani175","array_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["JS-AOFS","Sravani175","array_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Sravani175","array_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[true],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["JS-AOFS","Sravani175","array_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["JS-AOFS","Sravani175","array_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[true],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when given two arrays are null"},{"ancestorTitles":["JS-AOFS","Sravani175","array_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[true],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["JS-AOFS","Sravani175","array_equals"],"duration":9,"failureDetails":[{"matcherResult":{"actual":["'ARRAY_1' is assigned a value but never used.","'ARRAY_2' is assigned a value but never used."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"'ARRAY_1' is assigned a value but never used.\",\n+   \"'ARRAY_2' is assigned a value but never used.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"'ARRAY_1' is assigned a value but never used.\",\n+   \"'ARRAY_2' is assigned a value but never used.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Sravani175 array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Sravani175","object_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[true],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Sravani175","object_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Sravani175","object_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Sravani175","object_equals"],"duration":0,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Sravani175","object_equals"],"duration":0,"failureDetails":[{"matcherResult":{"actual":[],"expected":[true],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Sravani175","object_equals"],"duration":0,"failureDetails":[{"matcherResult":{"actual":[],"expected":[true],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","Sravani175","object_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","Sravani175","object_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[true],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","Sravani175","object_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","Sravani175","object_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[true],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["JS-AOFS","Sravani175","object_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[true],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","Sravani175","object_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","Sravani175","object_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["JS-AOFS","Sravani175","object_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[true],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["JS-AOFS","Sravani175","object_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["JS-AOFS","Sravani175","object_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["JS-AOFS","Sravani175","object_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[true],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS Sravani175 object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["JS-AOFS","Sravani175","object_equals"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["'OBJECT_1' is assigned a value but never used.","'OBJECT_2' is assigned a value but never used."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"'OBJECT_1' is assigned a value but never used.\",\n+   \"'OBJECT_2' is assigned a value but never used.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"'OBJECT_1' is assigned a value but never used.\",\n+   \"'OBJECT_2' is assigned a value but never used.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Sravani175 object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Sreenayak","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["JS-AOFS","Sreenayak","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["JS-AOFS","Sreenayak","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["JS-AOFS","Sreenayak","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["JS-AOFS","Sreenayak","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["JS-AOFS","Sreenayak","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["JS-AOFS","Sreenayak","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["JS-AOFS","Sreenayak","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["JS-AOFS","Sreenayak","even_odd"],"duration":7,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Identifier 'even_odd' is not in camel case.","'NUMBERS' is already declared in the upper scope on line 3 column 7.","'finalresult' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Identifier 'even_odd' is not in camel case.\",\n+   \"'NUMBERS' is already declared in the upper scope on line 3 column 7.\",\n+   \"'finalresult' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Identifier 'even_odd' is not in camel case.\",\n+   \"'NUMBERS' is already declared in the upper scope on line 3 column 7.\",\n+   \"'finalresult' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Sreenayak even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Sreenayak","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["JS-AOFS","Sreenayak","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["JS-AOFS","Sreenayak","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["JS-AOFS","Sreenayak","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["JS-AOFS","Sreenayak","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["JS-AOFS","Sreenayak","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["JS-AOFS","Sreenayak","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["JS-AOFS","Sreenayak","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["JS-AOFS","Sreenayak","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["JS-AOFS","Sreenayak","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["JS-AOFS","Sreenayak","categorise"],"duration":10,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'categorise' has too many lines (31). Maximum allowed is 15.","'NUMBERS' is already declared in the upper scope on line 3 column 7.","'result' is never reassigned. Use 'const' instead.","'temp' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 7\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'categorise' has too many lines (31). Maximum allowed is 15.\",\n+   \"'NUMBERS' is already declared in the upper scope on line 3 column 7.\",\n+   \"'result' is never reassigned. Use 'const' instead.\",\n+   \"'temp' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 7\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'categorise' has too many lines (31). Maximum allowed is 15.\",\n+   \"'NUMBERS' is already declared in the upper scope on line 3 column 7.\",\n+   \"'result' is never reassigned. Use 'const' instead.\",\n+   \"'temp' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Sreenayak categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Sreenayak","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["JS-AOFS","Sreenayak","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["JS-AOFS","Sreenayak","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["JS-AOFS","Sreenayak","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["JS-AOFS","Sreenayak","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["JS-AOFS","Sreenayak","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["JS-AOFS","Sreenayak","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["JS-AOFS","Sreenayak","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["JS-AOFS","Sreenayak","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["JS-AOFS","Sreenayak","entries"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'entries' has too many lines (17). Maximum allowed is 15.","'result' is never reassigned. Use 'const' instead.","'keys' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'entries' has too many lines (17). Maximum allowed is 15.\",\n+   \"'result' is never reassigned. Use 'const' instead.\",\n+   \"'keys' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'entries' has too many lines (17). Maximum allowed is 15.\",\n+   \"'result' is never reassigned. Use 'const' instead.\",\n+   \"'keys' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Sreenayak entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Sreenayak","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["JS-AOFS","Sreenayak","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["JS-AOFS","Sreenayak","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["JS-AOFS","Sreenayak","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["JS-AOFS","Sreenayak","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["JS-AOFS","Sreenayak","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["JS-AOFS","Sreenayak","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["JS-AOFS","Sreenayak","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["JS-AOFS","Sreenayak","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["JS-AOFS","Sreenayak","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["JS-AOFS","Sreenayak","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["JS-AOFS","Sreenayak","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["JS-AOFS","Sreenayak","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["JS-AOFS","Sreenayak","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["JS-AOFS","Sreenayak","remove_adjacent_spaces"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'removeextraSpaces' has too many lines (19). Maximum allowed is 15.","'TEXT' is already declared in the upper scope on line 3 column 7.","'empty' is never reassigned. Use 'const' instead.","'char' is never reassigned. Use 'const' instead.","Expected '!==' and instead saw '!='."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 8\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'removeextraSpaces' has too many lines (19). Maximum allowed is 15.\",\n+   \"'TEXT' is already declared in the upper scope on line 3 column 7.\",\n+   \"'empty' is never reassigned. Use 'const' instead.\",\n+   \"'char' is never reassigned. Use 'const' instead.\",\n+   \"Expected '!==' and instead saw '!='.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 8\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'removeextraSpaces' has too many lines (19). Maximum allowed is 15.\",\n+   \"'TEXT' is already declared in the upper scope on line 3 column 7.\",\n+   \"'empty' is never reassigned. Use 'const' instead.\",\n+   \"'char' is never reassigned. Use 'const' instead.\",\n+   \"Expected '!==' and instead saw '!='.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Sreenayak remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Sreenayak","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["JS-AOFS","Sreenayak","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["JS-AOFS","Sreenayak","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["JS-AOFS","Sreenayak","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["JS-AOFS","Sreenayak","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["JS-AOFS","Sreenayak","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["JS-AOFS","Sreenayak","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["JS-AOFS","Sreenayak","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["JS-AOFS","Sreenayak","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["JS-AOFS","Sreenayak","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["JS-AOFS","Sreenayak","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["JS-AOFS","Sreenayak","tribonacci"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["Identifier 'first_Number' is not in camel case.","Identifier 'second_Number' is not in camel case.","Identifier 'third_Number' is not in camel case.","'tribona' is never reassigned. Use 'const' instead.","Identifier 'first_Number' is not in camel case.","Identifier 'first_Number' is not in camel case.","Identifier 'second_Number' is not in camel case.","Identifier 'third_Number' is not in camel case.","Identifier 'first_Number' is not in camel case.","Identifier 'second_Number' is not in camel case.","Identifier 'second_Number' is not in camel case.","Identifier 'third_Number' is not in camel case.","Identifier 'third_Number' is not in camel case."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 15\n\n- Array []\n+ Array [\n+   \"Identifier 'first_Number' is not in camel case.\",\n+   \"Identifier 'second_Number' is not in camel case.\",\n+   \"Identifier 'third_Number' is not in camel case.\",\n+   \"'tribona' is never reassigned. Use 'const' instead.\",\n+   \"Identifier 'first_Number' is not in camel case.\",\n+   \"Identifier 'first_Number' is not in camel case.\",\n+   \"Identifier 'second_Number' is not in camel case.\",\n+   \"Identifier 'third_Number' is not in camel case.\",\n+   \"Identifier 'first_Number' is not in camel case.\",\n+   \"Identifier 'second_Number' is not in camel case.\",\n+   \"Identifier 'second_Number' is not in camel case.\",\n+   \"Identifier 'third_Number' is not in camel case.\",\n+   \"Identifier 'third_Number' is not in camel case.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 15\n\n- Array []\n+ Array [\n+   \"Identifier 'first_Number' is not in camel case.\",\n+   \"Identifier 'second_Number' is not in camel case.\",\n+   \"Identifier 'third_Number' is not in camel case.\",\n+   \"'tribona' is never reassigned. Use 'const' instead.\",\n+   \"Identifier 'first_Number' is not in camel case.\",\n+   \"Identifier 'first_Number' is not in camel case.\",\n+   \"Identifier 'second_Number' is not in camel case.\",\n+   \"Identifier 'third_Number' is not in camel case.\",\n+   \"Identifier 'first_Number' is not in camel case.\",\n+   \"Identifier 'second_Number' is not in camel case.\",\n+   \"Identifier 'second_Number' is not in camel case.\",\n+   \"Identifier 'third_Number' is not in camel case.\",\n+   \"Identifier 'third_Number' is not in camel case.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Sreenayak tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Sreenayak","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Sreenayak","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["JS-AOFS","Sreenayak","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["JS-AOFS","Sreenayak","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["JS-AOFS","Sreenayak","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","Sreenayak","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","Sreenayak","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Sreenayak","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["JS-AOFS","Sreenayak","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","Sreenayak","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["JS-AOFS","Sreenayak","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","Sreenayak","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","Sreenayak","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","Sreenayak","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","Sreenayak","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","Sreenayak","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["JS-AOFS","Sreenayak","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["JS-AOFS","Sreenayak","array_equals"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Sreenayak","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["JS-AOFS","Sreenayak","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["JS-AOFS","Sreenayak","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["JS-AOFS","Sreenayak","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["JS-AOFS","Sreenayak","array_equals"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'arrayequal' has too many lines (24). Maximum allowed is 15.","Unnecessary 'else' after 'return'.","'v' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'arrayequal' has too many lines (24). Maximum allowed is 15.\",\n+   \"Unnecessary 'else' after 'return'.\",\n+   \"'v' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'arrayequal' has too many lines (24). Maximum allowed is 15.\",\n+   \"Unnecessary 'else' after 'return'.\",\n+   \"'v' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Sreenayak array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Sreenayak","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Sreenayak","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Sreenayak","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Sreenayak","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Sreenayak","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Sreenayak","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","Sreenayak","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","Sreenayak","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","Sreenayak","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","Sreenayak","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["JS-AOFS","Sreenayak","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","Sreenayak","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","Sreenayak","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["JS-AOFS","Sreenayak","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["JS-AOFS","Sreenayak","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["JS-AOFS","Sreenayak","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["JS-AOFS","Sreenayak","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Sreenayak object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["JS-AOFS","Sreenayak","object_equals"],"duration":7,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'checkEquailty' has too many lines (33). Maximum allowed is 15.","'key' is assigned a value but never used.","'key' is never reassigned. Use 'const' instead.","'key' is assigned a value but never used.","'key' is never reassigned. Use 'const' instead.","'key' is never reassigned. Use 'const' instead.","Unexpected if as the only statement in an else block."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 10\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'checkEquailty' has too many lines (33). Maximum allowed is 15.\",\n+   \"'key' is assigned a value but never used.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"'key' is assigned a value but never used.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"Unexpected if as the only statement in an else block.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 10\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'checkEquailty' has too many lines (33). Maximum allowed is 15.\",\n+   \"'key' is assigned a value but never used.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"'key' is assigned a value but never used.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"Unexpected if as the only statement in an else block.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Sreenayak object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Triveni12062006","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["JS-AOFS","Triveni12062006","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["JS-AOFS","Triveni12062006","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["JS-AOFS","Triveni12062006","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["JS-AOFS","Triveni12062006","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["JS-AOFS","Triveni12062006","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["JS-AOFS","Triveni12062006","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["JS-AOFS","Triveni12062006","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["JS-AOFS","Triveni12062006","even_odd"],"duration":5,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","'NUMBERS' is already declared in the upper scope on line 3 column 7."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"'NUMBERS' is already declared in the upper scope on line 3 column 7.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"'NUMBERS' is already declared in the upper scope on line 3 column 7.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Triveni12062006 even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Triveni12062006","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["JS-AOFS","Triveni12062006","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["JS-AOFS","Triveni12062006","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["JS-AOFS","Triveni12062006","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["JS-AOFS","Triveni12062006","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["JS-AOFS","Triveni12062006","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["JS-AOFS","Triveni12062006","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["JS-AOFS","Triveni12062006","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["JS-AOFS","Triveni12062006","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["JS-AOFS","Triveni12062006","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["JS-AOFS","Triveni12062006","categorise"],"duration":12,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'cat' has too many lines (22). Maximum allowed is 15.","'NUMBERS' is already declared in the upper scope on line 3 column 7.","'number' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'cat' has too many lines (22). Maximum allowed is 15.\",\n+   \"'NUMBERS' is already declared in the upper scope on line 3 column 7.\",\n+   \"'number' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'cat' has too many lines (22). Maximum allowed is 15.\",\n+   \"'NUMBERS' is already declared in the upper scope on line 3 column 7.\",\n+   \"'number' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Triveni12062006 categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Triveni12062006","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["JS-AOFS","Triveni12062006","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["JS-AOFS","Triveni12062006","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["JS-AOFS","Triveni12062006","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["JS-AOFS","Triveni12062006","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["JS-AOFS","Triveni12062006","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["JS-AOFS","Triveni12062006","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["JS-AOFS","Triveni12062006","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["JS-AOFS","Triveni12062006","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["JS-AOFS","Triveni12062006","entries"],"duration":3,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","'OBJECT' is already declared in the upper scope on line 3 column 7.","'result' is never reassigned. Use 'const' instead.","'arr' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"'OBJECT' is already declared in the upper scope on line 3 column 7.\",\n+   \"'result' is never reassigned. Use 'const' instead.\",\n+   \"'arr' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"'OBJECT' is already declared in the upper scope on line 3 column 7.\",\n+   \"'result' is never reassigned. Use 'const' instead.\",\n+   \"'arr' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Triveni12062006 entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Triveni12062006","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["JS-AOFS","Triveni12062006","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["JS-AOFS","Triveni12062006","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["JS-AOFS","Triveni12062006","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["JS-AOFS","Triveni12062006","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["JS-AOFS","Triveni12062006","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["JS-AOFS","Triveni12062006","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["JS-AOFS","Triveni12062006","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["JS-AOFS","Triveni12062006","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["JS-AOFS","Triveni12062006","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["JS-AOFS","Triveni12062006","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["JS-AOFS","Triveni12062006","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["JS-AOFS","Triveni12062006","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["JS-AOFS","Triveni12062006","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["JS-AOFS","Triveni12062006","remove_adjacent_spaces"],"duration":7,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'space' has too many lines (26). Maximum allowed is 15.","'TEXT' is already declared in the upper scope on line 3 column 7.","Expected '===' and instead saw '=='.","Expected '===' and instead saw '=='."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 7\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'space' has too many lines (26). Maximum allowed is 15.\",\n+   \"'TEXT' is already declared in the upper scope on line 3 column 7.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Expected '===' and instead saw '=='.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 7\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'space' has too many lines (26). Maximum allowed is 15.\",\n+   \"'TEXT' is already declared in the upper scope on line 3 column 7.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Expected '===' and instead saw '=='.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Triveni12062006 remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Triveni12062006","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["JS-AOFS","Triveni12062006","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["JS-AOFS","Triveni12062006","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["JS-AOFS","Triveni12062006","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["JS-AOFS","Triveni12062006","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["JS-AOFS","Triveni12062006","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["JS-AOFS","Triveni12062006","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["JS-AOFS","Triveni12062006","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["JS-AOFS","Triveni12062006","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["JS-AOFS","Triveni12062006","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["JS-AOFS","Triveni12062006","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["JS-AOFS","Triveni12062006","tribonacci"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["'number' is never reassigned. Use 'const' instead.","Expected a function expression.","'number' is already declared in the upper scope on line 26 column 5.","'result' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"'number' is never reassigned. Use 'const' instead.\",\n+   \"Expected a function expression.\",\n+   \"'number' is already declared in the upper scope on line 26 column 5.\",\n+   \"'result' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"'number' is never reassigned. Use 'const' instead.\",\n+   \"Expected a function expression.\",\n+   \"'number' is already declared in the upper scope on line 26 column 5.\",\n+   \"'result' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Triveni12062006 tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Triveni12062006","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Triveni12062006","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["JS-AOFS","Triveni12062006","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["JS-AOFS","Triveni12062006","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["JS-AOFS","Triveni12062006","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","Triveni12062006","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","Triveni12062006","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Triveni12062006","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["JS-AOFS","Triveni12062006","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","Triveni12062006","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["JS-AOFS","Triveni12062006","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","Triveni12062006","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","Triveni12062006","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","Triveni12062006","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","Triveni12062006","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","Triveni12062006","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["JS-AOFS","Triveni12062006","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["JS-AOFS","Triveni12062006","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Triveni12062006","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["JS-AOFS","Triveni12062006","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["JS-AOFS","Triveni12062006","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["JS-AOFS","Triveni12062006","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["JS-AOFS","Triveni12062006","array_equals"],"duration":12,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'arrayEqual' has too many lines (20). Maximum allowed is 15.","Unnecessary 'else' after 'return'.","'array' was used before it was defined.","'array' was used before it was defined.","Expected a function expression.","Expected '!==' and instead saw '!='."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 9\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'arrayEqual' has too many lines (20). Maximum allowed is 15.\",\n+   \"Unnecessary 'else' after 'return'.\",\n+   \"'array' was used before it was defined.\",\n+   \"'array' was used before it was defined.\",\n+   \"Expected a function expression.\",\n+   \"Expected '!==' and instead saw '!='.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 9\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'arrayEqual' has too many lines (20). Maximum allowed is 15.\",\n+   \"Unnecessary 'else' after 'return'.\",\n+   \"'array' was used before it was defined.\",\n+   \"'array' was used before it was defined.\",\n+   \"Expected a function expression.\",\n+   \"Expected '!==' and instead saw '!='.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Triveni12062006 array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Triveni12062006","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Triveni12062006","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Triveni12062006","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Triveni12062006","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Triveni12062006","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Triveni12062006","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","Triveni12062006","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","Triveni12062006","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","Triveni12062006","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","Triveni12062006","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["JS-AOFS","Triveni12062006","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","Triveni12062006","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","Triveni12062006","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["JS-AOFS","Triveni12062006","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["JS-AOFS","Triveni12062006","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["JS-AOFS","Triveni12062006","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["JS-AOFS","Triveni12062006","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Triveni12062006 object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["JS-AOFS","Triveni12062006","object_equals"],"duration":6,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'objectEqual' has too many lines (23). Maximum allowed is 15.","Unnecessary 'else' after 'return'.","'key' is never reassigned. Use 'const' instead.","'objKey' was used before it was defined.","'objKey' was used before it was defined.","Expected a function expression.","Expected '!==' and instead saw '!='."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 10\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'objectEqual' has too many lines (23). Maximum allowed is 15.\",\n+   \"Unnecessary 'else' after 'return'.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"'objKey' was used before it was defined.\",\n+   \"'objKey' was used before it was defined.\",\n+   \"Expected a function expression.\",\n+   \"Expected '!==' and instead saw '!='.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 10\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'objectEqual' has too many lines (23). Maximum allowed is 15.\",\n+   \"Unnecessary 'else' after 'return'.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"'objKey' was used before it was defined.\",\n+   \"'objKey' was used before it was defined.\",\n+   \"Expected a function expression.\",\n+   \"Expected '!==' and instead saw '!='.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Triveni12062006 object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","even_odd"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","'answerObject' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"'answerObject' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"'answerObject' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS VETR1-V1GNESH even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","categorise"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'categoriseElements' has too many lines (36). Maximum allowed is 15.","'newArray' is never reassigned. Use 'const' instead.","'temp' is never reassigned. Use 'const' instead.","'finalArray' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 7\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'categoriseElements' has too many lines (36). Maximum allowed is 15.\",\n+   \"'newArray' is never reassigned. Use 'const' instead.\",\n+   \"'temp' is never reassigned. Use 'const' instead.\",\n+   \"'finalArray' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 7\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'categoriseElements' has too many lines (36). Maximum allowed is 15.\",\n+   \"'newArray' is never reassigned. Use 'const' instead.\",\n+   \"'temp' is never reassigned. Use 'const' instead.\",\n+   \"'finalArray' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS VETR1-V1GNESH categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","entries"],"duration":8,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","'answerArray' is never reassigned. Use 'const' instead.","'key' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"'answerArray' is never reassigned. Use 'const' instead.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"'answerArray' is never reassigned. Use 'const' instead.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS VETR1-V1GNESH entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","remove_adjacent_spaces"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","remove_adjacent_spaces"],"duration":24,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'removeAdjacentSpace' has too many lines (29). Maximum allowed is 15.","'index' is already declared in the upper scope on line 35 column 7."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'removeAdjacentSpace' has too many lines (29). Maximum allowed is 15.\",\n+   \"'index' is already declared in the upper scope on line 35 column 7.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'removeAdjacentSpace' has too many lines (29). Maximum allowed is 15.\",\n+   \"'index' is already declared in the upper scope on line 35 column 7.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS VETR1-V1GNESH remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","tribonacci"],"duration":20,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","tribonacci"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","tribonacci"],"duration":29,"failureDetails":[{"matcherResult":{"actual":["'answerArray' is never reassigned. Use 'const' instead.","Expected a function expression."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"'answerArray' is never reassigned. Use 'const' instead.\",\n+   \"Expected a function expression.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"'answerArray' is never reassigned. Use 'const' instead.\",\n+   \"Expected a function expression.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS VETR1-V1GNESH tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","array_equals"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'findEqual' has too many lines (17). Maximum allowed is 15."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'findEqual' has too many lines (17). Maximum allowed is 15.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'findEqual' has too many lines (17). Maximum allowed is 15.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS VETR1-V1GNESH array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VETR1-V1GNESH object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["JS-AOFS","VETR1-V1GNESH","object_equals"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'findEqual' has too many lines (24). Maximum allowed is 15."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'findEqual' has too many lines (24). Maximum allowed is 15.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'findEqual' has too many lines (24). Maximum allowed is 15.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS VETR1-V1GNESH object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","even_odd"],"duration":3,"failureDetails":[{"matcherResult":{"actual":["'NUMBERS' is already declared in the upper scope on line 3 column 7."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"'NUMBERS' is already declared in the upper scope on line 3 column 7.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"'NUMBERS' is already declared in the upper scope on line 3 column 7.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS VUPPUKULADEEP even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","categorise"],"duration":12,"failureDetails":[{"matcherResult":{"actual":["Arrow function has too many lines (16). Maximum allowed is 15.","'NUMBERS' is already declared in the upper scope on line 3 column 7.","'seperate' was used before it was defined."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (16). Maximum allowed is 15.\",\n+   \"'NUMBERS' is already declared in the upper scope on line 3 column 7.\",\n+   \"'seperate' was used before it was defined.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (16). Maximum allowed is 15.\",\n+   \"'NUMBERS' is already declared in the upper scope on line 3 column 7.\",\n+   \"'seperate' was used before it was defined.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS VUPPUKULADEEP categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","entries"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","entries"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","entries"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","remove_adjacent_spaces"],"duration":7,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (17). Maximum allowed is 15.","'copyText' is already declared in the upper scope on line 32 column 7.","'addWords' was used before it was defined."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Function has too many lines (17). Maximum allowed is 15.\",\n+   \"'copyText' is already declared in the upper scope on line 32 column 7.\",\n+   \"'addWords' was used before it was defined.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Function has too many lines (17). Maximum allowed is 15.\",\n+   \"'copyText' is already declared in the upper scope on line 32 column 7.\",\n+   \"'addWords' was used before it was defined.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS VUPPUKULADEEP remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","tribonacci"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","array_equals"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","array_equals"],"duration":5,"failureDetails":[{"matcherResult":{"actual":["Arrow function has too many lines (27). Maximum allowed is 15.","Identifier 'array_1' is not in camel case.","Identifier 'array_2' is not in camel case.","Identifier 'array_1' is not in camel case.","Identifier 'array_2' is not in camel case.","Identifier 'array_1' is not in camel case.","Identifier 'array_2' is not in camel case.","'maxLength' is never reassigned. Use 'const' instead.","Identifier 'array_1' is not in camel case.","Identifier 'array_1' is not in camel case.","Identifier 'array_2' is not in camel case.","Identifier 'array_1' is not in camel case.","Identifier 'array_2' is not in camel case.","Identifier 'array_1' is not in camel case.","Identifier 'array_2' is not in camel case.","'firstArray' is never reassigned. Use 'const' instead.","'secondArray' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 19\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (27). Maximum allowed is 15.\",\n+   \"Identifier 'array_1' is not in camel case.\",\n+   \"Identifier 'array_2' is not in camel case.\",\n+   \"Identifier 'array_1' is not in camel case.\",\n+   \"Identifier 'array_2' is not in camel case.\",\n+   \"Identifier 'array_1' is not in camel case.\",\n+   \"Identifier 'array_2' is not in camel case.\",\n+   \"'maxLength' is never reassigned. Use 'const' instead.\",\n+   \"Identifier 'array_1' is not in camel case.\",\n+   \"Identifier 'array_1' is not in camel case.\",\n+   \"Identifier 'array_2' is not in camel case.\",\n+   \"Identifier 'array_1' is not in camel case.\",\n+   \"Identifier 'array_2' is not in camel case.\",\n+   \"Identifier 'array_1' is not in camel case.\",\n+   \"Identifier 'array_2' is not in camel case.\",\n+   \"'firstArray' is never reassigned. Use 'const' instead.\",\n+   \"'secondArray' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 19\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (27). Maximum allowed is 15.\",\n+   \"Identifier 'array_1' is not in camel case.\",\n+   \"Identifier 'array_2' is not in camel case.\",\n+   \"Identifier 'array_1' is not in camel case.\",\n+   \"Identifier 'array_2' is not in camel case.\",\n+   \"Identifier 'array_1' is not in camel case.\",\n+   \"Identifier 'array_2' is not in camel case.\",\n+   \"'maxLength' is never reassigned. Use 'const' instead.\",\n+   \"Identifier 'array_1' is not in camel case.\",\n+   \"Identifier 'array_1' is not in camel case.\",\n+   \"Identifier 'array_2' is not in camel case.\",\n+   \"Identifier 'array_1' is not in camel case.\",\n+   \"Identifier 'array_2' is not in camel case.\",\n+   \"Identifier 'array_1' is not in camel case.\",\n+   \"Identifier 'array_2' is not in camel case.\",\n+   \"'firstArray' is never reassigned. Use 'const' instead.\",\n+   \"'secondArray' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS VUPPUKULADEEP array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS VUPPUKULADEEP object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["JS-AOFS","VUPPUKULADEEP","object_equals"],"duration":6,"failureDetails":[{"matcherResult":{"actual":["Arrow function has too many lines (22). Maximum allowed is 15.","'key' is never reassigned. Use 'const' instead.","'object1' is never reassigned. Use 'const' instead.","'object2' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (22). Maximum allowed is 15.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"'object1' is never reassigned. Use 'const' instead.\",\n+   \"'object2' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (22). Maximum allowed is 15.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"'object1' is never reassigned. Use 'const' instead.\",\n+   \"'object2' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS VUPPUKULADEEP object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Venkat14424","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["JS-AOFS","Venkat14424","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["JS-AOFS","Venkat14424","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["JS-AOFS","Venkat14424","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["JS-AOFS","Venkat14424","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["JS-AOFS","Venkat14424","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["JS-AOFS","Venkat14424","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["JS-AOFS","Venkat14424","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["JS-AOFS","Venkat14424","even_odd"],"duration":5,"failureDetails":[{"matcherResult":{"actual":["Arrow function has too many lines (19). Maximum allowed is 15."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (19). Maximum allowed is 15.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (19). Maximum allowed is 15.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Venkat14424 even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Venkat14424","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["JS-AOFS","Venkat14424","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["JS-AOFS","Venkat14424","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["JS-AOFS","Venkat14424","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["JS-AOFS","Venkat14424","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["JS-AOFS","Venkat14424","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["JS-AOFS","Venkat14424","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["JS-AOFS","Venkat14424","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["JS-AOFS","Venkat14424","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["JS-AOFS","Venkat14424","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["JS-AOFS","Venkat14424","categorise"],"duration":9,"failureDetails":[{"matcherResult":{"actual":["Arrow function has too many lines (22). Maximum allowed is 15."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (22). Maximum allowed is 15.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (22). Maximum allowed is 15.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Venkat14424 categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Venkat14424","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["JS-AOFS","Venkat14424","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["JS-AOFS","Venkat14424","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["JS-AOFS","Venkat14424","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["JS-AOFS","Venkat14424","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["JS-AOFS","Venkat14424","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["JS-AOFS","Venkat14424","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["JS-AOFS","Venkat14424","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["JS-AOFS","Venkat14424","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["JS-AOFS","Venkat14424","entries"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Venkat14424","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["JS-AOFS","Venkat14424","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["JS-AOFS","Venkat14424","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["JS-AOFS","Venkat14424","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["JS-AOFS","Venkat14424","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["JS-AOFS","Venkat14424","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["JS-AOFS","Venkat14424","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["JS-AOFS","Venkat14424","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["JS-AOFS","Venkat14424","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["JS-AOFS","Venkat14424","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["JS-AOFS","Venkat14424","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["JS-AOFS","Venkat14424","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["JS-AOFS","Venkat14424","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["JS-AOFS","Venkat14424","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["JS-AOFS","Venkat14424","remove_adjacent_spaces"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Venkat14424","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["JS-AOFS","Venkat14424","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["JS-AOFS","Venkat14424","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["JS-AOFS","Venkat14424","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["JS-AOFS","Venkat14424","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["JS-AOFS","Venkat14424","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["JS-AOFS","Venkat14424","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["JS-AOFS","Venkat14424","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["JS-AOFS","Venkat14424","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["JS-AOFS","Venkat14424","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["JS-AOFS","Venkat14424","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["JS-AOFS","Venkat14424","tribonacci"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Venkat14424","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Venkat14424","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["JS-AOFS","Venkat14424","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["JS-AOFS","Venkat14424","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["JS-AOFS","Venkat14424","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","Venkat14424","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","Venkat14424","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Venkat14424","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["JS-AOFS","Venkat14424","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","Venkat14424","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["JS-AOFS","Venkat14424","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","Venkat14424","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","Venkat14424","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","Venkat14424","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","Venkat14424","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","Venkat14424","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["JS-AOFS","Venkat14424","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["JS-AOFS","Venkat14424","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","Venkat14424","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["JS-AOFS","Venkat14424","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["JS-AOFS","Venkat14424","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["JS-AOFS","Venkat14424","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["JS-AOFS","Venkat14424","array_equals"],"duration":9,"failureDetails":[{"matcherResult":{"actual":["Arrow function has too many lines (20). Maximum allowed is 15."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (20). Maximum allowed is 15.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (20). Maximum allowed is 15.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Venkat14424 array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","Venkat14424","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Venkat14424","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Venkat14424","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Venkat14424","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Venkat14424","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","Venkat14424","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","Venkat14424","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","Venkat14424","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","Venkat14424","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","Venkat14424","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["JS-AOFS","Venkat14424","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","Venkat14424","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","Venkat14424","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["JS-AOFS","Venkat14424","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["JS-AOFS","Venkat14424","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["JS-AOFS","Venkat14424","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["JS-AOFS","Venkat14424","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS Venkat14424 object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["JS-AOFS","Venkat14424","object_equals"],"duration":6,"failureDetails":[{"matcherResult":{"actual":["Arrow function has too many lines (24). Maximum allowed is 15."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (24). Maximum allowed is 15.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (24). Maximum allowed is 15.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS Venkat14424 object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","YMOURYA25","even_odd"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["JS-AOFS","YMOURYA25","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["JS-AOFS","YMOURYA25","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["JS-AOFS","YMOURYA25","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["JS-AOFS","YMOURYA25","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["JS-AOFS","YMOURYA25","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["JS-AOFS","YMOURYA25","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["JS-AOFS","YMOURYA25","even_odd"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["JS-AOFS","YMOURYA25","even_odd"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","YMOURYA25","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["JS-AOFS","YMOURYA25","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["JS-AOFS","YMOURYA25","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["JS-AOFS","YMOURYA25","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["JS-AOFS","YMOURYA25","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["JS-AOFS","YMOURYA25","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["JS-AOFS","YMOURYA25","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["JS-AOFS","YMOURYA25","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["JS-AOFS","YMOURYA25","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["JS-AOFS","YMOURYA25","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["JS-AOFS","YMOURYA25","categorise"],"duration":5,"failureDetails":[{"matcherResult":{"actual":["Arrow function has too many lines (31). Maximum allowed is 15.","'NUM' is defined but never used.","'groupArray' is never reassigned. Use 'const' instead.","'temp' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (31). Maximum allowed is 15.\",\n+   \"'NUM' is defined but never used.\",\n+   \"'groupArray' is never reassigned. Use 'const' instead.\",\n+   \"'temp' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (31). Maximum allowed is 15.\",\n+   \"'NUM' is defined but never used.\",\n+   \"'groupArray' is never reassigned. Use 'const' instead.\",\n+   \"'temp' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS YMOURYA25 categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","YMOURYA25","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["JS-AOFS","YMOURYA25","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["JS-AOFS","YMOURYA25","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["JS-AOFS","YMOURYA25","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["JS-AOFS","YMOURYA25","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["JS-AOFS","YMOURYA25","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["JS-AOFS","YMOURYA25","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["JS-AOFS","YMOURYA25","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["JS-AOFS","YMOURYA25","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["JS-AOFS","YMOURYA25","entries"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","YMOURYA25","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["JS-AOFS","YMOURYA25","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["JS-AOFS","YMOURYA25","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["JS-AOFS","YMOURYA25","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["JS-AOFS","YMOURYA25","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["JS-AOFS","YMOURYA25","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["JS-AOFS","YMOURYA25","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["JS-AOFS","YMOURYA25","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["JS-AOFS","YMOURYA25","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["JS-AOFS","YMOURYA25","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["JS-AOFS","YMOURYA25","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["JS-AOFS","YMOURYA25","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["JS-AOFS","YMOURYA25","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["JS-AOFS","YMOURYA25","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["JS-AOFS","YMOURYA25","remove_adjacent_spaces"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["Identifier 'remove_spaces' is not in camel case.","Arrow function has too many lines (28). Maximum allowed is 15.","'arr' is defined but never used.","'length' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Identifier 'remove_spaces' is not in camel case.\",\n+   \"Arrow function has too many lines (28). Maximum allowed is 15.\",\n+   \"'arr' is defined but never used.\",\n+   \"'length' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Identifier 'remove_spaces' is not in camel case.\",\n+   \"Arrow function has too many lines (28). Maximum allowed is 15.\",\n+   \"'arr' is defined but never used.\",\n+   \"'length' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS YMOURYA25 remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","YMOURYA25","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["JS-AOFS","YMOURYA25","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["JS-AOFS","YMOURYA25","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["JS-AOFS","YMOURYA25","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["JS-AOFS","YMOURYA25","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["JS-AOFS","YMOURYA25","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["JS-AOFS","YMOURYA25","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["JS-AOFS","YMOURYA25","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["JS-AOFS","YMOURYA25","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["JS-AOFS","YMOURYA25","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["JS-AOFS","YMOURYA25","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["JS-AOFS","YMOURYA25","tribonacci"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["'ENDING_RANGE' is already declared in the upper scope on line 3 column 7.","Identifier 'tribonacci_array' is not in camel case.","Identifier 'tribonacci_array' is not in camel case.","Identifier 'tribonacci_array' is not in camel case."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"'ENDING_RANGE' is already declared in the upper scope on line 3 column 7.\",\n+   \"Identifier 'tribonacci_array' is not in camel case.\",\n+   \"Identifier 'tribonacci_array' is not in camel case.\",\n+   \"Identifier 'tribonacci_array' is not in camel case.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"'ENDING_RANGE' is already declared in the upper scope on line 3 column 7.\",\n+   \"Identifier 'tribonacci_array' is not in camel case.\",\n+   \"Identifier 'tribonacci_array' is not in camel case.\",\n+   \"Identifier 'tribonacci_array' is not in camel case.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS YMOURYA25 tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","YMOURYA25","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","YMOURYA25","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["JS-AOFS","YMOURYA25","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["JS-AOFS","YMOURYA25","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["JS-AOFS","YMOURYA25","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","YMOURYA25","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","YMOURYA25","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","YMOURYA25","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["JS-AOFS","YMOURYA25","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","YMOURYA25","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["JS-AOFS","YMOURYA25","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","YMOURYA25","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","YMOURYA25","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","YMOURYA25","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","YMOURYA25","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","YMOURYA25","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["JS-AOFS","YMOURYA25","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["JS-AOFS","YMOURYA25","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","YMOURYA25","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["JS-AOFS","YMOURYA25","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["JS-AOFS","YMOURYA25","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["JS-AOFS","YMOURYA25","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["JS-AOFS","YMOURYA25","array_equals"],"duration":9,"failureDetails":[{"matcherResult":{"actual":["Arrow function has too many lines (25). Maximum allowed is 15.","Unnecessary use of boolean literals in conditional expression."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (25). Maximum allowed is 15.\",\n+   \"Unnecessary use of boolean literals in conditional expression.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (25). Maximum allowed is 15.\",\n+   \"Unnecessary use of boolean literals in conditional expression.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS YMOURYA25 array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","YMOURYA25","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","YMOURYA25","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","YMOURYA25","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","YMOURYA25","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","YMOURYA25","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","YMOURYA25","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","YMOURYA25","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","YMOURYA25","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","YMOURYA25","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","YMOURYA25","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["JS-AOFS","YMOURYA25","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","YMOURYA25","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","YMOURYA25","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["JS-AOFS","YMOURYA25","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["JS-AOFS","YMOURYA25","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["JS-AOFS","YMOURYA25","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["JS-AOFS","YMOURYA25","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS YMOURYA25 object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["JS-AOFS","YMOURYA25","object_equals"],"duration":5,"failureDetails":[{"matcherResult":{"actual":["Arrow function has too many lines (41). Maximum allowed is 15."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (41). Maximum allowed is 15.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (41). Maximum allowed is 15.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS YMOURYA25 object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","balasatish1","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["JS-AOFS","balasatish1","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["JS-AOFS","balasatish1","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["JS-AOFS","balasatish1","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["JS-AOFS","balasatish1","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["JS-AOFS","balasatish1","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["JS-AOFS","balasatish1","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["JS-AOFS","balasatish1","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["JS-AOFS","balasatish1","even_odd"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","balasatish1","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["JS-AOFS","balasatish1","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["JS-AOFS","balasatish1","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["JS-AOFS","balasatish1","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["JS-AOFS","balasatish1","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["JS-AOFS","balasatish1","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["JS-AOFS","balasatish1","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["JS-AOFS","balasatish1","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["JS-AOFS","balasatish1","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["JS-AOFS","balasatish1","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["JS-AOFS","balasatish1","categorise"],"duration":7,"failureDetails":[{"matcherResult":{"actual":["Expected { after 'if' condition."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Expected { after 'if' condition.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Expected { after 'if' condition.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS balasatish1 categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","balasatish1","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["JS-AOFS","balasatish1","entries"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["JS-AOFS","balasatish1","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["JS-AOFS","balasatish1","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["JS-AOFS","balasatish1","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["JS-AOFS","balasatish1","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["JS-AOFS","balasatish1","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["JS-AOFS","balasatish1","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["JS-AOFS","balasatish1","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["JS-AOFS","balasatish1","entries"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","balasatish1","remove_adjacent_spaces"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["JS-AOFS","balasatish1","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["JS-AOFS","balasatish1","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["JS-AOFS","balasatish1","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["JS-AOFS","balasatish1","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["JS-AOFS","balasatish1","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["JS-AOFS","balasatish1","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["JS-AOFS","balasatish1","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["JS-AOFS","balasatish1","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["JS-AOFS","balasatish1","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["JS-AOFS","balasatish1","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["JS-AOFS","balasatish1","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["JS-AOFS","balasatish1","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["JS-AOFS","balasatish1","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["JS-AOFS","balasatish1","remove_adjacent_spaces"],"duration":5,"failureDetails":[{"matcherResult":{"actual":["Expected { after 'if' condition.","Unexpected use of continue statement.","Expected { after 'if' condition.","Unexpected use of continue statement."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Expected { after 'if' condition.\",\n+   \"Unexpected use of continue statement.\",\n+   \"Expected { after 'if' condition.\",\n+   \"Unexpected use of continue statement.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Expected { after 'if' condition.\",\n+   \"Unexpected use of continue statement.\",\n+   \"Expected { after 'if' condition.\",\n+   \"Unexpected use of continue statement.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS balasatish1 remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","balasatish1","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["JS-AOFS","balasatish1","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["JS-AOFS","balasatish1","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["JS-AOFS","balasatish1","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["JS-AOFS","balasatish1","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["JS-AOFS","balasatish1","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["JS-AOFS","balasatish1","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["JS-AOFS","balasatish1","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["JS-AOFS","balasatish1","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["JS-AOFS","balasatish1","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["JS-AOFS","balasatish1","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["JS-AOFS","balasatish1","tribonacci"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (18). Maximum allowed is 15.","Assignment to function parameter 'numOne'.","Assignment to function parameter 'numTwo'.","Assignment to function parameter 'numThree'.","'eleInArr' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 7\n\n- Array []\n+ Array [\n+   \"Function has too many lines (18). Maximum allowed is 15.\",\n+   \"Assignment to function parameter 'numOne'.\",\n+   \"Assignment to function parameter 'numTwo'.\",\n+   \"Assignment to function parameter 'numThree'.\",\n+   \"'eleInArr' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 7\n\n- Array []\n+ Array [\n+   \"Function has too many lines (18). Maximum allowed is 15.\",\n+   \"Assignment to function parameter 'numOne'.\",\n+   \"Assignment to function parameter 'numTwo'.\",\n+   \"Assignment to function parameter 'numThree'.\",\n+   \"'eleInArr' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS balasatish1 tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","balasatish1","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","balasatish1","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["JS-AOFS","balasatish1","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["JS-AOFS","balasatish1","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["JS-AOFS","balasatish1","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","balasatish1","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","balasatish1","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","balasatish1","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["JS-AOFS","balasatish1","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","balasatish1","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["JS-AOFS","balasatish1","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","balasatish1","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","balasatish1","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","balasatish1","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","balasatish1","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","balasatish1","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["JS-AOFS","balasatish1","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["JS-AOFS","balasatish1","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","balasatish1","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["JS-AOFS","balasatish1","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["JS-AOFS","balasatish1","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["JS-AOFS","balasatish1","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["JS-AOFS","balasatish1","array_equals"],"duration":9,"failureDetails":[{"matcherResult":{"actual":["Arrow function has too many lines (19). Maximum allowed is 15.","Expected { after 'if' condition.","Expected { after 'if' condition.","Expected { after 'if' condition.","Unexpected use of continue statement."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 7\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (19). Maximum allowed is 15.\",\n+   \"Expected { after 'if' condition.\",\n+   \"Expected { after 'if' condition.\",\n+   \"Expected { after 'if' condition.\",\n+   \"Unexpected use of continue statement.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 7\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (19). Maximum allowed is 15.\",\n+   \"Expected { after 'if' condition.\",\n+   \"Expected { after 'if' condition.\",\n+   \"Expected { after 'if' condition.\",\n+   \"Unexpected use of continue statement.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS balasatish1 array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","balasatish1","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","balasatish1","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","balasatish1","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","balasatish1","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","balasatish1","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","balasatish1","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","balasatish1","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","balasatish1","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","balasatish1","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","balasatish1","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["JS-AOFS","balasatish1","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","balasatish1","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","balasatish1","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["JS-AOFS","balasatish1","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["JS-AOFS","balasatish1","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["JS-AOFS","balasatish1","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["JS-AOFS","balasatish1","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS balasatish1 object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["JS-AOFS","balasatish1","object_equals"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["Arrow function has too many lines (20). Maximum allowed is 15.","Expected { after 'if' condition.","Expected { after 'if' condition.","'objKey' is never reassigned. Use 'const' instead.","Expected { after 'if' condition.","Unexpected use of continue statement."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 8\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (20). Maximum allowed is 15.\",\n+   \"Expected { after 'if' condition.\",\n+   \"Expected { after 'if' condition.\",\n+   \"'objKey' is never reassigned. Use 'const' instead.\",\n+   \"Expected { after 'if' condition.\",\n+   \"Unexpected use of continue statement.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 8\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (20). Maximum allowed is 15.\",\n+   \"Expected { after 'if' condition.\",\n+   \"Expected { after 'if' condition.\",\n+   \"'objKey' is never reassigned. Use 'const' instead.\",\n+   \"Expected { after 'if' condition.\",\n+   \"Unexpected use of continue statement.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS balasatish1 object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","even_odd"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["'NUMBERS' is never reassigned. Use 'const' instead.","'summarize' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"'NUMBERS' is never reassigned. Use 'const' instead.\",\n+   \"'summarize' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"'NUMBERS' is never reassigned. Use 'const' instead.\",\n+   \"'summarize' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS harshavardhan-macha even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","categorise"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","categorise"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","categorise"],"duration":6,"failureDetails":[{"matcherResult":{"actual":["'emptyaray' is never reassigned. Use 'const' instead.","'categorize' is never reassigned. Use 'const' instead.","'externalaray' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"'emptyaray' is never reassigned. Use 'const' instead.\",\n+   \"'categorize' is never reassigned. Use 'const' instead.\",\n+   \"'externalaray' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"'emptyaray' is never reassigned. Use 'const' instead.\",\n+   \"'categorize' is never reassigned. Use 'const' instead.\",\n+   \"'externalaray' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS harshavardhan-macha categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","entries"],"duration":8,"failureDetails":[{"matcherResult":{"actual":["'entries' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"'entries' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"'entries' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS harshavardhan-macha entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","remove_adjacent_spaces"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","remove_adjacent_spaces"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["'filter' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"'filter' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"'filter' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS harshavardhan-macha remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","tribonacci"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["'tribbonaci' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"'tribbonaci' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"'tribbonaci' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS harshavardhan-macha tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","array_equals"],"duration":10,"failureDetails":[{"matcherResult":{"actual":["'checker' is never reassigned. Use 'const' instead.","Arrow function has too many lines (16). Maximum allowed is 15."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"'checker' is never reassigned. Use 'const' instead.\",\n+   \"Arrow function has too many lines (16). Maximum allowed is 15.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"'checker' is never reassigned. Use 'const' instead.\",\n+   \"Arrow function has too many lines (16). Maximum allowed is 15.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS harshavardhan-macha array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS harshavardhan-macha object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["JS-AOFS","harshavardhan-macha","object_equals"],"duration":6,"failureDetails":[{"matcherResult":{"actual":["'checker' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"'checker' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"'checker' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS harshavardhan-macha object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","hemeswar9849","even_odd"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["JS-AOFS","hemeswar9849","even_odd"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["JS-AOFS","hemeswar9849","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["JS-AOFS","hemeswar9849","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["JS-AOFS","hemeswar9849","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["JS-AOFS","hemeswar9849","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["JS-AOFS","hemeswar9849","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["JS-AOFS","hemeswar9849","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["JS-AOFS","hemeswar9849","even_odd"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","hemeswar9849","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["JS-AOFS","hemeswar9849","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["JS-AOFS","hemeswar9849","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["JS-AOFS","hemeswar9849","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["JS-AOFS","hemeswar9849","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["JS-AOFS","hemeswar9849","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["JS-AOFS","hemeswar9849","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["JS-AOFS","hemeswar9849","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["JS-AOFS","hemeswar9849","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["JS-AOFS","hemeswar9849","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["JS-AOFS","hemeswar9849","categorise"],"duration":5,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (27). Maximum allowed is 15.","Assignment to function parameter 'anArray'."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Function has too many lines (27). Maximum allowed is 15.\",\n+   \"Assignment to function parameter 'anArray'.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Function has too many lines (27). Maximum allowed is 15.\",\n+   \"Assignment to function parameter 'anArray'.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS hemeswar9849 categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","hemeswar9849","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["JS-AOFS","hemeswar9849","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["JS-AOFS","hemeswar9849","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["JS-AOFS","hemeswar9849","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["JS-AOFS","hemeswar9849","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["JS-AOFS","hemeswar9849","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["JS-AOFS","hemeswar9849","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["JS-AOFS","hemeswar9849","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["JS-AOFS","hemeswar9849","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["JS-AOFS","hemeswar9849","entries"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","hemeswar9849","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["JS-AOFS","hemeswar9849","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["JS-AOFS","hemeswar9849","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["JS-AOFS","hemeswar9849","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["JS-AOFS","hemeswar9849","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["JS-AOFS","hemeswar9849","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["JS-AOFS","hemeswar9849","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["JS-AOFS","hemeswar9849","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["JS-AOFS","hemeswar9849","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["JS-AOFS","hemeswar9849","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["JS-AOFS","hemeswar9849","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["JS-AOFS","hemeswar9849","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["JS-AOFS","hemeswar9849","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["JS-AOFS","hemeswar9849","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["JS-AOFS","hemeswar9849","remove_adjacent_spaces"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","hemeswar9849","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["JS-AOFS","hemeswar9849","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["JS-AOFS","hemeswar9849","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["JS-AOFS","hemeswar9849","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["JS-AOFS","hemeswar9849","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["JS-AOFS","hemeswar9849","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["JS-AOFS","hemeswar9849","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["JS-AOFS","hemeswar9849","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["JS-AOFS","hemeswar9849","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["JS-AOFS","hemeswar9849","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["JS-AOFS","hemeswar9849","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["JS-AOFS","hemeswar9849","tribonacci"],"duration":6,"failureDetails":[{"matcherResult":{"actual":["Assignment to function parameter 'first'.","Assignment to function parameter 'second'.","Assignment to function parameter 'third'."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Assignment to function parameter 'first'.\",\n+   \"Assignment to function parameter 'second'.\",\n+   \"Assignment to function parameter 'third'.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Assignment to function parameter 'first'.\",\n+   \"Assignment to function parameter 'second'.\",\n+   \"Assignment to function parameter 'third'.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS hemeswar9849 tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","hemeswar9849","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","hemeswar9849","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["JS-AOFS","hemeswar9849","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["JS-AOFS","hemeswar9849","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["JS-AOFS","hemeswar9849","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","hemeswar9849","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","hemeswar9849","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","hemeswar9849","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["JS-AOFS","hemeswar9849","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","hemeswar9849","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["JS-AOFS","hemeswar9849","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","hemeswar9849","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","hemeswar9849","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","hemeswar9849","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","hemeswar9849","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","hemeswar9849","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["JS-AOFS","hemeswar9849","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["JS-AOFS","hemeswar9849","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","hemeswar9849","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["JS-AOFS","hemeswar9849","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["JS-AOFS","hemeswar9849","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["JS-AOFS","hemeswar9849","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["JS-AOFS","hemeswar9849","array_equals"],"duration":9,"failureDetails":[{"matcherResult":{"actual":["Arrow function has too many lines (21). Maximum allowed is 15."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (21). Maximum allowed is 15.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (21). Maximum allowed is 15.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS hemeswar9849 array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","hemeswar9849","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","hemeswar9849","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","hemeswar9849","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","hemeswar9849","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","hemeswar9849","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","hemeswar9849","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","hemeswar9849","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","hemeswar9849","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","hemeswar9849","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","hemeswar9849","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["JS-AOFS","hemeswar9849","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","hemeswar9849","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","hemeswar9849","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["JS-AOFS","hemeswar9849","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["JS-AOFS","hemeswar9849","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["JS-AOFS","hemeswar9849","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["JS-AOFS","hemeswar9849","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS hemeswar9849 object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["JS-AOFS","hemeswar9849","object_equals"],"duration":5,"failureDetails":[{"matcherResult":{"actual":["Arrow function has too many lines (21). Maximum allowed is 15."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (21). Maximum allowed is 15.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (21). Maximum allowed is 15.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS hemeswar9849 object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","jayanth-14","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["JS-AOFS","jayanth-14","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["JS-AOFS","jayanth-14","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["JS-AOFS","jayanth-14","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["JS-AOFS","jayanth-14","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["JS-AOFS","jayanth-14","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["JS-AOFS","jayanth-14","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["JS-AOFS","jayanth-14","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["JS-AOFS","jayanth-14","even_odd"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","jayanth-14","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["JS-AOFS","jayanth-14","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["JS-AOFS","jayanth-14","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["JS-AOFS","jayanth-14","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["JS-AOFS","jayanth-14","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["JS-AOFS","jayanth-14","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["JS-AOFS","jayanth-14","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["JS-AOFS","jayanth-14","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["JS-AOFS","jayanth-14","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["JS-AOFS","jayanth-14","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["JS-AOFS","jayanth-14","categorise"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (16). Maximum allowed is 15.","Expected { after 'if' condition.","Expected { after 'if' condition."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Function has too many lines (16). Maximum allowed is 15.\",\n+   \"Expected { after 'if' condition.\",\n+   \"Expected { after 'if' condition.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Function has too many lines (16). Maximum allowed is 15.\",\n+   \"Expected { after 'if' condition.\",\n+   \"Expected { after 'if' condition.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS jayanth-14 categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","jayanth-14","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["JS-AOFS","jayanth-14","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["JS-AOFS","jayanth-14","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["JS-AOFS","jayanth-14","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["JS-AOFS","jayanth-14","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["JS-AOFS","jayanth-14","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["JS-AOFS","jayanth-14","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["JS-AOFS","jayanth-14","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["JS-AOFS","jayanth-14","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["JS-AOFS","jayanth-14","entries"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","jayanth-14","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["JS-AOFS","jayanth-14","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["JS-AOFS","jayanth-14","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["JS-AOFS","jayanth-14","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["JS-AOFS","jayanth-14","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["JS-AOFS","jayanth-14","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["JS-AOFS","jayanth-14","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["JS-AOFS","jayanth-14","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["JS-AOFS","jayanth-14","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["JS-AOFS","jayanth-14","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["JS-AOFS","jayanth-14","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["JS-AOFS","jayanth-14","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["JS-AOFS","jayanth-14","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["JS-AOFS","jayanth-14","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["JS-AOFS","jayanth-14","remove_adjacent_spaces"],"duration":5,"failureDetails":[{"matcherResult":{"actual":["Expected { after 'if' condition."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Expected { after 'if' condition.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Expected { after 'if' condition.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS jayanth-14 remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","jayanth-14","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["JS-AOFS","jayanth-14","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["JS-AOFS","jayanth-14","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["JS-AOFS","jayanth-14","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["JS-AOFS","jayanth-14","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["JS-AOFS","jayanth-14","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["JS-AOFS","jayanth-14","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["JS-AOFS","jayanth-14","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["JS-AOFS","jayanth-14","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["JS-AOFS","jayanth-14","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["JS-AOFS","jayanth-14","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["JS-AOFS","jayanth-14","tribonacci"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["Unnecessary 'else' after 'return'."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Unnecessary 'else' after 'return'.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Unnecessary 'else' after 'return'.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS jayanth-14 tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","jayanth-14","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","jayanth-14","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["JS-AOFS","jayanth-14","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["JS-AOFS","jayanth-14","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["JS-AOFS","jayanth-14","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","jayanth-14","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","jayanth-14","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","jayanth-14","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["JS-AOFS","jayanth-14","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","jayanth-14","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["JS-AOFS","jayanth-14","array_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[true],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS jayanth-14 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","jayanth-14","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","jayanth-14","array_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[true],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS jayanth-14 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","jayanth-14","array_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[true],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS jayanth-14 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","jayanth-14","array_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[true],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS jayanth-14 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","jayanth-14","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["JS-AOFS","jayanth-14","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["JS-AOFS","jayanth-14","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","jayanth-14","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["JS-AOFS","jayanth-14","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["JS-AOFS","jayanth-14","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["JS-AOFS","jayanth-14","array_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[false],"expected":[true],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   true,\n+   false,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   true,\n+   false,\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS jayanth-14 array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["JS-AOFS","jayanth-14","array_equals"],"duration":10,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Expected '!==' and instead saw '!='.","Expected { after 'if' condition."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Expected '!==' and instead saw '!='.\",\n+   \"Expected { after 'if' condition.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Expected '!==' and instead saw '!='.\",\n+   \"Expected { after 'if' condition.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS jayanth-14 array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","jayanth-14","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","jayanth-14","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","jayanth-14","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","jayanth-14","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","jayanth-14","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","jayanth-14","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","jayanth-14","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","jayanth-14","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","jayanth-14","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","jayanth-14","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["JS-AOFS","jayanth-14","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","jayanth-14","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","jayanth-14","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["JS-AOFS","jayanth-14","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["JS-AOFS","jayanth-14","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["JS-AOFS","jayanth-14","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["JS-AOFS","jayanth-14","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS jayanth-14 object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["JS-AOFS","jayanth-14","object_equals"],"duration":5,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (16). Maximum allowed is 15.","Expected { after 'if' condition.","Expected { after 'if' condition.","Expected { after 'if' condition.","Expected { after 'if' condition.","'key' is never reassigned. Use 'const' instead.","Expected { after 'if' condition.","Expected { after 'if' condition.","Expected { after 'if' condition."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 11\n\n- Array []\n+ Array [\n+   \"Function has too many lines (16). Maximum allowed is 15.\",\n+   \"Expected { after 'if' condition.\",\n+   \"Expected { after 'if' condition.\",\n+   \"Expected { after 'if' condition.\",\n+   \"Expected { after 'if' condition.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"Expected { after 'if' condition.\",\n+   \"Expected { after 'if' condition.\",\n+   \"Expected { after 'if' condition.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 11\n\n- Array []\n+ Array [\n+   \"Function has too many lines (16). Maximum allowed is 15.\",\n+   \"Expected { after 'if' condition.\",\n+   \"Expected { after 'if' condition.\",\n+   \"Expected { after 'if' condition.\",\n+   \"Expected { after 'if' condition.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"Expected { after 'if' condition.\",\n+   \"Expected { after 'if' condition.\",\n+   \"Expected { after 'if' condition.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS jayanth-14 object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","even_odd"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","categorise"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","entries"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","remove_adjacent_spaces"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","tribonacci"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","array_equals"],"duration":9,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (19). Maximum allowed is 15."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Function has too many lines (19). Maximum allowed is 15.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Function has too many lines (19). Maximum allowed is 15.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS kumarnandeesh array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","object_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[true],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS kumarnandeesh object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","object_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[true],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS kumarnandeesh object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS kumarnandeesh object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["JS-AOFS","kumarnandeesh","object_equals"],"duration":6,"failureDetails":[{"matcherResult":{"actual":["Identifier 'obj_1' is not in camel case.","Identifier 'obj_2' is not in camel case.","'key' is assigned a value but never used.","Identifier 'obj_1' is not in camel case.","'key' is assigned a value but never used.","Identifier 'obj_2' is not in camel case."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 8\n\n- Array []\n+ Array [\n+   \"Identifier 'obj_1' is not in camel case.\",\n+   \"Identifier 'obj_2' is not in camel case.\",\n+   \"'key' is assigned a value but never used.\",\n+   \"Identifier 'obj_1' is not in camel case.\",\n+   \"'key' is assigned a value but never used.\",\n+   \"Identifier 'obj_2' is not in camel case.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 8\n\n- Array []\n+ Array [\n+   \"Identifier 'obj_1' is not in camel case.\",\n+   \"Identifier 'obj_2' is not in camel case.\",\n+   \"'key' is assigned a value but never used.\",\n+   \"Identifier 'obj_1' is not in camel case.\",\n+   \"'key' is assigned a value but never used.\",\n+   \"Identifier 'obj_2' is not in camel case.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS kumarnandeesh object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","mr-mouli03","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["JS-AOFS","mr-mouli03","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["JS-AOFS","mr-mouli03","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["JS-AOFS","mr-mouli03","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["JS-AOFS","mr-mouli03","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["JS-AOFS","mr-mouli03","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["JS-AOFS","mr-mouli03","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["JS-AOFS","mr-mouli03","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["JS-AOFS","mr-mouli03","even_odd"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS mr-mouli03 even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","mr-mouli03","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["JS-AOFS","mr-mouli03","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["JS-AOFS","mr-mouli03","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["JS-AOFS","mr-mouli03","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["JS-AOFS","mr-mouli03","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["JS-AOFS","mr-mouli03","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["JS-AOFS","mr-mouli03","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["JS-AOFS","mr-mouli03","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["JS-AOFS","mr-mouli03","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["JS-AOFS","mr-mouli03","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["JS-AOFS","mr-mouli03","categorise"],"duration":7,"failureDetails":[{"matcherResult":{"actual":["'sort' was used before it was defined.","Expected a function expression.","'NUMBERS' is already declared in the upper scope on line 3 column 7.","Expected { after 'for' condition.","Expected a function expression.","'sortedList' is never reassigned. Use 'const' instead.","Expected a function expression.","'sortedList' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 10\n\n- Array []\n+ Array [\n+   \"'sort' was used before it was defined.\",\n+   \"Expected a function expression.\",\n+   \"'NUMBERS' is already declared in the upper scope on line 3 column 7.\",\n+   \"Expected { after 'for' condition.\",\n+   \"Expected a function expression.\",\n+   \"'sortedList' is never reassigned. Use 'const' instead.\",\n+   \"Expected a function expression.\",\n+   \"'sortedList' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 10\n\n- Array []\n+ Array [\n+   \"'sort' was used before it was defined.\",\n+   \"Expected a function expression.\",\n+   \"'NUMBERS' is already declared in the upper scope on line 3 column 7.\",\n+   \"Expected { after 'for' condition.\",\n+   \"Expected a function expression.\",\n+   \"'sortedList' is never reassigned. Use 'const' instead.\",\n+   \"Expected a function expression.\",\n+   \"'sortedList' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS mr-mouli03 categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","mr-mouli03","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["JS-AOFS","mr-mouli03","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["JS-AOFS","mr-mouli03","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["JS-AOFS","mr-mouli03","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["JS-AOFS","mr-mouli03","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["JS-AOFS","mr-mouli03","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["JS-AOFS","mr-mouli03","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["JS-AOFS","mr-mouli03","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["JS-AOFS","mr-mouli03","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["JS-AOFS","mr-mouli03","entries"],"duration":8,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS mr-mouli03 entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","mr-mouli03","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["JS-AOFS","mr-mouli03","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["JS-AOFS","mr-mouli03","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["JS-AOFS","mr-mouli03","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["JS-AOFS","mr-mouli03","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["JS-AOFS","mr-mouli03","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["JS-AOFS","mr-mouli03","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["JS-AOFS","mr-mouli03","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["JS-AOFS","mr-mouli03","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["JS-AOFS","mr-mouli03","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["JS-AOFS","mr-mouli03","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["JS-AOFS","mr-mouli03","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["JS-AOFS","mr-mouli03","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["JS-AOFS","mr-mouli03","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["JS-AOFS","mr-mouli03","remove_adjacent_spaces"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'removeAdjacentSpaces' has too many lines (16). Maximum allowed is 15.","'character' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'removeAdjacentSpaces' has too many lines (16). Maximum allowed is 15.\",\n+   \"'character' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'removeAdjacentSpaces' has too many lines (16). Maximum allowed is 15.\",\n+   \"'character' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS mr-mouli03 remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","mr-mouli03","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["JS-AOFS","mr-mouli03","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["JS-AOFS","mr-mouli03","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["JS-AOFS","mr-mouli03","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["JS-AOFS","mr-mouli03","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["JS-AOFS","mr-mouli03","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["JS-AOFS","mr-mouli03","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["JS-AOFS","mr-mouli03","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["JS-AOFS","mr-mouli03","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["JS-AOFS","mr-mouli03","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["JS-AOFS","mr-mouli03","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["JS-AOFS","mr-mouli03","tribonacci"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","'ENDING_RANGE' is already declared in the upper scope on line 3 column 7."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"'ENDING_RANGE' is already declared in the upper scope on line 3 column 7.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"'ENDING_RANGE' is already declared in the upper scope on line 3 column 7.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS mr-mouli03 tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","mr-mouli03","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","mr-mouli03","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["JS-AOFS","mr-mouli03","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["JS-AOFS","mr-mouli03","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["JS-AOFS","mr-mouli03","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","mr-mouli03","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","mr-mouli03","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","mr-mouli03","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["JS-AOFS","mr-mouli03","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","mr-mouli03","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["JS-AOFS","mr-mouli03","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","mr-mouli03","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","mr-mouli03","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","mr-mouli03","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","mr-mouli03","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","mr-mouli03","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["JS-AOFS","mr-mouli03","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["JS-AOFS","mr-mouli03","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","mr-mouli03","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["JS-AOFS","mr-mouli03","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["JS-AOFS","mr-mouli03","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["JS-AOFS","mr-mouli03","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["JS-AOFS","mr-mouli03","array_equals"],"duration":10,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'arraysEqual' has too many lines (29). Maximum allowed is 15.","Expected '===' and instead saw '=='.","'stack1' is never reassigned. Use 'const' instead.","'stack2' is never reassigned. Use 'const' instead.","'currentArray1' is never reassigned. Use 'const' instead.","'currentArray2' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 9\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'arraysEqual' has too many lines (29). Maximum allowed is 15.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"'stack1' is never reassigned. Use 'const' instead.\",\n+   \"'stack2' is never reassigned. Use 'const' instead.\",\n+   \"'currentArray1' is never reassigned. Use 'const' instead.\",\n+   \"'currentArray2' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 9\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'arraysEqual' has too many lines (29). Maximum allowed is 15.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"'stack1' is never reassigned. Use 'const' instead.\",\n+   \"'stack2' is never reassigned. Use 'const' instead.\",\n+   \"'currentArray1' is never reassigned. Use 'const' instead.\",\n+   \"'currentArray2' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS mr-mouli03 array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","mr-mouli03","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","mr-mouli03","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","mr-mouli03","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","mr-mouli03","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","mr-mouli03","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","mr-mouli03","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","mr-mouli03","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","mr-mouli03","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","mr-mouli03","object_equals"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","mr-mouli03","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["JS-AOFS","mr-mouli03","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","mr-mouli03","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","mr-mouli03","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["JS-AOFS","mr-mouli03","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["JS-AOFS","mr-mouli03","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["JS-AOFS","mr-mouli03","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["JS-AOFS","mr-mouli03","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS mr-mouli03 object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["JS-AOFS","mr-mouli03","object_equals"],"duration":5,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'isEqualObject' has too many lines (31). Maximum allowed is 15.","Expected '===' and instead saw '=='.","Expected '===' and instead saw '=='.","Expected '===' and instead saw '=='.","'bool' is never reassigned. Use 'const' instead.","Blocks are nested too deeply (5). Maximum allowed is 4.","Expected '===' and instead saw '=='."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 10\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'isEqualObject' has too many lines (31). Maximum allowed is 15.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"'bool' is never reassigned. Use 'const' instead.\",\n+   \"Blocks are nested too deeply (5). Maximum allowed is 4.\",\n+   \"Expected '===' and instead saw '=='.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 10\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'isEqualObject' has too many lines (31). Maximum allowed is 15.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"'bool' is never reassigned. Use 'const' instead.\",\n+   \"Blocks are nested too deeply (5). Maximum allowed is 4.\",\n+   \"Expected '===' and instead saw '=='.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS mr-mouli03 object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","even_odd"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","categorise"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","entries"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","remove_adjacent_spaces"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","tribonacci"],"duration":5,"failureDetails":[{"matcherResult":{"actual":["Arrow function has too many lines (19). Maximum allowed is 15."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (19). Maximum allowed is 15.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (19). Maximum allowed is 15.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS naveen-kumar-vadla tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","array_equals"],"duration":7,"failureDetails":[{"matcherResult":{"actual":["Arrow function has too many lines (37). Maximum allowed is 15.","Expected '===' and instead saw '=='.","Identifier 'array_1_length' is not in camel case.","Identifier 'array_2_length' is not in camel case.","Identifier 'array_1_length' is not in camel case.","Identifier 'array_2_length' is not in camel case.","Identifier 'array_1_length' is not in camel case.","Identifier 'array_1_element' is not in camel case.","Identifier 'array_2_element' is not in camel case.","Identifier 'is_array_1_element_array' is not in camel case.","Identifier 'is_array_2_element_array' is not in camel case.","Identifier 'array_1_element' is not in camel case.","Identifier 'array_2_element' is not in camel case.","Identifier 'is_array_1_element_array' is not in camel case.","Identifier 'is_array_2_element_array' is not in camel case.","Identifier 'is_array_1_element_array' is not in camel case.","Identifier 'is_array_2_element_array' is not in camel case.","Unexpected use of continue statement.","Identifier 'array_1_element' is not in camel case.","Identifier 'array_2_element' is not in camel case."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 22\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (37). Maximum allowed is 15.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Identifier 'array_1_length' is not in camel case.\",\n+   \"Identifier 'array_2_length' is not in camel case.\",\n+   \"Identifier 'array_1_length' is not in camel case.\",\n+   \"Identifier 'array_2_length' is not in camel case.\",\n+   \"Identifier 'array_1_length' is not in camel case.\",\n+   \"Identifier 'array_1_element' is not in camel case.\",\n+   \"Identifier 'array_2_element' is not in camel case.\",\n+   \"Identifier 'is_array_1_element_array' is not in camel case.\",\n+   \"Identifier 'is_array_2_element_array' is not in camel case.\",\n+   \"Identifier 'array_1_element' is not in camel case.\",\n+   \"Identifier 'array_2_element' is not in camel case.\",\n+   \"Identifier 'is_array_1_element_array' is not in camel case.\",\n+   \"Identifier 'is_array_2_element_array' is not in camel case.\",\n+   \"Identifier 'is_array_1_element_array' is not in camel case.\",\n+   \"Identifier 'is_array_2_element_array' is not in camel case.\",\n+   \"Unexpected use of continue statement.\",\n+   \"Identifier 'array_1_element' is not in camel case.\",\n+   \"Identifier 'array_2_element' is not in camel case.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 22\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (37). Maximum allowed is 15.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Identifier 'array_1_length' is not in camel case.\",\n+   \"Identifier 'array_2_length' is not in camel case.\",\n+   \"Identifier 'array_1_length' is not in camel case.\",\n+   \"Identifier 'array_2_length' is not in camel case.\",\n+   \"Identifier 'array_1_length' is not in camel case.\",\n+   \"Identifier 'array_1_element' is not in camel case.\",\n+   \"Identifier 'array_2_element' is not in camel case.\",\n+   \"Identifier 'is_array_1_element_array' is not in camel case.\",\n+   \"Identifier 'is_array_2_element_array' is not in camel case.\",\n+   \"Identifier 'array_1_element' is not in camel case.\",\n+   \"Identifier 'array_2_element' is not in camel case.\",\n+   \"Identifier 'is_array_1_element_array' is not in camel case.\",\n+   \"Identifier 'is_array_2_element_array' is not in camel case.\",\n+   \"Identifier 'is_array_1_element_array' is not in camel case.\",\n+   \"Identifier 'is_array_2_element_array' is not in camel case.\",\n+   \"Unexpected use of continue statement.\",\n+   \"Identifier 'array_1_element' is not in camel case.\",\n+   \"Identifier 'array_2_element' is not in camel case.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS naveen-kumar-vadla array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","object_equals"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS naveen-kumar-vadla object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["JS-AOFS","naveen-kumar-vadla","object_equals"],"duration":6,"failureDetails":[{"matcherResult":{"actual":["Arrow function has too many lines (38). Maximum allowed is 15.","Identifier 'object_1_keys' is not in camel case.","Identifier 'object_2_keys' is not in camel case.","Identifier 'object_1_keys' is not in camel case.","Identifier 'object_2_keys' is not in camel case.","Identifier 'object_1_keys' is not in camel case.","Identifier 'object_1_value' is not in camel case.","Identifier 'object_2_value' is not in camel case.","Identifier 'object_1_value_type' is not in camel case.","Identifier 'object_1_value' is not in camel case.","Identifier 'object_2_value_type' is not in camel case.","Identifier 'object_2_value' is not in camel case.","Identifier 'is_object_1_value_object' is not in camel case.","Identifier 'object_1_value_type' is not in camel case.","Expected '===' and instead saw '=='.","Identifier 'is_object_2_value_object' is not in camel case.","Identifier 'object_2_value_type' is not in camel case.","Expected '===' and instead saw '=='.","Identifier 'object_1_value_type' is not in camel case.","Identifier 'object_2_value_type' is not in camel case.","Identifier 'is_object_1_value_object' is not in camel case.","Identifier 'is_object_2_value_object' is not in camel case.","Identifier 'is_object_1_value_object' is not in camel case.","Identifier 'is_object_2_value_object' is not in camel case.","Unexpected use of continue statement.","Identifier 'object_1_value' is not in camel case.","Expected '!==' and instead saw '!='.","Identifier 'object_2_value' is not in camel case."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 30\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (38). Maximum allowed is 15.\",\n+   \"Identifier 'object_1_keys' is not in camel case.\",\n+   \"Identifier 'object_2_keys' is not in camel case.\",\n+   \"Identifier 'object_1_keys' is not in camel case.\",\n+   \"Identifier 'object_2_keys' is not in camel case.\",\n+   \"Identifier 'object_1_keys' is not in camel case.\",\n+   \"Identifier 'object_1_value' is not in camel case.\",\n+   \"Identifier 'object_2_value' is not in camel case.\",\n+   \"Identifier 'object_1_value_type' is not in camel case.\",\n+   \"Identifier 'object_1_value' is not in camel case.\",\n+   \"Identifier 'object_2_value_type' is not in camel case.\",\n+   \"Identifier 'object_2_value' is not in camel case.\",\n+   \"Identifier 'is_object_1_value_object' is not in camel case.\",\n+   \"Identifier 'object_1_value_type' is not in camel case.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Identifier 'is_object_2_value_object' is not in camel case.\",\n+   \"Identifier 'object_2_value_type' is not in camel case.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Identifier 'object_1_value_type' is not in camel case.\",\n+   \"Identifier 'object_2_value_type' is not in camel case.\",\n+   \"Identifier 'is_object_1_value_object' is not in camel case.\",\n+   \"Identifier 'is_object_2_value_object' is not in camel case.\",\n+   \"Identifier 'is_object_1_value_object' is not in camel case.\",\n+   \"Identifier 'is_object_2_value_object' is not in camel case.\",\n+   \"Unexpected use of continue statement.\",\n+   \"Identifier 'object_1_value' is not in camel case.\",\n+   \"Expected '!==' and instead saw '!='.\",\n+   \"Identifier 'object_2_value' is not in camel case.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 30\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (38). Maximum allowed is 15.\",\n+   \"Identifier 'object_1_keys' is not in camel case.\",\n+   \"Identifier 'object_2_keys' is not in camel case.\",\n+   \"Identifier 'object_1_keys' is not in camel case.\",\n+   \"Identifier 'object_2_keys' is not in camel case.\",\n+   \"Identifier 'object_1_keys' is not in camel case.\",\n+   \"Identifier 'object_1_value' is not in camel case.\",\n+   \"Identifier 'object_2_value' is not in camel case.\",\n+   \"Identifier 'object_1_value_type' is not in camel case.\",\n+   \"Identifier 'object_1_value' is not in camel case.\",\n+   \"Identifier 'object_2_value_type' is not in camel case.\",\n+   \"Identifier 'object_2_value' is not in camel case.\",\n+   \"Identifier 'is_object_1_value_object' is not in camel case.\",\n+   \"Identifier 'object_1_value_type' is not in camel case.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Identifier 'is_object_2_value_object' is not in camel case.\",\n+   \"Identifier 'object_2_value_type' is not in camel case.\",\n+   \"Expected '===' and instead saw '=='.\",\n+   \"Identifier 'object_1_value_type' is not in camel case.\",\n+   \"Identifier 'object_2_value_type' is not in camel case.\",\n+   \"Identifier 'is_object_1_value_object' is not in camel case.\",\n+   \"Identifier 'is_object_2_value_object' is not in camel case.\",\n+   \"Identifier 'is_object_1_value_object' is not in camel case.\",\n+   \"Identifier 'is_object_2_value_object' is not in camel case.\",\n+   \"Unexpected use of continue statement.\",\n+   \"Identifier 'object_1_value' is not in camel case.\",\n+   \"Expected '!==' and instead saw '!='.\",\n+   \"Identifier 'object_2_value' is not in camel case.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS naveen-kumar-vadla object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","nithindenkada","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["JS-AOFS","nithindenkada","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["JS-AOFS","nithindenkada","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["JS-AOFS","nithindenkada","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["JS-AOFS","nithindenkada","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["JS-AOFS","nithindenkada","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["JS-AOFS","nithindenkada","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["JS-AOFS","nithindenkada","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["JS-AOFS","nithindenkada","even_odd"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["'evenOddSeperation' was used before it was defined.","Expected a function expression.","'numbers' is already declared in the upper scope on line 19 column 5.","'even' is never reassigned. Use 'const' instead.","'odd' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 7\n\n- Array []\n+ Array [\n+   \"'evenOddSeperation' was used before it was defined.\",\n+   \"Expected a function expression.\",\n+   \"'numbers' is already declared in the upper scope on line 19 column 5.\",\n+   \"'even' is never reassigned. Use 'const' instead.\",\n+   \"'odd' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 7\n\n- Array []\n+ Array [\n+   \"'evenOddSeperation' was used before it was defined.\",\n+   \"Expected a function expression.\",\n+   \"'numbers' is already declared in the upper scope on line 19 column 5.\",\n+   \"'even' is never reassigned. Use 'const' instead.\",\n+   \"'odd' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS nithindenkada even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","nithindenkada","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["JS-AOFS","nithindenkada","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["JS-AOFS","nithindenkada","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["JS-AOFS","nithindenkada","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["JS-AOFS","nithindenkada","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["JS-AOFS","nithindenkada","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["JS-AOFS","nithindenkada","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["JS-AOFS","nithindenkada","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["JS-AOFS","nithindenkada","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["JS-AOFS","nithindenkada","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["JS-AOFS","nithindenkada","categorise"],"duration":5,"failureDetails":[{"matcherResult":{"actual":["'copyOfNumbers' is never reassigned. Use 'const' instead.","'sortingGrouping' was used before it was defined.","Expected a function expression.","Function 'sortingGrouping' has too many lines (17). Maximum allowed is 15.","'copyOfNumbers' is already declared in the upper scope on line 27 column 5.","'sortList' is never reassigned. Use 'const' instead.","'sorting' was used before it was defined.","'category' is never reassigned. Use 'const' instead.","Expected a function expression.","'copyOfNumbers' is already declared in the upper scope on line 27 column 5.","'temporary' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 13\n\n- Array []\n+ Array [\n+   \"'copyOfNumbers' is never reassigned. Use 'const' instead.\",\n+   \"'sortingGrouping' was used before it was defined.\",\n+   \"Expected a function expression.\",\n+   \"Function 'sortingGrouping' has too many lines (17). Maximum allowed is 15.\",\n+   \"'copyOfNumbers' is already declared in the upper scope on line 27 column 5.\",\n+   \"'sortList' is never reassigned. Use 'const' instead.\",\n+   \"'sorting' was used before it was defined.\",\n+   \"'category' is never reassigned. Use 'const' instead.\",\n+   \"Expected a function expression.\",\n+   \"'copyOfNumbers' is already declared in the upper scope on line 27 column 5.\",\n+   \"'temporary' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 13\n\n- Array []\n+ Array [\n+   \"'copyOfNumbers' is never reassigned. Use 'const' instead.\",\n+   \"'sortingGrouping' was used before it was defined.\",\n+   \"Expected a function expression.\",\n+   \"Function 'sortingGrouping' has too many lines (17). Maximum allowed is 15.\",\n+   \"'copyOfNumbers' is already declared in the upper scope on line 27 column 5.\",\n+   \"'sortList' is never reassigned. Use 'const' instead.\",\n+   \"'sorting' was used before it was defined.\",\n+   \"'category' is never reassigned. Use 'const' instead.\",\n+   \"Expected a function expression.\",\n+   \"'copyOfNumbers' is already declared in the upper scope on line 27 column 5.\",\n+   \"'temporary' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS nithindenkada categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","nithindenkada","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["JS-AOFS","nithindenkada","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["JS-AOFS","nithindenkada","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["JS-AOFS","nithindenkada","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["JS-AOFS","nithindenkada","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["JS-AOFS","nithindenkada","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["JS-AOFS","nithindenkada","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["JS-AOFS","nithindenkada","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["JS-AOFS","nithindenkada","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["JS-AOFS","nithindenkada","entries"],"duration":8,"failureDetails":[{"matcherResult":{"actual":["'myEntries' was used before it was defined.","Expected a function expression.","'objectCopy' is already declared in the upper scope on line 24 column 5.","'output' is never reassigned. Use 'const' instead.","'key' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 7\n\n- Array []\n+ Array [\n+   \"'myEntries' was used before it was defined.\",\n+   \"Expected a function expression.\",\n+   \"'objectCopy' is already declared in the upper scope on line 24 column 5.\",\n+   \"'output' is never reassigned. Use 'const' instead.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 7\n\n- Array []\n+ Array [\n+   \"'myEntries' was used before it was defined.\",\n+   \"Expected a function expression.\",\n+   \"'objectCopy' is already declared in the upper scope on line 24 column 5.\",\n+   \"'output' is never reassigned. Use 'const' instead.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS nithindenkada entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","nithindenkada","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["JS-AOFS","nithindenkada","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["JS-AOFS","nithindenkada","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["JS-AOFS","nithindenkada","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["JS-AOFS","nithindenkada","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["JS-AOFS","nithindenkada","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["JS-AOFS","nithindenkada","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["JS-AOFS","nithindenkada","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["JS-AOFS","nithindenkada","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["JS-AOFS","nithindenkada","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["JS-AOFS","nithindenkada","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["JS-AOFS","nithindenkada","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["JS-AOFS","nithindenkada","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["JS-AOFS","nithindenkada","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["JS-AOFS","nithindenkada","remove_adjacent_spaces"],"duration":7,"failureDetails":[{"matcherResult":{"actual":["'finalResult' is never reassigned. Use 'const' instead.","'removeAdjacentSpaces' was used before it was defined.","Expected a function expression.","Function 'removeAdjacentSpaces' has too many lines (27). Maximum allowed is 15.","Expected '!==' and instead saw '!='."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 7\n\n- Array []\n+ Array [\n+   \"'finalResult' is never reassigned. Use 'const' instead.\",\n+   \"'removeAdjacentSpaces' was used before it was defined.\",\n+   \"Expected a function expression.\",\n+   \"Function 'removeAdjacentSpaces' has too many lines (27). Maximum allowed is 15.\",\n+   \"Expected '!==' and instead saw '!='.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 7\n\n- Array []\n+ Array [\n+   \"'finalResult' is never reassigned. Use 'const' instead.\",\n+   \"'removeAdjacentSpaces' was used before it was defined.\",\n+   \"Expected a function expression.\",\n+   \"Function 'removeAdjacentSpaces' has too many lines (27). Maximum allowed is 15.\",\n+   \"Expected '!==' and instead saw '!='.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS nithindenkada remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","nithindenkada","tribonacci"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["JS-AOFS","nithindenkada","tribonacci"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["JS-AOFS","nithindenkada","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["JS-AOFS","nithindenkada","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["JS-AOFS","nithindenkada","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["JS-AOFS","nithindenkada","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["JS-AOFS","nithindenkada","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["JS-AOFS","nithindenkada","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["JS-AOFS","nithindenkada","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["JS-AOFS","nithindenkada","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["JS-AOFS","nithindenkada","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["JS-AOFS","nithindenkada","tribonacci"],"duration":5,"failureDetails":[{"matcherResult":{"actual":["'number' is never reassigned. Use 'const' instead.","'number1' is never reassigned. Use 'const' instead.","'number2' is never reassigned. Use 'const' instead.","'number3' is never reassigned. Use 'const' instead.","'number4' is never reassigned. Use 'const' instead.","'result' is never reassigned. Use 'const' instead.","'finalResult' is never reassigned. Use 'const' instead.","'tribonacci' was used before it was defined.","Expected a function expression.","Function 'tribonacci' has too many lines (17). Maximum allowed is 15.","'number1' is already declared in the upper scope on line 25 column 7.","'number2' is already declared in the upper scope on line 26 column 7.","'number3' is already declared in the upper scope on line 27 column 7.","'number4' is already declared in the upper scope on line 28 column 7.","Assignment to function parameter 'number1'.","Assignment to function parameter 'number2'.","Assignment to function parameter 'number3'.","Assignment to function parameter 'number4'.","Unnecessary 'else' after 'return'."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 21\n\n- Array []\n+ Array [\n+   \"'number' is never reassigned. Use 'const' instead.\",\n+   \"'number1' is never reassigned. Use 'const' instead.\",\n+   \"'number2' is never reassigned. Use 'const' instead.\",\n+   \"'number3' is never reassigned. Use 'const' instead.\",\n+   \"'number4' is never reassigned. Use 'const' instead.\",\n+   \"'result' is never reassigned. Use 'const' instead.\",\n+   \"'finalResult' is never reassigned. Use 'const' instead.\",\n+   \"'tribonacci' was used before it was defined.\",\n+   \"Expected a function expression.\",\n+   \"Function 'tribonacci' has too many lines (17). Maximum allowed is 15.\",\n+   \"'number1' is already declared in the upper scope on line 25 column 7.\",\n+   \"'number2' is already declared in the upper scope on line 26 column 7.\",\n+   \"'number3' is already declared in the upper scope on line 27 column 7.\",\n+   \"'number4' is already declared in the upper scope on line 28 column 7.\",\n+   \"Assignment to function parameter 'number1'.\",\n+   \"Assignment to function parameter 'number2'.\",\n+   \"Assignment to function parameter 'number3'.\",\n+   \"Assignment to function parameter 'number4'.\",\n+   \"Unnecessary 'else' after 'return'.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 21\n\n- Array []\n+ Array [\n+   \"'number' is never reassigned. Use 'const' instead.\",\n+   \"'number1' is never reassigned. Use 'const' instead.\",\n+   \"'number2' is never reassigned. Use 'const' instead.\",\n+   \"'number3' is never reassigned. Use 'const' instead.\",\n+   \"'number4' is never reassigned. Use 'const' instead.\",\n+   \"'result' is never reassigned. Use 'const' instead.\",\n+   \"'finalResult' is never reassigned. Use 'const' instead.\",\n+   \"'tribonacci' was used before it was defined.\",\n+   \"Expected a function expression.\",\n+   \"Function 'tribonacci' has too many lines (17). Maximum allowed is 15.\",\n+   \"'number1' is already declared in the upper scope on line 25 column 7.\",\n+   \"'number2' is already declared in the upper scope on line 26 column 7.\",\n+   \"'number3' is already declared in the upper scope on line 27 column 7.\",\n+   \"'number4' is already declared in the upper scope on line 28 column 7.\",\n+   \"Assignment to function parameter 'number1'.\",\n+   \"Assignment to function parameter 'number2'.\",\n+   \"Assignment to function parameter 'number3'.\",\n+   \"Assignment to function parameter 'number4'.\",\n+   \"Unnecessary 'else' after 'return'.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS nithindenkada tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","nithindenkada","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","nithindenkada","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["JS-AOFS","nithindenkada","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["JS-AOFS","nithindenkada","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["JS-AOFS","nithindenkada","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","nithindenkada","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","nithindenkada","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","nithindenkada","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["JS-AOFS","nithindenkada","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","nithindenkada","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["JS-AOFS","nithindenkada","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","nithindenkada","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","nithindenkada","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","nithindenkada","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","nithindenkada","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","nithindenkada","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["JS-AOFS","nithindenkada","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["JS-AOFS","nithindenkada","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","nithindenkada","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["JS-AOFS","nithindenkada","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["JS-AOFS","nithindenkada","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["JS-AOFS","nithindenkada","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["JS-AOFS","nithindenkada","array_equals"],"duration":8,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'arrayEqualOrNot' has too many lines (19). Maximum allowed is 15.","Expected '!==' and instead saw '!='.","Expected '!==' and instead saw '!='."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'arrayEqualOrNot' has too many lines (19). Maximum allowed is 15.\",\n+   \"Expected '!==' and instead saw '!='.\",\n+   \"Expected '!==' and instead saw '!='.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'arrayEqualOrNot' has too many lines (19). Maximum allowed is 15.\",\n+   \"Expected '!==' and instead saw '!='.\",\n+   \"Expected '!==' and instead saw '!='.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS nithindenkada array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","nithindenkada","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","nithindenkada","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","nithindenkada","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","nithindenkada","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","nithindenkada","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","nithindenkada","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","nithindenkada","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","nithindenkada","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","nithindenkada","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","nithindenkada","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["JS-AOFS","nithindenkada","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","nithindenkada","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","nithindenkada","object_equals"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:38\n  let array_1 = Object.keys(obj1);\n                       ^\n\nTypeError: Cannot convert undefined or null to object\n    at Function.keys (<anonymous>)\n    at objectEqual (evalmachine.<anonymous>:38:24)\n    at objectEqual (evalmachine.<anonymous>:51:18)\n    at evalmachine.<anonymous>:34:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)"],"fullName":"JS-AOFS nithindenkada object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["JS-AOFS","nithindenkada","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["JS-AOFS","nithindenkada","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["JS-AOFS","nithindenkada","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithindenkada object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["JS-AOFS","nithindenkada","object_equals"],"duration":0,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:38\n  let array_1 = Object.keys(obj1);\n                       ^\n\nTypeError: Cannot convert undefined or null to object\n    at Function.keys (<anonymous>)\n    at objectEqual (evalmachine.<anonymous>:38:24)\n    at evalmachine.<anonymous>:34:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)"],"fullName":"JS-AOFS nithindenkada object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["JS-AOFS","nithindenkada","object_equals"],"duration":7,"failureDetails":[{"matcherResult":{"actual":["'objectEqual' was used before it was defined.","Expected a function expression.","Function 'objectEqual' has too many lines (25). Maximum allowed is 15.","Identifier 'array_1' is not in camel case.","'array_1' is never reassigned. Use 'const' instead.","Identifier 'array_2' is not in camel case.","'array_2' is never reassigned. Use 'const' instead.","Identifier 'array_1' is not in camel case.","Expected '!==' and instead saw '!='.","Identifier 'array_2' is not in camel case.","Identifier 'array_1' is not in camel case.","Identifier 'array_2' is not in camel case.","Identifier 'array_1' is not in camel case.","Identifier 'array_2' is not in camel case.","Identifier 'array_1' is not in camel case.","Identifier 'array_2' is not in camel case.","Identifier 'array_1' is not in camel case.","Identifier 'array_2' is not in camel case.","Identifier 'array_1' is not in camel case.","Identifier 'array_2' is not in camel case.","Expected '===' and instead saw '=='."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 23\n\n- Array []\n+ Array [\n+   \"'objectEqual' was used before it was defined.\",\n+   \"Expected a function expression.\",\n+   \"Function 'objectEqual' has too many lines (25). Maximum allowed is 15.\",\n+   \"Identifier 'array_1' is not in camel case.\",\n+   \"'array_1' is never reassigned. Use 'const' instead.\",\n+   \"Identifier 'array_2' is not in camel case.\",\n+   \"'array_2' is never reassigned. Use 'const' instead.\",\n+   \"Identifier 'array_1' is not in camel case.\",\n+   \"Expected '!==' and instead saw '!='.\",\n+   \"Identifier 'array_2' is not in camel case.\",\n+   \"Identifier 'array_1' is not in camel case.\",\n+   \"Identifier 'array_2' is not in camel case.\",\n+   \"Identifier 'array_1' is not in camel case.\",\n+   \"Identifier 'array_2' is not in camel case.\",\n+   \"Identifier 'array_1' is not in camel case.\",\n+   \"Identifier 'array_2' is not in camel case.\",\n+   \"Identifier 'array_1' is not in camel case.\",\n+   \"Identifier 'array_2' is not in camel case.\",\n+   \"Identifier 'array_1' is not in camel case.\",\n+   \"Identifier 'array_2' is not in camel case.\",\n+   \"Expected '===' and instead saw '=='.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 23\n\n- Array []\n+ Array [\n+   \"'objectEqual' was used before it was defined.\",\n+   \"Expected a function expression.\",\n+   \"Function 'objectEqual' has too many lines (25). Maximum allowed is 15.\",\n+   \"Identifier 'array_1' is not in camel case.\",\n+   \"'array_1' is never reassigned. Use 'const' instead.\",\n+   \"Identifier 'array_2' is not in camel case.\",\n+   \"'array_2' is never reassigned. Use 'const' instead.\",\n+   \"Identifier 'array_1' is not in camel case.\",\n+   \"Expected '!==' and instead saw '!='.\",\n+   \"Identifier 'array_2' is not in camel case.\",\n+   \"Identifier 'array_1' is not in camel case.\",\n+   \"Identifier 'array_2' is not in camel case.\",\n+   \"Identifier 'array_1' is not in camel case.\",\n+   \"Identifier 'array_2' is not in camel case.\",\n+   \"Identifier 'array_1' is not in camel case.\",\n+   \"Identifier 'array_2' is not in camel case.\",\n+   \"Identifier 'array_1' is not in camel case.\",\n+   \"Identifier 'array_2' is not in camel case.\",\n+   \"Identifier 'array_1' is not in camel case.\",\n+   \"Identifier 'array_2' is not in camel case.\",\n+   \"Expected '===' and instead saw '=='.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS nithindenkada object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","nithish-29","even_odd"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["JS-AOFS","nithish-29","even_odd"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["JS-AOFS","nithish-29","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["JS-AOFS","nithish-29","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["JS-AOFS","nithish-29","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["JS-AOFS","nithish-29","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["JS-AOFS","nithish-29","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["JS-AOFS","nithish-29","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["JS-AOFS","nithish-29","even_odd"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","nithish-29","categorise"],"duration":2,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:43\n        const arr = [number[search]];\n                     ^\n\nReferenceError: number is not defined\n    at categorise (evalmachine.<anonymous>:43:22)\n    at evalmachine.<anonymous>:54:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)"],"fullName":"JS-AOFS nithish-29 categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["JS-AOFS","nithish-29","categorise"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:43\n        const arr = [number[search]];\n                     ^\n\nReferenceError: number is not defined\n    at categorise (evalmachine.<anonymous>:43:22)\n    at evalmachine.<anonymous>:54:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)"],"fullName":"JS-AOFS nithish-29 categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["JS-AOFS","nithish-29","categorise"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:43\n        const arr = [number[search]];\n                     ^\n\nReferenceError: number is not defined\n    at categorise (evalmachine.<anonymous>:43:22)\n    at evalmachine.<anonymous>:54:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)"],"fullName":"JS-AOFS nithish-29 categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["JS-AOFS","nithish-29","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["JS-AOFS","nithish-29","categorise"],"duration":0,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:43\n        const arr = [number[search]];\n                     ^\n\nReferenceError: number is not defined\n    at categorise (evalmachine.<anonymous>:43:22)\n    at evalmachine.<anonymous>:54:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)"],"fullName":"JS-AOFS nithish-29 categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["JS-AOFS","nithish-29","categorise"],"duration":0,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:43\n        const arr = [number[search]];\n                     ^\n\nReferenceError: number is not defined\n    at categorise (evalmachine.<anonymous>:43:22)\n    at evalmachine.<anonymous>:54:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)"],"fullName":"JS-AOFS nithish-29 categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["JS-AOFS","nithish-29","categorise"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:43\n        const arr = [number[search]];\n                     ^\n\nReferenceError: number is not defined\n    at categorise (evalmachine.<anonymous>:43:22)\n    at evalmachine.<anonymous>:54:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)"],"fullName":"JS-AOFS nithish-29 categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["JS-AOFS","nithish-29","categorise"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:43\n        const arr = [number[search]];\n                     ^\n\nReferenceError: number is not defined\n    at categorise (evalmachine.<anonymous>:43:22)\n    at evalmachine.<anonymous>:54:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)"],"fullName":"JS-AOFS nithish-29 categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["JS-AOFS","nithish-29","categorise"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:43\n        const arr = [number[search]];\n                     ^\n\nReferenceError: number is not defined\n    at categorise (evalmachine.<anonymous>:43:22)\n    at evalmachine.<anonymous>:54:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)"],"fullName":"JS-AOFS nithish-29 categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["JS-AOFS","nithish-29","categorise"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:43\n        const arr = [number[search]];\n                     ^\n\nReferenceError: number is not defined\n    at categorise (evalmachine.<anonymous>:43:22)\n    at evalmachine.<anonymous>:54:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)"],"fullName":"JS-AOFS nithish-29 categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["JS-AOFS","nithish-29","categorise"],"duration":10,"failureDetails":[{"matcherResult":{"actual":["Assignment to function parameter 'numbers'."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Assignment to function parameter 'numbers'.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Assignment to function parameter 'numbers'.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS nithish-29 categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","nithish-29","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["JS-AOFS","nithish-29","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["JS-AOFS","nithish-29","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["JS-AOFS","nithish-29","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["JS-AOFS","nithish-29","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["JS-AOFS","nithish-29","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["JS-AOFS","nithish-29","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["JS-AOFS","nithish-29","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["JS-AOFS","nithish-29","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["JS-AOFS","nithish-29","entries"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","nithish-29","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["JS-AOFS","nithish-29","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["JS-AOFS","nithish-29","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["JS-AOFS","nithish-29","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["JS-AOFS","nithish-29","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["JS-AOFS","nithish-29","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["JS-AOFS","nithish-29","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["JS-AOFS","nithish-29","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["JS-AOFS","nithish-29","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["JS-AOFS","nithish-29","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["JS-AOFS","nithish-29","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["JS-AOFS","nithish-29","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["JS-AOFS","nithish-29","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["JS-AOFS","nithish-29","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["JS-AOFS","nithish-29","remove_adjacent_spaces"],"duration":5,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (16). Maximum allowed is 15."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Function has too many lines (16). Maximum allowed is 15.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Function has too many lines (16). Maximum allowed is 15.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS nithish-29 remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","nithish-29","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["JS-AOFS","nithish-29","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["JS-AOFS","nithish-29","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["JS-AOFS","nithish-29","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["JS-AOFS","nithish-29","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["JS-AOFS","nithish-29","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["JS-AOFS","nithish-29","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["JS-AOFS","nithish-29","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["JS-AOFS","nithish-29","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["JS-AOFS","nithish-29","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["JS-AOFS","nithish-29","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["JS-AOFS","nithish-29","tribonacci"],"duration":7,"failureDetails":[{"matcherResult":{"actual":["Assignment to function parameter 'firstNum'.","Assignment to function parameter 'secondNum'.","Assignment to function parameter 'thridNum'."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Assignment to function parameter 'firstNum'.\",\n+   \"Assignment to function parameter 'secondNum'.\",\n+   \"Assignment to function parameter 'thridNum'.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Assignment to function parameter 'firstNum'.\",\n+   \"Assignment to function parameter 'secondNum'.\",\n+   \"Assignment to function parameter 'thridNum'.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS nithish-29 tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","nithish-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","nithish-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["JS-AOFS","nithish-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["JS-AOFS","nithish-29","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["JS-AOFS","nithish-29","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","nithish-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","nithish-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","nithish-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["JS-AOFS","nithish-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","nithish-29","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["JS-AOFS","nithish-29","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","nithish-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","nithish-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","nithish-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","nithish-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","nithish-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["JS-AOFS","nithish-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["JS-AOFS","nithish-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","nithish-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["JS-AOFS","nithish-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["JS-AOFS","nithish-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["JS-AOFS","nithish-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["JS-AOFS","nithish-29","array_equals"],"duration":11,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (28). Maximum allowed is 15.","Unnecessary 'else' after 'return'."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Function has too many lines (28). Maximum allowed is 15.\",\n+   \"Unnecessary 'else' after 'return'.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Function has too many lines (28). Maximum allowed is 15.\",\n+   \"Unnecessary 'else' after 'return'.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS nithish-29 array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","nithish-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","nithish-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","nithish-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","nithish-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","nithish-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","nithish-29","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","nithish-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","nithish-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","nithish-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","nithish-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["JS-AOFS","nithish-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","nithish-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","nithish-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["JS-AOFS","nithish-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["JS-AOFS","nithish-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["JS-AOFS","nithish-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["JS-AOFS","nithish-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS nithish-29 object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["JS-AOFS","nithish-29","object_equals"],"duration":8,"failureDetails":[{"matcherResult":{"actual":["'equalObjects' was used before it was defined.","'equal' is assigned a value but never used.","'equal' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"'equalObjects' was used before it was defined.\",\n+   \"'equal' is assigned a value but never used.\",\n+   \"'equal' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"'equalObjects' was used before it was defined.\",\n+   \"'equal' is assigned a value but never used.\",\n+   \"'equal' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS nithish-29 object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","omkardalu","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["JS-AOFS","omkardalu","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["JS-AOFS","omkardalu","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["JS-AOFS","omkardalu","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["JS-AOFS","omkardalu","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["JS-AOFS","omkardalu","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["JS-AOFS","omkardalu","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["JS-AOFS","omkardalu","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["JS-AOFS","omkardalu","even_odd"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","omkardalu","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["JS-AOFS","omkardalu","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["JS-AOFS","omkardalu","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["JS-AOFS","omkardalu","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["JS-AOFS","omkardalu","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["JS-AOFS","omkardalu","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["JS-AOFS","omkardalu","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["JS-AOFS","omkardalu","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["JS-AOFS","omkardalu","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["JS-AOFS","omkardalu","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["JS-AOFS","omkardalu","categorise"],"duration":6,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (17). Maximum allowed is 15."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Function has too many lines (17). Maximum allowed is 15.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Function has too many lines (17). Maximum allowed is 15.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS omkardalu categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","omkardalu","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["JS-AOFS","omkardalu","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["JS-AOFS","omkardalu","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["JS-AOFS","omkardalu","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["JS-AOFS","omkardalu","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["JS-AOFS","omkardalu","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["JS-AOFS","omkardalu","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["JS-AOFS","omkardalu","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["JS-AOFS","omkardalu","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["JS-AOFS","omkardalu","entries"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","omkardalu","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["JS-AOFS","omkardalu","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["JS-AOFS","omkardalu","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["JS-AOFS","omkardalu","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["JS-AOFS","omkardalu","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["JS-AOFS","omkardalu","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["JS-AOFS","omkardalu","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["JS-AOFS","omkardalu","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["JS-AOFS","omkardalu","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["JS-AOFS","omkardalu","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["JS-AOFS","omkardalu","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["JS-AOFS","omkardalu","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["JS-AOFS","omkardalu","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["JS-AOFS","omkardalu","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["JS-AOFS","omkardalu","remove_adjacent_spaces"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","omkardalu","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["JS-AOFS","omkardalu","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["JS-AOFS","omkardalu","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["JS-AOFS","omkardalu","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["JS-AOFS","omkardalu","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["JS-AOFS","omkardalu","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["JS-AOFS","omkardalu","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["JS-AOFS","omkardalu","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["JS-AOFS","omkardalu","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["JS-AOFS","omkardalu","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["JS-AOFS","omkardalu","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["JS-AOFS","omkardalu","tribonacci"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (23). Maximum allowed is 15.","Unnecessary 'else' after 'return'."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Function has too many lines (23). Maximum allowed is 15.\",\n+   \"Unnecessary 'else' after 'return'.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Function has too many lines (23). Maximum allowed is 15.\",\n+   \"Unnecessary 'else' after 'return'.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS omkardalu tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","omkardalu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","omkardalu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["JS-AOFS","omkardalu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["JS-AOFS","omkardalu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["JS-AOFS","omkardalu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","omkardalu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","omkardalu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","omkardalu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["JS-AOFS","omkardalu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","omkardalu","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["JS-AOFS","omkardalu","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","omkardalu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","omkardalu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","omkardalu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","omkardalu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","omkardalu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["JS-AOFS","omkardalu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["JS-AOFS","omkardalu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","omkardalu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["JS-AOFS","omkardalu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["JS-AOFS","omkardalu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["JS-AOFS","omkardalu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["JS-AOFS","omkardalu","array_equals"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","omkardalu","object_equals"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","omkardalu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","omkardalu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","omkardalu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","omkardalu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","omkardalu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","omkardalu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","omkardalu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","omkardalu","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","omkardalu","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["JS-AOFS","omkardalu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","omkardalu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","omkardalu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["JS-AOFS","omkardalu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["JS-AOFS","omkardalu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["JS-AOFS","omkardalu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["JS-AOFS","omkardalu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["JS-AOFS","omkardalu","object_equals"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS omkardalu object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","even_odd"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","even_odd"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","categorise"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","entries"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","entries"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","remove_adjacent_spaces"],"duration":1,"failureDetails":[{"matcherResult":{"actual":["Leading spaces!!! & Trailing Spaces!!! "],"expected":["Leading spaces!!! & Trailing Spaces!!!"],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   \"Leading spaces!!! & Trailing Spaces!!!\",\n+   \"Leading spaces!!! & Trailing Spaces!!! \",\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   \"Leading spaces!!! & Trailing Spaces!!!\",\n+   \"Leading spaces!!! & Trailing Spaces!!! \",\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS sampathkumarreddy123 remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","remove_adjacent_spaces"],"duration":1,"failureDetails":[{"matcherResult":{"actual":["Trailing Spaces!!! "],"expected":["Trailing Spaces!!!"],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   \"Trailing Spaces!!!\",\n+   \"Trailing Spaces!!! \",\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   \"Trailing Spaces!!!\",\n+   \"Trailing Spaces!!! \",\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS sampathkumarreddy123 remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","remove_adjacent_spaces"],"duration":1,"failureDetails":[{"matcherResult":{"actual":["こんにちは 世界 "],"expected":["こんにちは 世界"],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   \"こんにちは 世界\",\n+   \"こんにちは 世界 \",\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   \"こんにちは 世界\",\n+   \"こんにちは 世界 \",\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS sampathkumarreddy123 remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","remove_adjacent_spaces"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","tribonacci"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","array_equals"],"duration":9,"failureDetails":[{"matcherResult":{"actual":["Arrow function has too many lines (19). Maximum allowed is 15."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (19). Maximum allowed is 15.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (19). Maximum allowed is 15.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS sampathkumarreddy123 array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","object_equals"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","object_equals"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","object_equals"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sampathkumarreddy123 object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["JS-AOFS","sampathkumarreddy123","object_equals"],"duration":5,"failureDetails":[{"matcherResult":{"actual":["Arrow function has too many lines (20). Maximum allowed is 15."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (20). Maximum allowed is 15.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (20). Maximum allowed is 15.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS sampathkumarreddy123 object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","siriBaratam","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["JS-AOFS","siriBaratam","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["JS-AOFS","siriBaratam","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["JS-AOFS","siriBaratam","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["JS-AOFS","siriBaratam","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["JS-AOFS","siriBaratam","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["JS-AOFS","siriBaratam","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["JS-AOFS","siriBaratam","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["JS-AOFS","siriBaratam","even_odd"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","siriBaratam","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["JS-AOFS","siriBaratam","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["JS-AOFS","siriBaratam","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["JS-AOFS","siriBaratam","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["JS-AOFS","siriBaratam","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["JS-AOFS","siriBaratam","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["JS-AOFS","siriBaratam","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["JS-AOFS","siriBaratam","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["JS-AOFS","siriBaratam","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["JS-AOFS","siriBaratam","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["JS-AOFS","siriBaratam","categorise"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","siriBaratam","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["JS-AOFS","siriBaratam","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["JS-AOFS","siriBaratam","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["JS-AOFS","siriBaratam","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["JS-AOFS","siriBaratam","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["JS-AOFS","siriBaratam","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["JS-AOFS","siriBaratam","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["JS-AOFS","siriBaratam","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["JS-AOFS","siriBaratam","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["JS-AOFS","siriBaratam","entries"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","siriBaratam","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["JS-AOFS","siriBaratam","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["JS-AOFS","siriBaratam","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["JS-AOFS","siriBaratam","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["JS-AOFS","siriBaratam","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["JS-AOFS","siriBaratam","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["JS-AOFS","siriBaratam","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["JS-AOFS","siriBaratam","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["JS-AOFS","siriBaratam","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["JS-AOFS","siriBaratam","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["JS-AOFS","siriBaratam","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["JS-AOFS","siriBaratam","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["JS-AOFS","siriBaratam","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["JS-AOFS","siriBaratam","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["JS-AOFS","siriBaratam","remove_adjacent_spaces"],"duration":45,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (24). Maximum allowed is 15."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Function has too many lines (24). Maximum allowed is 15.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Function has too many lines (24). Maximum allowed is 15.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS siriBaratam remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","siriBaratam","tribonacci"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["JS-AOFS","siriBaratam","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["JS-AOFS","siriBaratam","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["JS-AOFS","siriBaratam","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["JS-AOFS","siriBaratam","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["JS-AOFS","siriBaratam","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["JS-AOFS","siriBaratam","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["JS-AOFS","siriBaratam","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["JS-AOFS","siriBaratam","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["JS-AOFS","siriBaratam","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["JS-AOFS","siriBaratam","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["JS-AOFS","siriBaratam","tribonacci"],"duration":29,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","siriBaratam","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","siriBaratam","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["JS-AOFS","siriBaratam","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["JS-AOFS","siriBaratam","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["JS-AOFS","siriBaratam","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","siriBaratam","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","siriBaratam","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","siriBaratam","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["JS-AOFS","siriBaratam","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","siriBaratam","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["JS-AOFS","siriBaratam","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","siriBaratam","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","siriBaratam","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","siriBaratam","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","siriBaratam","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","siriBaratam","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["JS-AOFS","siriBaratam","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["JS-AOFS","siriBaratam","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","siriBaratam","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["JS-AOFS","siriBaratam","array_equals"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["JS-AOFS","siriBaratam","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["JS-AOFS","siriBaratam","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["JS-AOFS","siriBaratam","array_equals"],"duration":7,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (23). Maximum allowed is 15."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Function has too many lines (23). Maximum allowed is 15.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Function has too many lines (23). Maximum allowed is 15.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS siriBaratam array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","siriBaratam","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","siriBaratam","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","siriBaratam","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","siriBaratam","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","siriBaratam","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","siriBaratam","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","siriBaratam","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","siriBaratam","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","siriBaratam","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","siriBaratam","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["JS-AOFS","siriBaratam","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","siriBaratam","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","siriBaratam","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["JS-AOFS","siriBaratam","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["JS-AOFS","siriBaratam","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["JS-AOFS","siriBaratam","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["JS-AOFS","siriBaratam","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS siriBaratam object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["JS-AOFS","siriBaratam","object_equals"],"duration":5,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (28). Maximum allowed is 15.","'firstInnerObject' is never reassigned. Use 'const' instead.","'secondInnerObject' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Function has too many lines (28). Maximum allowed is 15.\",\n+   \"'firstInnerObject' is never reassigned. Use 'const' instead.\",\n+   \"'secondInnerObject' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Function has too many lines (28). Maximum allowed is 15.\",\n+   \"'firstInnerObject' is never reassigned. Use 'const' instead.\",\n+   \"'secondInnerObject' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS siriBaratam object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","sohan-29","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["JS-AOFS","sohan-29","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["JS-AOFS","sohan-29","even_odd"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["JS-AOFS","sohan-29","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["JS-AOFS","sohan-29","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["JS-AOFS","sohan-29","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["JS-AOFS","sohan-29","even_odd"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["JS-AOFS","sohan-29","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["JS-AOFS","sohan-29","even_odd"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["'numbers' is never reassigned. Use 'const' instead.","Expected a function expression.","'numbers' is already declared in the upper scope on line 19 column 5.","'even' is never reassigned. Use 'const' instead.","'odd' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 7\n\n- Array []\n+ Array [\n+   \"'numbers' is never reassigned. Use 'const' instead.\",\n+   \"Expected a function expression.\",\n+   \"'numbers' is already declared in the upper scope on line 19 column 5.\",\n+   \"'even' is never reassigned. Use 'const' instead.\",\n+   \"'odd' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 7\n\n- Array []\n+ Array [\n+   \"'numbers' is never reassigned. Use 'const' instead.\",\n+   \"Expected a function expression.\",\n+   \"'numbers' is already declared in the upper scope on line 19 column 5.\",\n+   \"'even' is never reassigned. Use 'const' instead.\",\n+   \"'odd' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS sohan-29 even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","sohan-29","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["JS-AOFS","sohan-29","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["JS-AOFS","sohan-29","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["JS-AOFS","sohan-29","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["JS-AOFS","sohan-29","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["JS-AOFS","sohan-29","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["JS-AOFS","sohan-29","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["JS-AOFS","sohan-29","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["JS-AOFS","sohan-29","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["JS-AOFS","sohan-29","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["JS-AOFS","sohan-29","categorise"],"duration":8,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'sortAndGroup' has too many lines (16). Maximum allowed is 15.","'list' is already declared in the upper scope on line 27 column 7.","'sort' was used before it was defined.","Expected a function expression.","'list' is already declared in the upper scope on line 27 column 7."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 8\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'sortAndGroup' has too many lines (16). Maximum allowed is 15.\",\n+   \"'list' is already declared in the upper scope on line 27 column 7.\",\n+   \"'sort' was used before it was defined.\",\n+   \"Expected a function expression.\",\n+   \"'list' is already declared in the upper scope on line 27 column 7.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 8\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'sortAndGroup' has too many lines (16). Maximum allowed is 15.\",\n+   \"'list' is already declared in the upper scope on line 27 column 7.\",\n+   \"'sort' was used before it was defined.\",\n+   \"Expected a function expression.\",\n+   \"'list' is already declared in the upper scope on line 27 column 7.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS sohan-29 categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","sohan-29","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["JS-AOFS","sohan-29","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["JS-AOFS","sohan-29","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["JS-AOFS","sohan-29","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["JS-AOFS","sohan-29","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["JS-AOFS","sohan-29","entries"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["JS-AOFS","sohan-29","entries"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["JS-AOFS","sohan-29","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["JS-AOFS","sohan-29","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["JS-AOFS","sohan-29","entries"],"duration":5,"failureDetails":[{"matcherResult":{"actual":["'objects' is never reassigned. Use 'const' instead.","Expected a function expression.","'objects' is already declared in the upper scope on line 24 column 5."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"'objects' is never reassigned. Use 'const' instead.\",\n+   \"Expected a function expression.\",\n+   \"'objects' is already declared in the upper scope on line 24 column 5.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"'objects' is never reassigned. Use 'const' instead.\",\n+   \"Expected a function expression.\",\n+   \"'objects' is already declared in the upper scope on line 24 column 5.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS sohan-29 entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","sohan-29","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["JS-AOFS","sohan-29","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["JS-AOFS","sohan-29","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["JS-AOFS","sohan-29","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["JS-AOFS","sohan-29","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["JS-AOFS","sohan-29","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["JS-AOFS","sohan-29","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["JS-AOFS","sohan-29","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["JS-AOFS","sohan-29","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["JS-AOFS","sohan-29","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["JS-AOFS","sohan-29","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["JS-AOFS","sohan-29","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["JS-AOFS","sohan-29","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["JS-AOFS","sohan-29","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["JS-AOFS","sohan-29","remove_adjacent_spaces"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Expected { after 'if' condition.","Unexpected use of continue statement.","Expected { after 'if' condition.","Unexpected use of continue statement."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 7\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Expected { after 'if' condition.\",\n+   \"Unexpected use of continue statement.\",\n+   \"Expected { after 'if' condition.\",\n+   \"Unexpected use of continue statement.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 7\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Expected { after 'if' condition.\",\n+   \"Unexpected use of continue statement.\",\n+   \"Expected { after 'if' condition.\",\n+   \"Unexpected use of continue statement.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS sohan-29 remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","sohan-29","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["JS-AOFS","sohan-29","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["JS-AOFS","sohan-29","tribonacci"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["JS-AOFS","sohan-29","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["JS-AOFS","sohan-29","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["JS-AOFS","sohan-29","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["JS-AOFS","sohan-29","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["JS-AOFS","sohan-29","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["JS-AOFS","sohan-29","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["JS-AOFS","sohan-29","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["JS-AOFS","sohan-29","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["JS-AOFS","sohan-29","tribonacci"],"duration":3,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","'ENDING_RANGE' is already declared in the upper scope on line 3 column 7.","'firstNumber' is already declared in the upper scope on line 24 column 7.","'secondNumber' is already declared in the upper scope on line 24 column 24.","'thirdNumber' is already declared in the upper scope on line 24 column 42."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 7\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"'ENDING_RANGE' is already declared in the upper scope on line 3 column 7.\",\n+   \"'firstNumber' is already declared in the upper scope on line 24 column 7.\",\n+   \"'secondNumber' is already declared in the upper scope on line 24 column 24.\",\n+   \"'thirdNumber' is already declared in the upper scope on line 24 column 42.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 7\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"'ENDING_RANGE' is already declared in the upper scope on line 3 column 7.\",\n+   \"'firstNumber' is already declared in the upper scope on line 24 column 7.\",\n+   \"'secondNumber' is already declared in the upper scope on line 24 column 24.\",\n+   \"'thirdNumber' is already declared in the upper scope on line 24 column 42.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS sohan-29 tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","sohan-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","sohan-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["JS-AOFS","sohan-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["JS-AOFS","sohan-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["JS-AOFS","sohan-29","array_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[null],"expected":[true],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   true,\n+   undefined,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   true,\n+   undefined,\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS sohan-29 array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","sohan-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","sohan-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","sohan-29","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["JS-AOFS","sohan-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","sohan-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["JS-AOFS","sohan-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","sohan-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","sohan-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","sohan-29","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","sohan-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","sohan-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["JS-AOFS","sohan-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["JS-AOFS","sohan-29","array_equals"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","sohan-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["JS-AOFS","sohan-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["JS-AOFS","sohan-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["JS-AOFS","sohan-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["JS-AOFS","sohan-29","array_equals"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'isEqual' has too many lines (22). Maximum allowed is 15.","Expected { after 'if' condition.","Expected { after 'if' condition.","Expected { after 'if' condition.","Expected { after 'else'."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 8\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'isEqual' has too many lines (22). Maximum allowed is 15.\",\n+   \"Expected { after 'if' condition.\",\n+   \"Expected { after 'if' condition.\",\n+   \"Expected { after 'if' condition.\",\n+   \"Expected { after 'else'.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 8\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'isEqual' has too many lines (22). Maximum allowed is 15.\",\n+   \"Expected { after 'if' condition.\",\n+   \"Expected { after 'if' condition.\",\n+   \"Expected { after 'if' condition.\",\n+   \"Expected { after 'else'.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS sohan-29 array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","sohan-29","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","sohan-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","sohan-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","sohan-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","sohan-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","sohan-29","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","sohan-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","sohan-29","object_equals"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","sohan-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","sohan-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["JS-AOFS","sohan-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","sohan-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","sohan-29","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["JS-AOFS","sohan-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["JS-AOFS","sohan-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["JS-AOFS","sohan-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["JS-AOFS","sohan-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS sohan-29 object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["JS-AOFS","sohan-29","object_equals"],"duration":4,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression.","Function 'isEqual' has too many lines (21). Maximum allowed is 15.","Expected { after 'if' condition.","Expected { after 'if' condition.","Expected { after 'if' condition."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 7\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'isEqual' has too many lines (21). Maximum allowed is 15.\",\n+   \"Expected { after 'if' condition.\",\n+   \"Expected { after 'if' condition.\",\n+   \"Expected { after 'if' condition.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 7\n\n- Array []\n+ Array [\n+   \"Expected a function expression.\",\n+   \"Function 'isEqual' has too many lines (21). Maximum allowed is 15.\",\n+   \"Expected { after 'if' condition.\",\n+   \"Expected { after 'if' condition.\",\n+   \"Expected { after 'if' condition.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS sohan-29 object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","even_odd"],"duration":1586,"failureDetails":[{}],"failureMessages":["Error: Code ran more than 1.5 seconds. Please optimise your code or make sure to not have any INFINITE LOOPS\n    at Object.<anonymous> (/home/runner/work/test-suite/test-suite/test/test.js:42:25)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS suneethalokarapu even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","even_odd"],"duration":1614,"failureDetails":[{}],"failureMessages":["Error: Code ran more than 1.5 seconds. Please optimise your code or make sure to not have any INFINITE LOOPS\n    at Object.<anonymous> (/home/runner/work/test-suite/test-suite/test/test.js:42:25)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS suneethalokarapu even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","even_odd"],"duration":1502,"failureDetails":[{}],"failureMessages":["Error: Code ran more than 1.5 seconds. Please optimise your code or make sure to not have any INFINITE LOOPS\n    at Object.<anonymous> (/home/runner/work/test-suite/test-suite/test/test.js:42:25)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS suneethalokarapu even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","even_odd"],"duration":1628,"failureDetails":[{}],"failureMessages":["Error: Code ran more than 1.5 seconds. Please optimise your code or make sure to not have any INFINITE LOOPS\n    at Object.<anonymous> (/home/runner/work/test-suite/test-suite/test/test.js:42:25)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS suneethalokarapu even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","even_odd"],"duration":1533,"failureDetails":[{}],"failureMessages":["Error: Code ran more than 1.5 seconds. Please optimise your code or make sure to not have any INFINITE LOOPS\n    at Object.<anonymous> (/home/runner/work/test-suite/test-suite/test/test.js:42:25)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS suneethalokarapu even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","even_odd"],"duration":1506,"failureDetails":[{}],"failureMessages":["Error: Code ran more than 1.5 seconds. Please optimise your code or make sure to not have any INFINITE LOOPS\n    at Object.<anonymous> (/home/runner/work/test-suite/test-suite/test/test.js:42:25)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS suneethalokarapu even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","even_odd"],"duration":1572,"failureDetails":[{}],"failureMessages":["Error: Code ran more than 1.5 seconds. Please optimise your code or make sure to not have any INFINITE LOOPS\n    at Object.<anonymous> (/home/runner/work/test-suite/test-suite/test/test.js:42:25)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS suneethalokarapu even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","even_odd"],"duration":1502,"failureDetails":[{}],"failureMessages":["Error: Code ran more than 1.5 seconds. Please optimise your code or make sure to not have any INFINITE LOOPS\n    at Object.<anonymous> (/home/runner/work/test-suite/test-suite/test/test.js:42:25)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS suneethalokarapu even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","even_odd"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","categorise"],"duration":7,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (27). Maximum allowed is 15.","'NUMBERS' is already declared in the upper scope on line 2 column 7.","'result' is never reassigned. Use 'const' instead.","'temp' is never reassigned. Use 'const' instead."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Function has too many lines (27). Maximum allowed is 15.\",\n+   \"'NUMBERS' is already declared in the upper scope on line 2 column 7.\",\n+   \"'result' is never reassigned. Use 'const' instead.\",\n+   \"'temp' is never reassigned. Use 'const' instead.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Function has too many lines (27). Maximum allowed is 15.\",\n+   \"'NUMBERS' is already declared in the upper scope on line 2 column 7.\",\n+   \"'result' is never reassigned. Use 'const' instead.\",\n+   \"'temp' is never reassigned. Use 'const' instead.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS suneethalokarapu categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","entries"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","remove_adjacent_spaces"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","remove_adjacent_spaces"],"duration":6,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (16). Maximum allowed is 15.","Unexpected use of continue statement."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Function has too many lines (16). Maximum allowed is 15.\",\n+   \"Unexpected use of continue statement.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Function has too many lines (16). Maximum allowed is 15.\",\n+   \"Unexpected use of continue statement.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS suneethalokarapu remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","tribonacci"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","tribonacci"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","array_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[true],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"JS-AOFS suneethalokarapu array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","array_equals"],"duration":29,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","array_equals"],"duration":16,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","array_equals"],"duration":19,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","array_equals"],"duration":10,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (20). Maximum allowed is 15.","'res' is never reassigned. Use 'const' instead.","Unexpected use of continue statement."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Function has too many lines (20). Maximum allowed is 15.\",\n+   \"'res' is never reassigned. Use 'const' instead.\",\n+   \"Unexpected use of continue statement.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Function has too many lines (20). Maximum allowed is 15.\",\n+   \"'res' is never reassigned. Use 'const' instead.\",\n+   \"Unexpected use of continue statement.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS suneethalokarapu array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS suneethalokarapu object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["JS-AOFS","suneethalokarapu","object_equals"],"duration":7,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (21). Maximum allowed is 15.","'res' is never reassigned. Use 'const' instead.","'keys1' is never reassigned. Use 'const' instead.","'keys2' is never reassigned. Use 'const' instead.","'key' is never reassigned. Use 'const' instead.","Unexpected use of continue statement."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 8\n\n- Array []\n+ Array [\n+   \"Function has too many lines (21). Maximum allowed is 15.\",\n+   \"'res' is never reassigned. Use 'const' instead.\",\n+   \"'keys1' is never reassigned. Use 'const' instead.\",\n+   \"'keys2' is never reassigned. Use 'const' instead.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"Unexpected use of continue statement.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 8\n\n- Array []\n+ Array [\n+   \"Function has too many lines (21). Maximum allowed is 15.\",\n+   \"'res' is never reassigned. Use 'const' instead.\",\n+   \"'keys1' is never reassigned. Use 'const' instead.\",\n+   \"'keys2' is never reassigned. Use 'const' instead.\",\n+   \"'key' is never reassigned. Use 'const' instead.\",\n+   \"Unexpected use of continue statement.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS suneethalokarapu object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","umarfarook07","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["JS-AOFS","umarfarook07","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["JS-AOFS","umarfarook07","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["JS-AOFS","umarfarook07","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["JS-AOFS","umarfarook07","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["JS-AOFS","umarfarook07","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["JS-AOFS","umarfarook07","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["JS-AOFS","umarfarook07","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["JS-AOFS","umarfarook07","even_odd"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","umarfarook07","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["JS-AOFS","umarfarook07","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["JS-AOFS","umarfarook07","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["JS-AOFS","umarfarook07","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["JS-AOFS","umarfarook07","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["JS-AOFS","umarfarook07","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["JS-AOFS","umarfarook07","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["JS-AOFS","umarfarook07","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["JS-AOFS","umarfarook07","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["JS-AOFS","umarfarook07","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["JS-AOFS","umarfarook07","categorise"],"duration":10,"failureDetails":[{"matcherResult":{"actual":["Assignment to function parameter 'currentGroup'."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Assignment to function parameter 'currentGroup'.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Assignment to function parameter 'currentGroup'.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS umarfarook07 categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","umarfarook07","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["JS-AOFS","umarfarook07","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["JS-AOFS","umarfarook07","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["JS-AOFS","umarfarook07","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["JS-AOFS","umarfarook07","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["JS-AOFS","umarfarook07","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["JS-AOFS","umarfarook07","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["JS-AOFS","umarfarook07","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["JS-AOFS","umarfarook07","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["JS-AOFS","umarfarook07","entries"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","umarfarook07","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["JS-AOFS","umarfarook07","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["JS-AOFS","umarfarook07","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["JS-AOFS","umarfarook07","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["JS-AOFS","umarfarook07","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["JS-AOFS","umarfarook07","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["JS-AOFS","umarfarook07","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["JS-AOFS","umarfarook07","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["JS-AOFS","umarfarook07","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["JS-AOFS","umarfarook07","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["JS-AOFS","umarfarook07","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["JS-AOFS","umarfarook07","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["JS-AOFS","umarfarook07","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["JS-AOFS","umarfarook07","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["JS-AOFS","umarfarook07","remove_adjacent_spaces"],"duration":7,"failureDetails":[{"matcherResult":{"actual":["Arrow function has too many lines (21). Maximum allowed is 15."],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (21). Maximum allowed is 15.\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (21). Maximum allowed is 15.\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:61:30)"],"fullName":"JS-AOFS umarfarook07 remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","umarfarook07","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["JS-AOFS","umarfarook07","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["JS-AOFS","umarfarook07","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["JS-AOFS","umarfarook07","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["JS-AOFS","umarfarook07","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["JS-AOFS","umarfarook07","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["JS-AOFS","umarfarook07","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["JS-AOFS","umarfarook07","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["JS-AOFS","umarfarook07","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["JS-AOFS","umarfarook07","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["JS-AOFS","umarfarook07","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["JS-AOFS","umarfarook07","tribonacci"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","umarfarook07","array_equals"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","umarfarook07","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["JS-AOFS","umarfarook07","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["JS-AOFS","umarfarook07","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["JS-AOFS","umarfarook07","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","umarfarook07","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["JS-AOFS","umarfarook07","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","umarfarook07","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["JS-AOFS","umarfarook07","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","umarfarook07","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["JS-AOFS","umarfarook07","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["JS-AOFS","umarfarook07","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","umarfarook07","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","umarfarook07","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["JS-AOFS","umarfarook07","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["JS-AOFS","umarfarook07","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["JS-AOFS","umarfarook07","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["JS-AOFS","umarfarook07","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["JS-AOFS","umarfarook07","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["JS-AOFS","umarfarook07","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["JS-AOFS","umarfarook07","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["JS-AOFS","umarfarook07","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["JS-AOFS","umarfarook07","array_equals"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["JS-AOFS","umarfarook07","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","umarfarook07","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","umarfarook07","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","umarfarook07","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","umarfarook07","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["JS-AOFS","umarfarook07","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","umarfarook07","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["JS-AOFS","umarfarook07","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","umarfarook07","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["JS-AOFS","umarfarook07","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["JS-AOFS","umarfarook07","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","umarfarook07","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["JS-AOFS","umarfarook07","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["JS-AOFS","umarfarook07","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["JS-AOFS","umarfarook07","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["JS-AOFS","umarfarook07","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["JS-AOFS","umarfarook07","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["JS-AOFS","umarfarook07","object_equals"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"JS-AOFS umarfarook07 object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"}],"endTime":1724310593482,"message":"  ● JS-AOFS › Amarendra7062 › even_odd › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"'result' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Amarendra7062 › categorise › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 6\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'categorizeAndSort' has too many lines (32). Maximum allowed is 15.\",\n    +   \"'result' is never reassigned. Use 'const' instead.\",\n    +   \"'temp' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Amarendra7062 › entries › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 9\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'objectEntries' has too many lines (16). Maximum allowed is 15.\",\n    +   \"'result' is never reassigned. Use 'const' instead.\",\n    +   \"'keys' is never reassigned. Use 'const' instead.\",\n    +   \"'key' is never reassigned. Use 'const' instead.\",\n    +   \"'key' is never reassigned. Use 'const' instead.\",\n    +   \"'value' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Amarendra7062 › remove_adjacent_spaces › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  -  1\n    + Received  + 10\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'removeAdjacentSpaces' has too many lines (35). Maximum allowed is 15.\",\n    +   \"'char' is never reassigned. Use 'const' instead.\",\n    +   \"Identifier 'text_1' is not in camel case.\",\n    +   \"Identifier 'text_1' is not in camel case.\",\n    +   \"Identifier 'text_1' is not in camel case.\",\n    +   \"Identifier 'text_1' is not in camel case.\",\n    +   \"Identifier 'text_1' is not in camel case.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Amarendra7062 › tribonacci › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Expected { after 'if' condition.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Amarendra7062 › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  -  1\n    + Received  + 21\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'array_Equal' has too many lines (24). Maximum allowed is 15.\",\n    +   \"Identifier 'array_Equal' is not in camel case.\",\n    +   \"Identifier 'boolean_Array_1' is not in camel case.\",\n    +   \"Identifier 'boolean_Array_2' is not in camel case.\",\n    +   \"Identifier 'boolean_Array_1' is not in camel case.\",\n    +   \"Identifier 'boolean_Array_2' is not in camel case.\",\n    +   \"Identifier 'boolean_Array_1' is not in camel case.\",\n    +   \"Identifier 'boolean_Array_2' is not in camel case.\",\n    +   \"Identifier 'boolean_Array_1' is not in camel case.\",\n    +   \"Identifier 'boolean_Array_1' is not in camel case.\",\n    +   \"Identifier 'boolean_Array_2' is not in camel case.\",\n    +   \"Identifier 'boolean_Array_1' is not in camel case.\",\n    +   \"Identifier 'boolean_Array_2' is not in camel case.\",\n    +   \"Identifier 'boolean_Array_1' is not in camel case.\",\n    +   \"Identifier 'boolean_Array_2' is not in camel case.\",\n    +   \"Identifier 'boolean_Array_1' is not in camel case.\",\n    +   \"Identifier 'boolean_Array_2' is not in camel case.\",\n    +   \"Unnecessary 'else' after 'return'.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Amarendra7062 › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  -  1\n    + Received  + 15\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'objects_Equal' has too many lines (34). Maximum allowed is 15.\",\n    +   \"Identifier 'objects_Equal' is not in camel case.\",\n    +   \"'key' is defined but never used.\",\n    +   \"'key' is assigned a value but never used.\",\n    +   \"'key' is never reassigned. Use 'const' instead.\",\n    +   \"'key' is already declared in the upper scope on line 31 column 10.\",\n    +   \"'key' is assigned a value but never used.\",\n    +   \"'key' is never reassigned. Use 'const' instead.\",\n    +   \"'key' is already declared in the upper scope on line 31 column 10.\",\n    +   \"'key' is never reassigned. Use 'const' instead.\",\n    +   \"'key' is already declared in the upper scope on line 31 column 10.\",\n    +   \"Unexpected if as the only statement in an else block.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › AshwakKattubadi45 › even_odd › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 6\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"'NUMBERS' is already declared in the upper scope on line 3 column 7.\",\n    +   \"'index' is never reassigned. Use 'const' instead.\",\n    +   \"'finalResult' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › AshwakKattubadi45 › categorise › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  -  1\n    + Received  + 10\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"'NUMBERS' is already declared in the upper scope on line 3 column 7.\",\n    +   \"'duplicate' is never reassigned. Use 'const' instead.\",\n    +   \"Expected a function expression.\",\n    +   \"Function 'categorise' has too many lines (16). Maximum allowed is 15.\",\n    +   \"'NUMBERS' is already declared in the upper scope on line 3 column 7.\",\n    +   \"'categorisedArray' is never reassigned. Use 'const' instead.\",\n    +   \"'value' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › AshwakKattubadi45 › entries › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 6\n\n    - Array []\n    + Array [\n    +   \"'OBJECT' is already declared in the upper scope on line 3 column 7.\",\n    +   \"'entriesArray' is never reassigned. Use 'const' instead.\",\n    +   \"'keys' is never reassigned. Use 'const' instead.\",\n    +   \"'finalResult' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › AshwakKattubadi45 › remove_adjacent_spaces › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  -  1\n    + Received  + 11\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'removeSpaces' has too many lines (18). Maximum allowed is 15.\",\n    +   \"'TEXT' is already declared in the upper scope on line 3 column 7.\",\n    +   \"'newArray' is never reassigned. Use 'const' instead.\",\n    +   \"Expected '===' and instead saw '=='.\",\n    +   \"Expected '===' and instead saw '=='.\",\n    +   \"Expected '===' and instead saw '=='.\",\n    +   \"'final' is never reassigned. Use 'const' instead.\",\n    +   \"'result' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › AshwakKattubadi45 › tribonacci › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 6\n\n    - Array []\n    + Array [\n    +   \"'tribonacciArray' is never reassigned. Use 'const' instead.\",\n    +   \"Expected a function expression.\",\n    +   \"'ENDING_RANGE' is already declared in the upper scope on line 3 column 7.\",\n    +   \"'result' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › AshwakKattubadi45 › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 5\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'arrIsEqual' has too many lines (25). Maximum allowed is 15.\",\n    +   \"'finalResult' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › AshwakKattubadi45 › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 5\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'objIsEqual' has too many lines (19). Maximum allowed is 15.\",\n    +   \"'key' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Balaraju2007 › even_odd › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 7\n\n    - Array []\n    + Array [\n    +   \"'displayEvenOddSeries' was used before it was defined.\",\n    +   \"Expected a function expression.\",\n    +   \"'obj' is never reassigned. Use 'const' instead.\",\n    +   \"'key' is never reassigned. Use 'const' instead.\",\n    +   \"'temporaryVariable' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Balaraju2007 › categorise › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 7\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'arrangeCategorise' has too many lines (26). Maximum allowed is 15.\",\n    +   \"'temp' is never reassigned. Use 'const' instead.\",\n    +   \"'globalArray' is never reassigned. Use 'const' instead.\",\n    +   \"'storeValue' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Balaraju2007 › entries › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 5\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"'resultArray' is never reassigned. Use 'const' instead.\",\n    +   \"'key' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Balaraju2007 › remove_adjacent_spaces › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 7\n\n    - Array []\n    + Array [\n    +   \"'storeValue' is never reassigned. Use 'const' instead.\",\n    +   \"'removeAdjacentSpaces' was used before it was defined.\",\n    +   \"Expected a function expression.\",\n    +   \"Function 'removeAdjacentSpaces' has too many lines (28). Maximum allowed is 15.\",\n    +   \"Expected '!==' and instead saw '!='.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Balaraju2007 › tribonacci › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  -  1\n    + Received  + 13\n\n    - Array []\n    + Array [\n    +   \"'storeValue' is never reassigned. Use 'const' instead.\",\n    +   \"'tribonacci' was used before it was defined.\",\n    +   \"Expected a function expression.\",\n    +   \"Function 'tribonacci' has too many lines (20). Maximum allowed is 15.\",\n    +   \"'resultArray' is never reassigned. Use 'const' instead.\",\n    +   \"Expected a function expression.\",\n    +   \"Unnecessary 'else' after 'return'.\",\n    +   \"Assignment to function parameter 'firstNumber'.\",\n    +   \"Assignment to function parameter 'secondNumber'.\",\n    +   \"Assignment to function parameter 'thirdNumber'.\",\n    +   \"Assignment to function parameter 'finalNumber'.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Balaraju2007 › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 6\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'compareArrays' has too many lines (19). Maximum allowed is 15.\",\n    +   \"Expected '!==' and instead saw '!='.\",\n    +   \"Expected '!==' and instead saw '!='.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Balaraju2007 › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 8\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'compareArrays' has too many lines (26). Maximum allowed is 15.\",\n    +   \"'array1' is never reassigned. Use 'const' instead.\",\n    +   \"'array2' is never reassigned. Use 'const' instead.\",\n    +   \"Expected '!==' and instead saw '!='.\",\n    +   \"Expected '===' and instead saw '=='.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Chandiniruttala › even_odd › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 5\n\n    - Array []\n    + Array [\n    +   \"'array' is never reassigned. Use 'const' instead.\",\n    +   \"'array' is already declared in the upper scope on line 17 column 5.\",\n    +   \"'object' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Chandiniruttala › categorise › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 7\n\n    - Array []\n    + Array [\n    +   \"'array' is never reassigned. Use 'const' instead.\",\n    +   \"Function has too many lines (27). Maximum allowed is 15.\",\n    +   \"'array' is already declared in the upper scope on line 26 column 5.\",\n    +   \"'temp' is never reassigned. Use 'const' instead.\",\n    +   \"'resultArray' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Chandiniruttala › entries › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 5\n\n    - Array []\n    + Array [\n    +   \"'object' is already declared in the upper scope on line 23 column 7.\",\n    +   \"'entriesArray' is never reassigned. Use 'const' instead.\",\n    +   \"'key' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Chandiniruttala › remove_adjacent_spaces › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 5\n\n    - Array []\n    + Array [\n    +   \"'text' is never reassigned. Use 'const' instead.\",\n    +   \"Function has too many lines (24). Maximum allowed is 15.\",\n    +   \"'text' is already declared in the upper scope on line 32 column 5.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Chandiniruttala › tribonacci › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 8\n\n    - Array []\n    + Array [\n    +   \"'tribonacciArray' is never reassigned. Use 'const' instead.\",\n    +   \"'endingRange' is already declared in the upper scope on line 23 column 7.\",\n    +   \"Assignment to function parameter 'firstOne'.\",\n    +   \"Assignment to function parameter 'secondOne'.\",\n    +   \"Assignment to function parameter 'thirdOne'.\",\n    +   \"Unnecessary 'else' after 'return'.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Chandiniruttala › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  -  1\n    + Received  + 17\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (37). Maximum allowed is 15.\",\n    +   \"'array1' is never reassigned. Use 'const' instead.\",\n    +   \"'array2' is never reassigned. Use 'const' instead.\",\n    +   \"Identifier 'length_array1' is not in camel case.\",\n    +   \"Identifier 'length_array2' is not in camel case.\",\n    +   \"'index' is never reassigned. Use 'const' instead.\",\n    +   \"Identifier 'length_array1' is not in camel case.\",\n    +   \"'index' is never reassigned. Use 'const' instead.\",\n    +   \"Identifier 'length_array2' is not in camel case.\",\n    +   \"Identifier 'length_array1' is not in camel case.\",\n    +   \"Identifier 'length_array2' is not in camel case.\",\n    +   \"Identifier 'length_array1' is not in camel case.\",\n    +   \"Unexpected use of continue statement.\",\n    +   \"Expected '===' and instead saw '=='.\",\n    +   \"Expected '===' and instead saw '=='.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Chandiniruttala › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  -  1\n    + Received  + 15\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (39). Maximum allowed is 15.\",\n    +   \"'array1' is never reassigned. Use 'const' instead.\",\n    +   \"'array2' is never reassigned. Use 'const' instead.\",\n    +   \"'key' is never reassigned. Use 'const' instead.\",\n    +   \"'key' is never reassigned. Use 'const' instead.\",\n    +   \"'key' is never reassigned. Use 'const' instead.\",\n    +   \"'value1' is never reassigned. Use 'const' instead.\",\n    +   \"'value2' is never reassigned. Use 'const' instead.\",\n    +   \"Expected '===' and instead saw '=='.\",\n    +   \"Expected '===' and instead saw '=='.\",\n    +   \"Unexpected use of continue statement.\",\n    +   \"Expected '===' and instead saw '=='.\",\n    +   \"Expected '===' and instead saw '=='.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Charantej21 › remove_adjacent_spaces › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"Expected { after 'if' condition.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Charantej21 › tribonacci › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 6\n\n    - Array []\n    + Array [\n    +   \"'threeNumberssum' is never reassigned. Use 'const' instead.\",\n    +   \"Assignment to function parameter 'numberOne'.\",\n    +   \"Assignment to function parameter 'numberTwo'.\",\n    +   \"Assignment to function parameter 'numberThree'.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Charantej21 › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 5\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (27). Maximum allowed is 15.\",\n    +   \"Unexpected use of continue statement.\",\n    +   \"Unexpected if as the only statement in an else block.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Charantej21 › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 6\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (22). Maximum allowed is 15.\",\n    +   \"'key' is never reassigned. Use 'const' instead.\",\n    +   \"Unnecessary 'else' after 'return'.\",\n    +   \"Unexpected if as the only statement in an else block.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Dhanalaxmi-Mendadala › even_odd › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 7\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Identifier 'even_odd' is not in camel case.\",\n    +   \"'NUMBERS' is already declared in the upper scope on line 3 column 7.\",\n    +   \"'object' is never reassigned. Use 'const' instead.\",\n    +   \"Expected '===' and instead saw '=='.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Dhanalaxmi-Mendadala › categorise › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 8\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"'NUMBERS' is already declared in the upper scope on line 3 column 7.\",\n    +   \"'SortedArray' is never reassigned. Use 'const' instead.\",\n    +   \"'temp' is never reassigned. Use 'const' instead.\",\n    +   \"'subArray' is never reassigned. Use 'const' instead.\",\n    +   \"Expected '===' and instead saw '=='.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Dhanalaxmi-Mendadala › entries › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 5\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"'OBJECT' is already declared in the upper scope on line 3 column 7.\",\n    +   \"'ArrayOfData' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Dhanalaxmi-Mendadala › remove_adjacent_spaces › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  -  1\n    + Received  + 10\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'remove' has too many lines (31). Maximum allowed is 15.\",\n    +   \"'TEXT' is already declared in the upper scope on line 3 column 7.\",\n    +   \"'string' is never reassigned. Use 'const' instead.\",\n    +   \"Expected '!==' and instead saw '!='.\",\n    +   \"Expected '!==' and instead saw '!='.\",\n    +   \"Expected '===' and instead saw '=='.\",\n    +   \"Expected '===' and instead saw '=='.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Dhanalaxmi-Mendadala › tribonacci › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 5\n\n    - Array []\n    + Array [\n    +   \"'SequenceArray' is never reassigned. Use 'const' instead.\",\n    +   \"'ENDING_RANGE' is already declared in the upper scope on line 3 column 7.\",\n    +   \"Unnecessary 'else' after 'return'.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Dhanalaxmi-Mendadala › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 7\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'equal' has too many lines (24). Maximum allowed is 15.\",\n    +   \"Expected '===' and instead saw '=='.\",\n    +   \"Expected '===' and instead saw '=='.\",\n    +   \"Unexpected use of continue statement.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Dhanalaxmi-Mendadala › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  -  1\n    + Received  + 10\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'object_equals' has too many lines (24). Maximum allowed is 15.\",\n    +   \"Identifier 'object_equals' is not in camel case.\",\n    +   \"Expected '===' and instead saw '=='.\",\n    +   \"Expected '===' and instead saw '=='.\",\n    +   \"Expected '!==' and instead saw '!='.\",\n    +   \"Unexpected use of continue statement.\",\n    +   \"Expected '!==' and instead saw '!='.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › G-Rajini › even_odd › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 5\n\n    - Array []\n    + Array [\n    +   \"'key' is defined but never used.\",\n    +   \"'NUMBERS' is already declared in the upper scope on line 3 column 7.\",\n    +   \"'index' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › G-Rajini › categorise › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"'NUMBERS' is already declared in the upper scope on line 3 column 7.\",\n    +   \"'temp' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › G-Rajini › entries › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"'key' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › G-Rajini › remove_adjacent_spaces › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (23). Maximum allowed is 15.\",\n    +   \"'TEXT' is already declared in the upper scope on line 3 column 7.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › G-Rajini › tribonacci › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"'ENDING_RANGE' is already declared in the upper scope on line 3 column 7.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › G-Rajini › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (23). Maximum allowed is 15.\",\n    +   \"'y' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › G-Rajini › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  -  1\n    + Received  + 10\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (30). Maximum allowed is 15.\",\n    +   \"'obj1Length' is never reassigned. Use 'const' instead.\",\n    +   \"'obj2Length' is never reassigned. Use 'const' instead.\",\n    +   \"'index' is never reassigned. Use 'const' instead.\",\n    +   \"'x' is never reassigned. Use 'const' instead.\",\n    +   \"Blocks are nested too deeply (5). Maximum allowed is 4.\",\n    +   \"Unnecessary 'else' after 'return'.\",\n    +   \"Unexpected use of continue statement.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › GOWRIPRASADTW › even_odd › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 5\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'evenOdd' has too many lines (18). Maximum allowed is 15.\",\n    +   \"'finalObject' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › GOWRIPRASADTW › categorise › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 7\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'categoriseArrayElements' has too many lines (24). Maximum allowed is 15.\",\n    +   \"'categoriseArray' is never reassigned. Use 'const' instead.\",\n    +   \"'commonArrayElement' is never reassigned. Use 'const' instead.\",\n    +   \"Expected '===' and instead saw '=='.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › GOWRIPRASADTW › entries › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"'finalResult' is never reassigned. Use 'const' instead.\",\n    +   \"'keys' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › GOWRIPRASADTW › remove_adjacent_spaces › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"'resultantString' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › GOWRIPRASADTW › tribonacci › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › GOWRIPRASADTW › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 5\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'arrayEqual' has too many lines (26). Maximum allowed is 15.\",\n    +   \"Unexpected if as the only statement in an else block.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › GOWRIPRASADTW › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 6\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'objectEqual' has too many lines (24). Maximum allowed is 15.\",\n    +   \"'element' is never reassigned. Use 'const' instead.\",\n    +   \"Unexpected if as the only statement in an else block.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Harshavardhanlav › even_odd › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"'NUMBERS' is already declared in the upper scope on line 3 column 7.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Harshavardhanlav › categorise › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'categorizeAndSort' has too many lines (30). Maximum allowed is 15.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Harshavardhanlav › entries › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 6\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"'OBJECT' is already declared in the upper scope on line 3 column 7.\",\n    +   \"'result' is never reassigned. Use 'const' instead.\",\n    +   \"'key' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Harshavardhanlav › remove_adjacent_spaces › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'removeAdjacentSpaces' has too many lines (26). Maximum allowed is 15.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Harshavardhanlav › tribonacci › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 9\n\n    - Array []\n    + Array [\n    +   \"'result' is assigned a value but never used.\",\n    +   \"'result' is never reassigned. Use 'const' instead.\",\n    +   \"Expected a function expression.\",\n    +   \"Function 'tribonacii' has too many lines (18). Maximum allowed is 15.\",\n    +   \"'result' is never reassigned. Use 'const' instead.\",\n    +   \"'result' is already declared in the upper scope on line 39 column 5.\",\n    +   \"Unnecessary 'else' after 'return'.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Harshavardhanlav › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 5\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'array_equals' has too many lines (26). Maximum allowed is 15.\",\n    +   \"Identifier 'array_equals' is not in camel case.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Harshavardhanlav › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  -  1\n    + Received  + 12\n\n    - Array []\n    + Array [\n    +   \"Multiple 'use strict' directives.\",\n    +   \"Expected a function expression.\",\n    +   \"Function 'object_equals' has too many lines (28). Maximum allowed is 15.\",\n    +   \"Identifier 'object_equals' is not in camel case.\",\n    +   \"Identifier 'obj1_keys' is not in camel case.\",\n    +   \"Identifier 'obj2_keys' is not in camel case.\",\n    +   \"Identifier 'obj1_keys' is not in camel case.\",\n    +   \"Identifier 'obj2_keys' is not in camel case.\",\n    +   \"'key' is never reassigned. Use 'const' instead.\",\n    +   \"Identifier 'obj1_keys' is not in camel case.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › HemPradeepthummala › categorise › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (16). Maximum allowed is 15.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › HemPradeepthummala › tribonacci › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 5\n\n    - Array []\n    + Array [\n    +   \"'FIRST_NUMBER' is already declared in the upper scope on line 24 column 7.\",\n    +   \"'SECOND_NUMBER' is already declared in the upper scope on line 25 column 7.\",\n    +   \"'THIRD_NUMBER' is already declared in the upper scope on line 26 column 7.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › HemPradeepthummala › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (17). Maximum allowed is 15.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › JAGADEESH2004PJ › remove_adjacent_spaces › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'removeAdjacentSpaces' has too many lines (16). Maximum allowed is 15.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › KARTHEEK-TAMADA › even_odd › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 5\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Identifier 'even_odd' is not in camel case.\",\n    +   \"'result' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › KARTHEEK-TAMADA › categorise › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 9\n\n    - Array []\n    + Array [\n    +   \"'categorise' was used before it was defined.\",\n    +   \"Expected a function expression.\",\n    +   \"Function 'categorise' has too many lines (21). Maximum allowed is 15.\",\n    +   \"'NUMBERS' is already declared in the upper scope on line 3 column 7.\",\n    +   \"'n' is never reassigned. Use 'const' instead.\",\n    +   \"'temp' is never reassigned. Use 'const' instead.\",\n    +   \"'result' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › KARTHEEK-TAMADA › entries › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 6\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"'resultantArray' is never reassigned. Use 'const' instead.\",\n    +   \"'key' is never reassigned. Use 'const' instead.\",\n    +   \"'tempArray' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › KARTHEEK-TAMADA › remove_adjacent_spaces › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (40). Maximum allowed is 15.\",\n    +   \"'finalResult' is already declared in the upper scope on line 43 column 9.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › KARTHEEK-TAMADA › tribonacci › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 5\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (16). Maximum allowed is 15.\",\n    +   \"'temp' is never reassigned. Use 'const' instead.\",\n    +   \"'index' is assigned a value but never used.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › KARTHEEK-TAMADA › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 6\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'areArrayEqual' has too many lines (21). Maximum allowed is 15.\",\n    +   \"Expected '===' and instead saw '=='.\",\n    +   \"Expected '===' and instead saw '=='.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › KARTHEEK-TAMADA › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 5\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'objectEqual' has too many lines (20). Maximum allowed is 15.\",\n    +   \"'key' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › KalluriBhagyasree › even_odd › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"'NUMBERS' is already declared in the upper scope on line 3 column 7.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › KalluriBhagyasree › categorise › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 8\n\n    - Array []\n    + Array [\n    +   \"'arr' is never reassigned. Use 'const' instead.\",\n    +   \"Function has too many lines (29). Maximum allowed is 15.\",\n    +   \"'arr' is already declared in the upper scope on line 26 column 5.\",\n    +   \"'temp' is never reassigned. Use 'const' instead.\",\n    +   \"'finalArray' is never reassigned. Use 'const' instead.\",\n    +   \"Unnecessary 'else' after 'return'.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › KalluriBhagyasree › entries › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 7\n\n    - Array []\n    + Array [\n    +   \"'OBJECT' is already declared in the upper scope on line 3 column 7.\",\n    +   \"'finalEntity' is never reassigned. Use 'const' instead.\",\n    +   \"'objectKeys' is never reassigned. Use 'const' instead.\",\n    +   \"'key' is never reassigned. Use 'const' instead.\",\n    +   \"'value' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › KalluriBhagyasree › remove_adjacent_spaces › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 5\n\n    - Array []\n    + Array [\n    +   \"'text' is never reassigned. Use 'const' instead.\",\n    +   \"Function has too many lines (17). Maximum allowed is 15.\",\n    +   \"'text' is already declared in the upper scope on line 31 column 5.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › KalluriBhagyasree › tribonacci › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 6\n\n    - Array []\n    + Array [\n    +   \"'array' is never reassigned. Use 'const' instead.\",\n    +   \"'ENDING_RANGE' is already declared in the upper scope on line 3 column 7.\",\n    +   \"'flag' is never reassigned. Use 'const' instead.\",\n    +   \"Unnecessary 'else' after 'return'.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › KalluriBhagyasree › array_equals › should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   false,\n    +   true,\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › KalluriBhagyasree › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  -  1\n    + Received  + 19\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (29). Maximum allowed is 15.\",\n    +   \"'ARRAY_1' is already declared in the upper scope on line 3 column 7.\",\n    +   \"'ARRAY_2' is already declared in the upper scope on line 4 column 7.\",\n    +   \"'array1' is never reassigned. Use 'const' instead.\",\n    +   \"'array2' is never reassigned. Use 'const' instead.\",\n    +   \"Identifier 'length_Array1' is not in camel case.\",\n    +   \"Identifier 'length_Array2' is not in camel case.\",\n    +   \"'i' is never reassigned. Use 'const' instead.\",\n    +   \"Identifier 'length_Array1' is not in camel case.\",\n    +   \"'i' is never reassigned. Use 'const' instead.\",\n    +   \"Identifier 'length_Array2' is not in camel case.\",\n    +   \"Identifier 'length_Array1' is not in camel case.\",\n    +   \"Identifier 'length_Array2' is not in camel case.\",\n    +   \"Identifier 'length_Array1' is not in camel case.\",\n    +   \"Expected '===' and instead saw '=='.\",\n    +   \"Unexpected use of continue statement.\",\n    +   \"Unnecessary 'else' after 'return'.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › KalluriBhagyasree › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  -  1\n    + Received  + 16\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (33). Maximum allowed is 15.\",\n    +   \"'OBJECT_1' is already declared in the upper scope on line 3 column 7.\",\n    +   \"'OBJECT_2' is already declared in the upper scope on line 4 column 7.\",\n    +   \"'keys1' is never reassigned. Use 'const' instead.\",\n    +   \"'keys2' is never reassigned. Use 'const' instead.\",\n    +   \"'key' is never reassigned. Use 'const' instead.\",\n    +   \"'key' is never reassigned. Use 'const' instead.\",\n    +   \"'key' is never reassigned. Use 'const' instead.\",\n    +   \"'value1' is never reassigned. Use 'const' instead.\",\n    +   \"'value2' is never reassigned. Use 'const' instead.\",\n    +   \"Expected '===' and instead saw '=='.\",\n    +   \"Expected '===' and instead saw '=='.\",\n    +   \"Unexpected use of continue statement.\",\n    +   \"Unnecessary 'else' after 'return'.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Krishnakoushik005 › even_odd › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 6\n\n    - Array []\n    + Array [\n    +   \"'copyArray' is never reassigned. Use 'const' instead.\",\n    +   \"'evenArray' is never reassigned. Use 'const' instead.\",\n    +   \"'oddArray' is never reassigned. Use 'const' instead.\",\n    +   \"'result' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Krishnakoushik005 › categorise › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 7\n\n    - Array []\n    + Array [\n    +   \"'arry' is defined but never used.\",\n    +   \"'copyArray' is never reassigned. Use 'const' instead.\",\n    +   \"'resultArray' is never reassigned. Use 'const' instead.\",\n    +   \"'subArray' is never reassigned. Use 'const' instead.\",\n    +   \"Expected '===' and instead saw '=='.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Krishnakoushik005 › entries › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 5\n\n    - Array []\n    + Array [\n    +   \"'resultArray' is never reassigned. Use 'const' instead.\",\n    +   \"'key' is never reassigned. Use 'const' instead.\",\n    +   \"'subArray' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Krishnakoushik005 › remove_adjacent_spaces › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 5\n\n    - Array []\n    + Array [\n    +   \"Expected '!==' and instead saw '!='.\",\n    +   \"Expected '===' and instead saw '=='.\",\n    +   \"Expected '!==' and instead saw '!='.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Krishnakoushik005 › tribonacci › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 5\n\n    - Array []\n    + Array [\n    +   \"Assignment to function parameter 'third'.\",\n    +   \"Assignment to function parameter 'first'.\",\n    +   \"Assignment to function parameter 'second'.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Krishnakoushik005 › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 6\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (17). Maximum allowed is 15.\",\n    +   \"'recusionCondition' is never reassigned. Use 'const' instead.\",\n    +   \"'bool' is never reassigned. Use 'const' instead.\",\n    +   \"Unexpected use of continue statement.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Krishnakoushik005 › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 9\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (21). Maximum allowed is 15.\",\n    +   \"'keys' is never reassigned. Use 'const' instead.\",\n    +   \"'recusionCondition' is never reassigned. Use 'const' instead.\",\n    +   \"Expected '!==' and instead saw '!='.\",\n    +   \"Expected '!==' and instead saw '!='.\",\n    +   \"'bool' is never reassigned. Use 'const' instead.\",\n    +   \"Unexpected use of continue statement.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Kshivaji333 › categorise › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"Arrow function has too many lines (25). Maximum allowed is 15.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Kshivaji333 › remove_adjacent_spaces › should remove extra spaces when TEXT  has leading & trailing spaces\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   \"Leading spaces!!! & Trailing Spaces!!!\",\n    +   \"Leading spaces!!! & Trailing Spaces!!! \",\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Kshivaji333 › remove_adjacent_spaces › should remove extra spaces when TEXT has trailing spaces\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   \"Trailing Spaces!!!\",\n    +   \"Trailing Spaces!!! \",\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Kshivaji333 › tribonacci › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 5\n\n    - Array []\n    + Array [\n    +   \"Assignment to function parameter 'third'.\",\n    +   \"Assignment to function parameter 'first'.\",\n    +   \"Assignment to function parameter 'second'.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Kshivaji333 › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"Arrow function has too many lines (21). Maximum allowed is 15.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Kshivaji333 › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 7\n\n    - Array []\n    + Array [\n    +   \"Arrow function has too many lines (17). Maximum allowed is 15.\",\n    +   \"Expected { after 'if' condition.\",\n    +   \"Expected { after 'if' condition.\",\n    +   \"Expected { after 'if' condition.\",\n    +   \"Expected { after 'if' condition.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Nagalakshmivaranasi › categorise › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (16). Maximum allowed is 15.\",\n    +   \"'temp' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Nagalakshmivaranasi › remove_adjacent_spaces › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (16). Maximum allowed is 15.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Nagalakshmivaranasi › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (18). Maximum allowed is 15.\",\n    +   \"'lengthOfArray' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Nagalakshmivaranasi › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (17). Maximum allowed is 15.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Nithin7411 › even_odd › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"'even' is never reassigned. Use 'const' instead.\",\n    +   \"'odd' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Nithin7411 › categorise › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 5\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (36). Maximum allowed is 15.\",\n    +   \"'temp' is never reassigned. Use 'const' instead.\",\n    +   \"'subArray' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Nithin7411 › entries › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"'array' is never reassigned. Use 'const' instead.\",\n    +   \"'key' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Nithin7411 › remove_adjacent_spaces › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 6\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (44). Maximum allowed is 15.\",\n    +   \"'charCount' is never reassigned. Use 'const' instead.\",\n    +   \"'cleanedSentence' is never reassigned. Use 'const' instead.\",\n    +   \"'result' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Nithin7411 › tribonacci › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (24). Maximum allowed is 15.\",\n    +   \"'nextNumber' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Nithin7411 › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 6\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (25). Maximum allowed is 15.\",\n    +   \"Expected '===' and instead saw '=='.\",\n    +   \"'subArray1' is never reassigned. Use 'const' instead.\",\n    +   \"'subArray2' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Nithin7411 › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 6\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (34). Maximum allowed is 15.\",\n    +   \"'keysOfObj1' is never reassigned. Use 'const' instead.\",\n    +   \"'keysOfObj2' is never reassigned. Use 'const' instead.\",\n    +   \"'key' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Pardhasaradhi031 › even_odd › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"'NUMBERS' is already declared in the upper scope on line 18 column 7.\",\n    +   \"'OBJECT' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Pardhasaradhi031 › categorise › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (28). Maximum allowed is 15.\",\n    +   \"'temp' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Pardhasaradhi031 › entries › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 5\n\n    - Array []\n    + Array [\n    +   \"'OBJECT' is already declared in the upper scope on line 23 column 7.\",\n    +   \"'subArray' is never reassigned. Use 'const' instead.\",\n    +   \"'key' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Pardhasaradhi031 › remove_adjacent_spaces › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (24). Maximum allowed is 15.\",\n    +   \"'currentChar' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Pardhasaradhi031 › tribonacci › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"'ENDING_RANGE' is already declared in the upper scope on line 23 column 7.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Pardhasaradhi031 › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (27). Maximum allowed is 15.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Pardhasaradhi031 › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'isObjectEqual' has too many lines (21). Maximum allowed is 15.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Pujari-Praveen › even_odd › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 6\n\n    - Array []\n    + Array [\n    +   \"'oddEvenObj' is never reassigned. Use 'const' instead.\",\n    +   \"'index' is never reassigned. Use 'const' instead.\",\n    +   \"Unexpected use of continue statement.\",\n    +   \"'oddEvenObject' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Pujari-Praveen › categorise › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 9\n\n    - Array []\n    + Array [\n    +   \"'numberList' is never reassigned. Use 'const' instead.\",\n    +   \"'index' is never reassigned. Use 'const' instead.\",\n    +   \"'temp' is never reassigned. Use 'const' instead.\",\n    +   \"Function has too many lines (16). Maximum allowed is 15.\",\n    +   \"'categorisedList' is never reassigned. Use 'const' instead.\",\n    +   \"'tempList' is never reassigned. Use 'const' instead.\",\n    +   \"'finalList' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Pujari-Praveen › entries › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 5\n\n    - Array []\n    + Array [\n    +   \"'finalList' is never reassigned. Use 'const' instead.\",\n    +   \"'key' is never reassigned. Use 'const' instead.\",\n    +   \"'tempList' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Pujari-Praveen › remove_adjacent_spaces › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 6\n\n    - Array []\n    + Array [\n    +   \"Expected '===' and instead saw '=='.\",\n    +   \"Expected '!==' and instead saw '!='.\",\n    +   \"Expected '===' and instead saw '=='.\",\n    +   \"Expected '!==' and instead saw '!='.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Pujari-Praveen › tribonacci › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"'finalOne' is never reassigned. Use 'const' instead.\",\n    +   \"'finalList' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Pujari-Praveen › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"'key' is never reassigned. Use 'const' instead.\",\n    +   \"'isArrayEqual' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Pujari-Praveen › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"'key' is never reassigned. Use 'const' instead.\",\n    +   \"'isObjEqual' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › RAKESHGURUGU › even_odd › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › RAKESHGURUGU › categorise › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 5\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'sortAndCategorize' has too many lines (26). Maximum allowed is 15.\",\n    +   \"'temp' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › RAKESHGURUGU › entries › should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}\n\n    evalmachine.<anonymous>:28\n            array.push(object[key]);\n                       ^\n\n    ReferenceError: object is not defined\n\n      at entries (evalmachine.<anonymous>:28:20)\n      at evalmachine.<anonymous>:33:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● JS-AOFS › RAKESHGURUGU › entries › should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}\n\n    evalmachine.<anonymous>:28\n            array.push(object[key]);\n                       ^\n\n    ReferenceError: object is not defined\n\n      at entries (evalmachine.<anonymous>:28:20)\n      at evalmachine.<anonymous>:33:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● JS-AOFS › RAKESHGURUGU › entries › should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}\n\n    evalmachine.<anonymous>:28\n            array.push(object[key]);\n                       ^\n\n    ReferenceError: object is not defined\n\n      at entries (evalmachine.<anonymous>:28:20)\n      at evalmachine.<anonymous>:33:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● JS-AOFS › RAKESHGURUGU › entries › should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}\n\n    evalmachine.<anonymous>:28\n            array.push(object[key]);\n                       ^\n\n    ReferenceError: object is not defined\n\n      at entries (evalmachine.<anonymous>:28:20)\n      at evalmachine.<anonymous>:33:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● JS-AOFS › RAKESHGURUGU › entries › should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}\n\n    evalmachine.<anonymous>:28\n            array.push(object[key]);\n                       ^\n\n    ReferenceError: object is not defined\n\n      at entries (evalmachine.<anonymous>:28:20)\n      at evalmachine.<anonymous>:33:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● JS-AOFS › RAKESHGURUGU › entries › should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}\n\n    evalmachine.<anonymous>:28\n            array.push(object[key]);\n                       ^\n\n    ReferenceError: object is not defined\n\n      at entries (evalmachine.<anonymous>:28:20)\n      at evalmachine.<anonymous>:33:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● JS-AOFS › RAKESHGURUGU › entries › should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}\n\n    evalmachine.<anonymous>:28\n            array.push(object[key]);\n                       ^\n\n    ReferenceError: object is not defined\n\n      at entries (evalmachine.<anonymous>:28:20)\n      at evalmachine.<anonymous>:33:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● JS-AOFS › RAKESHGURUGU › entries › should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}\n\n    evalmachine.<anonymous>:28\n            array.push(object[key]);\n                       ^\n\n    ReferenceError: object is not defined\n\n      at entries (evalmachine.<anonymous>:28:20)\n      at evalmachine.<anonymous>:33:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● JS-AOFS › RAKESHGURUGU › entries › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › RAKESHGURUGU › remove_adjacent_spaces › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'adjacentSpaces' has too many lines (18). Maximum allowed is 15.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › RAKESHGURUGU › tribonacci › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › RAKESHGURUGU › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'areArraysEqual' has too many lines (17). Maximum allowed is 15.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › RAKESHGURUGU › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 5\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'areObjectsEqual' has too many lines (16). Maximum allowed is 15.\",\n    +   \"'key' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Rafiya1207 › categorise › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 5\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (30). Maximum allowed is 15.\",\n    +   \"'temp' is never reassigned. Use 'const' instead.\",\n    +   \"Unexpected use of continue statement.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Rafiya1207 › remove_adjacent_spaces › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"Unexpected use of continue statement.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Rafiya1207 › tribonacci › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  -  1\n    + Received  + 10\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (20). Maximum allowed is 15.\",\n    +   \"'previousNumber1' is never reassigned. Use 'const' instead.\",\n    +   \"'previousNumber2' is never reassigned. Use 'const' instead.\",\n    +   \"'previousNumber3' is never reassigned. Use 'const' instead.\",\n    +   \"'convertedArray' is never reassigned. Use 'const' instead.\",\n    +   \"'previousNumber1' is already declared in the upper scope on line 25 column 9.\",\n    +   \"'previousNumber2' is already declared in the upper scope on line 26 column 9.\",\n    +   \"'previousNumber3' is already declared in the upper scope on line 27 column 9.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Rafiya1207 › array_equals › should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   true,\n    +   false,\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Rafiya1207 › array_equals › should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   true,\n    +   false,\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Rafiya1207 › array_equals › should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   true,\n    +   false,\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Rafiya1207 › array_equals › should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   true,\n    +   false,\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Rafiya1207 › array_equals › should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   true,\n    +   false,\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Rafiya1207 › array_equals › should log true when given two very large arrays with same data\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   true,\n    +   false,\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Rafiya1207 › array_equals › should log true when given two deep arrays are equal\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   true,\n    +   false,\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Rafiya1207 › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 6\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (19). Maximum allowed is 15.\",\n    +   \"Unexpected if as the only statement in an else block.\",\n    +   \"Blocks are nested too deeply (5). Maximum allowed is 4.\",\n    +   \"Unexpected use of continue statement.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Rafiya1207 › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 9\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (22). Maximum allowed is 15.\",\n    +   \"'firstObjectKeys' is never reassigned. Use 'const' instead.\",\n    +   \"'secondObjectKeys' is never reassigned. Use 'const' instead.\",\n    +   \"'key' is assigned a value but never used.\",\n    +   \"Expected '===' and instead saw '=='.\",\n    +   \"Expected '!==' and instead saw '!='.\",\n    +   \"Unexpected use of continue statement.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Revanth-backbencher › even_odd › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 5\n\n    - Array []\n    + Array [\n    +   \"'evenArray' is never reassigned. Use 'const' instead.\",\n    +   \"'oddArray' is never reassigned. Use 'const' instead.\",\n    +   \"Expected '===' and instead saw '=='.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Revanth-backbencher › categorise › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 9\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"'outerArray' is never reassigned. Use 'const' instead.\",\n    +   \"Expected a function expression.\",\n    +   \"Function 'arrays' has too many lines (18). Maximum allowed is 15.\",\n    +   \"'outerArray' is never reassigned. Use 'const' instead.\",\n    +   \"Expected '===' and instead saw '=='.\",\n    +   \"Expected '===' and instead saw '=='.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Revanth-backbencher › entries › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 6\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"'printArray' is never reassigned. Use 'const' instead.\",\n    +   \"'key' is never reassigned. Use 'const' instead.\",\n    +   \"'array' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Revanth-backbencher › remove_adjacent_spaces › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 7\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'Remove_space' has too many lines (23). Maximum allowed is 15.\",\n    +   \"Identifier 'Remove_space' is not in camel case.\",\n    +   \"'finalText' is never reassigned. Use 'const' instead.\",\n    +   \"'joinText' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Revanth-backbencher › tribonacci › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 5\n\n    - Array []\n    + Array [\n    +   \"'array' is never reassigned. Use 'const' instead.\",\n    +   \"Expected a function expression.\",\n    +   \"'Sum' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Revanth-backbencher › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 6\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'booleanArray' has too many lines (21). Maximum allowed is 15.\",\n    +   \"Expected '===' and instead saw '=='.\",\n    +   \"Expected '===' and instead saw '=='.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Revanth-backbencher › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  -  1\n    + Received  + 10\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'BooleanObject' has too many lines (33). Maximum allowed is 15.\",\n    +   \"Expected '===' and instead saw '=='.\",\n    +   \"Expected '===' and instead saw '=='.\",\n    +   \"Expected '===' and instead saw '=='.\",\n    +   \"'bool' is never reassigned. Use 'const' instead.\",\n    +   \"Blocks are nested too deeply (5). Maximum allowed is 4.\",\n    +   \"Expected '===' and instead saw '=='.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Rohith-216 › even_odd › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 8\n\n    - Array []\n    + Array [\n    +   \"'numbers' is never reassigned. Use 'const' instead.\",\n    +   \"Expected a function expression.\",\n    +   \"'numbers' is already declared in the upper scope on line 19 column 5.\",\n    +   \"'even' is never reassigned. Use 'const' instead.\",\n    +   \"'odd' is never reassigned. Use 'const' instead.\",\n    +   \"'result' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Rohith-216 › categorise › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 9\n\n    - Array []\n    + Array [\n    +   \"'duplicate' is never reassigned. Use 'const' instead.\",\n    +   \"'sort' is never reassigned. Use 'const' instead.\",\n    +   \"Function has too many lines (23). Maximum allowed is 15.\",\n    +   \"'duplicate' is already declared in the upper scope on line 26 column 5.\",\n    +   \"'temporary' is never reassigned. Use 'const' instead.\",\n    +   \"'outerArray' is never reassigned. Use 'const' instead.\",\n    +   \"'result' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Rohith-216 › entries › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 8\n\n    - Array []\n    + Array [\n    +   \"'duplicate' is never reassigned. Use 'const' instead.\",\n    +   \"'data' is never reassigned. Use 'const' instead.\",\n    +   \"'duplicate' is already declared in the upper scope on line 23 column 5.\",\n    +   \"'result' is never reassigned. Use 'const' instead.\",\n    +   \"'key' is never reassigned. Use 'const' instead.\",\n    +   \"'entries' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Rohith-216 › remove_adjacent_spaces › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 6\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'removeSpace' has too many lines (24). Maximum allowed is 15.\",\n    +   \"Unexpected use of continue statement.\",\n    +   \"'finalVaule' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Rohith-216 › tribonacci › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  -  1\n    + Received  + 26\n\n    - Array []\n    + Array [\n    +   \"'number' is never reassigned. Use 'const' instead.\",\n    +   \"Expected a function expression.\",\n    +   \"Function 'tribonacci' has too many lines (25). Maximum allowed is 15.\",\n    +   \"'number' is already declared in the upper scope on line 23 column 5.\",\n    +   \"'firstNumber' is assigned a value but never used.\",\n    +   \"'firstNumber' is never reassigned. Use 'const' instead.\",\n    +   \"'secondNumber' is assigned a value but never used.\",\n    +   \"'secondNumber' is never reassigned. Use 'const' instead.\",\n    +   \"'thirdNumber' is assigned a value but never used.\",\n    +   \"'thirdNumber' is never reassigned. Use 'const' instead.\",\n    +   \"'fourthNumber' is defined but never used.\",\n    +   \"'result' is never reassigned. Use 'const' instead.\",\n    +   \"Expected a function expression.\",\n    +   \"'firstNumber' is already declared in the upper scope on line 26 column 7.\",\n    +   \"'secondNumber' is already declared in the upper scope on line 27 column 7.\",\n    +   \"'thirdNumber' is already declared in the upper scope on line 28 column 7.\",\n    +   \"'fourthNumber' is already declared in the upper scope on line 29 column 7.\",\n    +   \"Assignment to function parameter 'firstNumber'.\",\n    +   \"Assignment to function parameter 'secondNumber'.\",\n    +   \"Assignment to function parameter 'thirdNumber'.\",\n    +   \"Assignment to function parameter 'fourthNumber'.\",\n    +   \"Unnecessary 'else' after 'return'.\",\n    +   \"'sum' is never reassigned. Use 'const' instead.\",\n    +   \"'finalResult' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Rohith-216 › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  -  1\n    + Received  + 11\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'equalArray' has too many lines (23). Maximum allowed is 15.\",\n    +   \"Expected '===' and instead saw '=='.\",\n    +   \"Expected '===' and instead saw '=='.\",\n    +   \"Expected '===' and instead saw '=='.\",\n    +   \"Invalid typeof comparison value.\",\n    +   \"Expected '!==' and instead saw '!='.\",\n    +   \"Unnecessary 'else' after 'return'.\",\n    +   \"'result' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Rohith-216 › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 7\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'objectEquals' has too many lines (18). Maximum allowed is 15.\",\n    +   \"'index' is never reassigned. Use 'const' instead.\",\n    +   \"'result' is never reassigned. Use 'const' instead.\",\n    +   \"'finalVaule' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › SACHITH31 › even_odd › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"'separateEvenOdd' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › SACHITH31 › categorise › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 9\n\n    - Array []\n    + Array [\n    +   \"'myArray' is never reassigned. Use 'const' instead.\",\n    +   \"Expected a function expression.\",\n    +   \"Function 'bubbleSort' has too many lines (24). Maximum allowed is 15.\",\n    +   \"'n' is never reassigned. Use 'const' instead.\",\n    +   \"'temp' is never reassigned. Use 'const' instead.\",\n    +   \"'subresult' is never reassigned. Use 'const' instead.\",\n    +   \"'anotherArray' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › SACHITH31 › entries › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 5\n\n    - Array []\n    + Array [\n    +   \"'result' is never reassigned. Use 'const' instead.\",\n    +   \"'key' is never reassigned. Use 'const' instead.\",\n    +   \"'subresult' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › SACHITH31 › remove_adjacent_spaces › should remove extra spaces when TEXT contains only space\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   \"\",\n    +   \" \",\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › SACHITH31 › remove_adjacent_spaces › should remove extra spaces when TEXT has leading spaces\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   \"Leading spaces!!!\",\n    +   \" Leading spaces!!!\",\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › SACHITH31 › remove_adjacent_spaces › should remove extra spaces when TEXT  has leading & trailing spaces\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   \"Leading spaces!!! & Trailing Spaces!!!\",\n    +   \" Leading spaces!!! & Trailing Spaces!!! \",\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › SACHITH31 › remove_adjacent_spaces › should remove extra spaces when TEXT has trailing spaces\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   \"Trailing Spaces!!!\",\n    +   \"Trailing Spaces!!! \",\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › SACHITH31 › remove_adjacent_spaces › should remove extra spaces when TEXT is multi lingual string with spaces\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   \"こんにちは 世界\",\n    +   \" こんにちは 世界 \",\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › SACHITH31 › remove_adjacent_spaces › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"'removeAdjacentSpaces' is never reassigned. Use 'const' instead.\",\n    +   \"'char' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › SACHITH31 › tribonacci › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 6\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"'ENDING_RANGE' is already declared in the upper scope on line 3 column 7.\",\n    +   \"Unnecessary 'else' after 'return'.\",\n    +   \"'nextNumber' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › SACHITH31 › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  -  1\n    + Received  + 10\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (25). Maximum allowed is 15.\",\n    +   \"Identifier 'array_length1' is not in camel case.\",\n    +   \"'array_length1' is never reassigned. Use 'const' instead.\",\n    +   \"Identifier 'array_length2' is not in camel case.\",\n    +   \"'array_length2' is never reassigned. Use 'const' instead.\",\n    +   \"Identifier 'array_length1' is not in camel case.\",\n    +   \"Identifier 'array_length2' is not in camel case.\",\n    +   \"Identifier 'array_length1' is not in camel case.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › SACHITH31 › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"'myobj' is never reassigned. Use 'const' instead.\",\n    +   \"Function has too many lines (27). Maximum allowed is 15.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › SaiLokeshGoud › tribonacci › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 8\n\n    - Array []\n    + Array [\n    +   \"'firstNumber' is never reassigned. Use 'const' instead.\",\n    +   \"'secondNumber' is never reassigned. Use 'const' instead.\",\n    +   \"'thirdNumber' is never reassigned. Use 'const' instead.\",\n    +   \"Assignment to function parameter 'firstNum'.\",\n    +   \"Assignment to function parameter 'secondNum'.\",\n    +   \"Assignment to function parameter 'thirdNum'.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › SaiLokeshGoud › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'arraysAreEqualOrNot' has too many lines (22). Maximum allowed is 15.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › SaiLokeshGoud › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 5\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'compareValuesOfObjects' has too many lines (23). Maximum allowed is 15.\",\n    +   \"'key' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Saicharanteja-844 › categorise › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (21). Maximum allowed is 15.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Saicharanteja-844 › remove_adjacent_spaces › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (40). Maximum allowed is 15.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Saicharanteja-844 › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"Arrow function has too many lines (35). Maximum allowed is 15.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Saicharanteja-844 › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"Arrow function has too many lines (23). Maximum allowed is 15.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Shek-Nowshik66 › categorise › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"Arrow function has too many lines (18). Maximum allowed is 15.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Shek-Nowshik66 › remove_adjacent_spaces › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"Arrow function has too many lines (18). Maximum allowed is 15.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Shek-Nowshik66 › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"Arrow function has too many lines (19). Maximum allowed is 15.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Shek-Nowshik66 › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"Arrow function has too many lines (19). Maximum allowed is 15.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Siddhu83 › even_odd › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"'value' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Siddhu83 › remove_adjacent_spaces › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (18). Maximum allowed is 15.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Siddhu83 › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (18). Maximum allowed is 15.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Siddhu83 › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (28). Maximum allowed is 15.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › SkAkramali › categorise › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"'temporary' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › SkAkramali › remove_adjacent_spaces › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"Arrow function has too many lines (27). Maximum allowed is 15.\",\n    +   \"'TEXT' is already declared in the upper scope on line 2 column 7.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › SkAkramali › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 5\n\n    - Array []\n    + Array [\n    +   \"Arrow function has too many lines (22). Maximum allowed is 15.\",\n    +   \"Unnecessary 'else' after 'return'.\",\n    +   \"Unnecessary use of boolean literals in conditional expression.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Sravani175 › even_odd › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"'mine' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Sravani175 › categorise › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 8\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'groupNumbers' has too many lines (16). Maximum allowed is 15.\",\n    +   \"'num' is never reassigned. Use 'const' instead.\",\n    +   \"'arrays' is never reassigned. Use 'const' instead.\",\n    +   \"'keys' is never reassigned. Use 'const' instead.\",\n    +   \"'k' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Sravani175 › entries › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 5\n\n    - Array []\n    + Array [\n    +   \"'OBJECT' is already declared in the upper scope on line 3 column 7.\",\n    +   \"'mine' is never reassigned. Use 'const' instead.\",\n    +   \"'index' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Sravani175 › remove_adjacent_spaces › should remove extra spaces when TEXT contains only 1 extra space\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   \"One extra space!!!\",\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › remove_adjacent_spaces › should remove extra spaces when TEXT contains multiple extra spaces\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   \"Multiple extra spaces!!!\",\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › remove_adjacent_spaces › should remove extra spaces when TEXT contains only space\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   \"\",\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › remove_adjacent_spaces › should remove extra spaces when TEXT is empty string\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   \"\",\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › remove_adjacent_spaces › should remove extra spaces when TEXT is a single word\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   \"SingleWord\",\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › remove_adjacent_spaces › should remove extra spaces when TEXT is a single character\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   \"a\",\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › remove_adjacent_spaces › should remove extra spaces when TEXT has no spaces\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   \"ItsALongSentenceWithoutAnySpaces\",\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › remove_adjacent_spaces › should remove extra spaces when TEXT has leading spaces\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   \"Leading spaces!!!\",\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › remove_adjacent_spaces › should remove extra spaces when TEXT  has leading & trailing spaces\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   \"Leading spaces!!! & Trailing Spaces!!!\",\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › remove_adjacent_spaces › should remove extra spaces when TEXT has trailing spaces\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   \"Trailing Spaces!!!\",\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › remove_adjacent_spaces › should remove extra spaces when TEXT has mixed spaces & tabs\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   \"String \t with \t spaces \t and \t tabs!!!\",\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › remove_adjacent_spaces › should remove extra spaces when TEXT has mixed spaces & newlines\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 7\n    + Received  + 1\n\n    - Array [\n    -   \"String \n    -  with \n    -  spaces \n    -  and \n    -  newlines!!!\",\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › remove_adjacent_spaces › should remove extra spaces when TEXT is numeric string with spaces\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   \"123 456 789\",\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › remove_adjacent_spaces › should remove extra spaces when TEXT is multi lingual string with spaces\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   \"こんにちは 世界\",\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › remove_adjacent_spaces › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"'TEXT' is assigned a value but never used.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Sravani175 › tribonacci › should print the sequence for ENDING_RANGE=7\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 11\n    + Received  +  1\n\n    - Array [\n    -   Array [\n    -     0,\n    -     0,\n    -     1,\n    -     1,\n    -     2,\n    -     4,\n    -     7,\n    -   ],\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › tribonacci › should print the sequence for ENDING_RANGE=24\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 13\n    + Received  +  1\n\n    - Array [\n    -   Array [\n    -     0,\n    -     0,\n    -     1,\n    -     1,\n    -     2,\n    -     4,\n    -     7,\n    -     13,\n    -     24,\n    -   ],\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › tribonacci › should print the sequence for ENDING_RANGE=100\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 15\n    + Received  +  1\n\n    - Array [\n    -   Array [\n    -     0,\n    -     0,\n    -     1,\n    -     1,\n    -     2,\n    -     4,\n    -     7,\n    -     13,\n    -     24,\n    -     44,\n    -     81,\n    -   ],\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › tribonacci › should print the sequence for ENDING_RANGE=300\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 17\n    + Received  +  1\n\n    - Array [\n    -   Array [\n    -     0,\n    -     0,\n    -     1,\n    -     1,\n    -     2,\n    -     4,\n    -     7,\n    -     13,\n    -     24,\n    -     44,\n    -     81,\n    -     149,\n    -     274,\n    -   ],\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › tribonacci › should print the sequence for ENDING_RANGE=2\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 9\n    + Received  + 1\n\n    - Array [\n    -   Array [\n    -     0,\n    -     0,\n    -     1,\n    -     1,\n    -     2,\n    -   ],\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › tribonacci › should print the sequence for ENDING_RANGE=1\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 8\n    + Received  + 1\n\n    - Array [\n    -   Array [\n    -     0,\n    -     0,\n    -     1,\n    -     1,\n    -   ],\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › tribonacci › should print the sequence for ENDING_RANGE=0\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 6\n    + Received  + 1\n\n    - Array [\n    -   Array [\n    -     0,\n    -     0,\n    -   ],\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › tribonacci › should print the sequence for ENDING_RANGE=-1\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   Array [],\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › tribonacci › should print the sequence for ENDING_RANGE=-2\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   Array [],\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › tribonacci › should print the sequence for ENDING_RANGE=-10\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   Array [],\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › tribonacci › should print the sequence when ENDING_RANGE is a larger number\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 22\n    + Received  +  1\n\n    - Array [\n    -   Array [\n    -     0,\n    -     0,\n    -     1,\n    -     1,\n    -     2,\n    -     4,\n    -     7,\n    -     13,\n    -     24,\n    -     44,\n    -     81,\n    -     149,\n    -     274,\n    -     504,\n    -     927,\n    -     1705,\n    -     3136,\n    -     5768,\n    -   ],\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › tribonacci › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"'ENDING_RANGE' is assigned a value but never used.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Sravani175 › array_equals › should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   true,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › array_equals › should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › array_equals › should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › array_equals › should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › array_equals › should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   true,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › array_equals › should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › array_equals › should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › array_equals › should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   true,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › array_equals › should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   true,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › array_equals › should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › array_equals › should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › array_equals › should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   true,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › array_equals › should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › array_equals › should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › array_equals › should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › array_equals › should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › array_equals › should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › array_equals › should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › array_equals › should log true when given two very large arrays with same data\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   true,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › array_equals › should log false when given two very large arrays with different data\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › array_equals › should log true when given two arrays are null\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   true,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › array_equals › should log true when given two deep arrays are equal\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   true,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"'ARRAY_1' is assigned a value but never used.\",\n    +   \"'ARRAY_2' is assigned a value but never used.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Sravani175 › object_equals › should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   true,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › object_equals › should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › object_equals › should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › object_equals › should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › object_equals › should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   true,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › object_equals › should log true when OBJECT_1={} and OBJECT_2={}\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   true,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › object_equals › should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › object_equals › should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   true,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › object_equals › should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › object_equals › should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   true,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › object_equals › should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   true,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › object_equals › should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › object_equals › should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › object_equals › should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   true,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › object_equals › should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › object_equals › should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › object_equals › should log true when OBJECT_1=null and OBJECT_2=null\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   true,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › Sravani175 › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"'OBJECT_1' is assigned a value but never used.\",\n    +   \"'OBJECT_2' is assigned a value but never used.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Sreenayak › even_odd › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 6\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Identifier 'even_odd' is not in camel case.\",\n    +   \"'NUMBERS' is already declared in the upper scope on line 3 column 7.\",\n    +   \"'finalresult' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Sreenayak › categorise › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 7\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'categorise' has too many lines (31). Maximum allowed is 15.\",\n    +   \"'NUMBERS' is already declared in the upper scope on line 3 column 7.\",\n    +   \"'result' is never reassigned. Use 'const' instead.\",\n    +   \"'temp' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Sreenayak › entries › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 6\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'entries' has too many lines (17). Maximum allowed is 15.\",\n    +   \"'result' is never reassigned. Use 'const' instead.\",\n    +   \"'keys' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Sreenayak › remove_adjacent_spaces › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 8\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'removeextraSpaces' has too many lines (19). Maximum allowed is 15.\",\n    +   \"'TEXT' is already declared in the upper scope on line 3 column 7.\",\n    +   \"'empty' is never reassigned. Use 'const' instead.\",\n    +   \"'char' is never reassigned. Use 'const' instead.\",\n    +   \"Expected '!==' and instead saw '!='.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Sreenayak › tribonacci › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  -  1\n    + Received  + 15\n\n    - Array []\n    + Array [\n    +   \"Identifier 'first_Number' is not in camel case.\",\n    +   \"Identifier 'second_Number' is not in camel case.\",\n    +   \"Identifier 'third_Number' is not in camel case.\",\n    +   \"'tribona' is never reassigned. Use 'const' instead.\",\n    +   \"Identifier 'first_Number' is not in camel case.\",\n    +   \"Identifier 'first_Number' is not in camel case.\",\n    +   \"Identifier 'second_Number' is not in camel case.\",\n    +   \"Identifier 'third_Number' is not in camel case.\",\n    +   \"Identifier 'first_Number' is not in camel case.\",\n    +   \"Identifier 'second_Number' is not in camel case.\",\n    +   \"Identifier 'second_Number' is not in camel case.\",\n    +   \"Identifier 'third_Number' is not in camel case.\",\n    +   \"Identifier 'third_Number' is not in camel case.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Sreenayak › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 6\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'arrayequal' has too many lines (24). Maximum allowed is 15.\",\n    +   \"Unnecessary 'else' after 'return'.\",\n    +   \"'v' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Sreenayak › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  -  1\n    + Received  + 10\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'checkEquailty' has too many lines (33). Maximum allowed is 15.\",\n    +   \"'key' is assigned a value but never used.\",\n    +   \"'key' is never reassigned. Use 'const' instead.\",\n    +   \"'key' is assigned a value but never used.\",\n    +   \"'key' is never reassigned. Use 'const' instead.\",\n    +   \"'key' is never reassigned. Use 'const' instead.\",\n    +   \"Unexpected if as the only statement in an else block.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Triveni12062006 › even_odd › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"'NUMBERS' is already declared in the upper scope on line 3 column 7.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Triveni12062006 › categorise › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 6\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'cat' has too many lines (22). Maximum allowed is 15.\",\n    +   \"'NUMBERS' is already declared in the upper scope on line 3 column 7.\",\n    +   \"'number' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Triveni12062006 › entries › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 6\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"'OBJECT' is already declared in the upper scope on line 3 column 7.\",\n    +   \"'result' is never reassigned. Use 'const' instead.\",\n    +   \"'arr' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Triveni12062006 › remove_adjacent_spaces › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 7\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'space' has too many lines (26). Maximum allowed is 15.\",\n    +   \"'TEXT' is already declared in the upper scope on line 3 column 7.\",\n    +   \"Expected '===' and instead saw '=='.\",\n    +   \"Expected '===' and instead saw '=='.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Triveni12062006 › tribonacci › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 6\n\n    - Array []\n    + Array [\n    +   \"'number' is never reassigned. Use 'const' instead.\",\n    +   \"Expected a function expression.\",\n    +   \"'number' is already declared in the upper scope on line 26 column 5.\",\n    +   \"'result' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Triveni12062006 › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 9\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'arrayEqual' has too many lines (20). Maximum allowed is 15.\",\n    +   \"Unnecessary 'else' after 'return'.\",\n    +   \"'array' was used before it was defined.\",\n    +   \"'array' was used before it was defined.\",\n    +   \"Expected a function expression.\",\n    +   \"Expected '!==' and instead saw '!='.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Triveni12062006 › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  -  1\n    + Received  + 10\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'objectEqual' has too many lines (23). Maximum allowed is 15.\",\n    +   \"Unnecessary 'else' after 'return'.\",\n    +   \"'key' is never reassigned. Use 'const' instead.\",\n    +   \"'objKey' was used before it was defined.\",\n    +   \"'objKey' was used before it was defined.\",\n    +   \"Expected a function expression.\",\n    +   \"Expected '!==' and instead saw '!='.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › VETR1-V1GNESH › even_odd › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"'answerObject' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › VETR1-V1GNESH › categorise › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 7\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'categoriseElements' has too many lines (36). Maximum allowed is 15.\",\n    +   \"'newArray' is never reassigned. Use 'const' instead.\",\n    +   \"'temp' is never reassigned. Use 'const' instead.\",\n    +   \"'finalArray' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › VETR1-V1GNESH › entries › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 5\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"'answerArray' is never reassigned. Use 'const' instead.\",\n    +   \"'key' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › VETR1-V1GNESH › remove_adjacent_spaces › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 5\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'removeAdjacentSpace' has too many lines (29). Maximum allowed is 15.\",\n    +   \"'index' is already declared in the upper scope on line 35 column 7.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › VETR1-V1GNESH › tribonacci › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"'answerArray' is never reassigned. Use 'const' instead.\",\n    +   \"Expected a function expression.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › VETR1-V1GNESH › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'findEqual' has too many lines (17). Maximum allowed is 15.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › VETR1-V1GNESH › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'findEqual' has too many lines (24). Maximum allowed is 15.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › VUPPUKULADEEP › even_odd › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"'NUMBERS' is already declared in the upper scope on line 3 column 7.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › VUPPUKULADEEP › categorise › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 5\n\n    - Array []\n    + Array [\n    +   \"Arrow function has too many lines (16). Maximum allowed is 15.\",\n    +   \"'NUMBERS' is already declared in the upper scope on line 3 column 7.\",\n    +   \"'seperate' was used before it was defined.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › VUPPUKULADEEP › remove_adjacent_spaces › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 5\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (17). Maximum allowed is 15.\",\n    +   \"'copyText' is already declared in the upper scope on line 32 column 7.\",\n    +   \"'addWords' was used before it was defined.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › VUPPUKULADEEP › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  -  1\n    + Received  + 19\n\n    - Array []\n    + Array [\n    +   \"Arrow function has too many lines (27). Maximum allowed is 15.\",\n    +   \"Identifier 'array_1' is not in camel case.\",\n    +   \"Identifier 'array_2' is not in camel case.\",\n    +   \"Identifier 'array_1' is not in camel case.\",\n    +   \"Identifier 'array_2' is not in camel case.\",\n    +   \"Identifier 'array_1' is not in camel case.\",\n    +   \"Identifier 'array_2' is not in camel case.\",\n    +   \"'maxLength' is never reassigned. Use 'const' instead.\",\n    +   \"Identifier 'array_1' is not in camel case.\",\n    +   \"Identifier 'array_1' is not in camel case.\",\n    +   \"Identifier 'array_2' is not in camel case.\",\n    +   \"Identifier 'array_1' is not in camel case.\",\n    +   \"Identifier 'array_2' is not in camel case.\",\n    +   \"Identifier 'array_1' is not in camel case.\",\n    +   \"Identifier 'array_2' is not in camel case.\",\n    +   \"'firstArray' is never reassigned. Use 'const' instead.\",\n    +   \"'secondArray' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › VUPPUKULADEEP › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 6\n\n    - Array []\n    + Array [\n    +   \"Arrow function has too many lines (22). Maximum allowed is 15.\",\n    +   \"'key' is never reassigned. Use 'const' instead.\",\n    +   \"'object1' is never reassigned. Use 'const' instead.\",\n    +   \"'object2' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Venkat14424 › even_odd › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"Arrow function has too many lines (19). Maximum allowed is 15.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Venkat14424 › categorise › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"Arrow function has too many lines (22). Maximum allowed is 15.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Venkat14424 › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"Arrow function has too many lines (20). Maximum allowed is 15.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › Venkat14424 › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"Arrow function has too many lines (24). Maximum allowed is 15.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › YMOURYA25 › categorise › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 6\n\n    - Array []\n    + Array [\n    +   \"Arrow function has too many lines (31). Maximum allowed is 15.\",\n    +   \"'NUM' is defined but never used.\",\n    +   \"'groupArray' is never reassigned. Use 'const' instead.\",\n    +   \"'temp' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › YMOURYA25 › remove_adjacent_spaces › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 6\n\n    - Array []\n    + Array [\n    +   \"Identifier 'remove_spaces' is not in camel case.\",\n    +   \"Arrow function has too many lines (28). Maximum allowed is 15.\",\n    +   \"'arr' is defined but never used.\",\n    +   \"'length' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › YMOURYA25 › tribonacci › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 6\n\n    - Array []\n    + Array [\n    +   \"'ENDING_RANGE' is already declared in the upper scope on line 3 column 7.\",\n    +   \"Identifier 'tribonacci_array' is not in camel case.\",\n    +   \"Identifier 'tribonacci_array' is not in camel case.\",\n    +   \"Identifier 'tribonacci_array' is not in camel case.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › YMOURYA25 › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"Arrow function has too many lines (25). Maximum allowed is 15.\",\n    +   \"Unnecessary use of boolean literals in conditional expression.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › YMOURYA25 › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"Arrow function has too many lines (41). Maximum allowed is 15.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › balasatish1 › categorise › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"Expected { after 'if' condition.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › balasatish1 › remove_adjacent_spaces › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 6\n\n    - Array []\n    + Array [\n    +   \"Expected { after 'if' condition.\",\n    +   \"Unexpected use of continue statement.\",\n    +   \"Expected { after 'if' condition.\",\n    +   \"Unexpected use of continue statement.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › balasatish1 › tribonacci › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 7\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (18). Maximum allowed is 15.\",\n    +   \"Assignment to function parameter 'numOne'.\",\n    +   \"Assignment to function parameter 'numTwo'.\",\n    +   \"Assignment to function parameter 'numThree'.\",\n    +   \"'eleInArr' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › balasatish1 › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 7\n\n    - Array []\n    + Array [\n    +   \"Arrow function has too many lines (19). Maximum allowed is 15.\",\n    +   \"Expected { after 'if' condition.\",\n    +   \"Expected { after 'if' condition.\",\n    +   \"Expected { after 'if' condition.\",\n    +   \"Unexpected use of continue statement.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › balasatish1 › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 8\n\n    - Array []\n    + Array [\n    +   \"Arrow function has too many lines (20). Maximum allowed is 15.\",\n    +   \"Expected { after 'if' condition.\",\n    +   \"Expected { after 'if' condition.\",\n    +   \"'objKey' is never reassigned. Use 'const' instead.\",\n    +   \"Expected { after 'if' condition.\",\n    +   \"Unexpected use of continue statement.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › harshavardhan-macha › even_odd › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"'NUMBERS' is never reassigned. Use 'const' instead.\",\n    +   \"'summarize' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › harshavardhan-macha › categorise › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 5\n\n    - Array []\n    + Array [\n    +   \"'emptyaray' is never reassigned. Use 'const' instead.\",\n    +   \"'categorize' is never reassigned. Use 'const' instead.\",\n    +   \"'externalaray' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › harshavardhan-macha › entries › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"'entries' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › harshavardhan-macha › remove_adjacent_spaces › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"'filter' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › harshavardhan-macha › tribonacci › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"'tribbonaci' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › harshavardhan-macha › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"'checker' is never reassigned. Use 'const' instead.\",\n    +   \"Arrow function has too many lines (16). Maximum allowed is 15.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › harshavardhan-macha › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"'checker' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › hemeswar9849 › categorise › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (27). Maximum allowed is 15.\",\n    +   \"Assignment to function parameter 'anArray'.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › hemeswar9849 › tribonacci › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 5\n\n    - Array []\n    + Array [\n    +   \"Assignment to function parameter 'first'.\",\n    +   \"Assignment to function parameter 'second'.\",\n    +   \"Assignment to function parameter 'third'.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › hemeswar9849 › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"Arrow function has too many lines (21). Maximum allowed is 15.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › hemeswar9849 › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"Arrow function has too many lines (21). Maximum allowed is 15.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › jayanth-14 › categorise › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 5\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (16). Maximum allowed is 15.\",\n    +   \"Expected { after 'if' condition.\",\n    +   \"Expected { after 'if' condition.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › jayanth-14 › remove_adjacent_spaces › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"Expected { after 'if' condition.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › jayanth-14 › tribonacci › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"Unnecessary 'else' after 'return'.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › jayanth-14 › array_equals › should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   false,\n    +   true,\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › jayanth-14 › array_equals › should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   false,\n    +   true,\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › jayanth-14 › array_equals › should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   false,\n    +   true,\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › jayanth-14 › array_equals › should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   false,\n    +   true,\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › jayanth-14 › array_equals › should log true when given two deep arrays are equal\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   true,\n    +   false,\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › jayanth-14 › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 5\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Expected '!==' and instead saw '!='.\",\n    +   \"Expected { after 'if' condition.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › jayanth-14 › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  -  1\n    + Received  + 11\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (16). Maximum allowed is 15.\",\n    +   \"Expected { after 'if' condition.\",\n    +   \"Expected { after 'if' condition.\",\n    +   \"Expected { after 'if' condition.\",\n    +   \"Expected { after 'if' condition.\",\n    +   \"'key' is never reassigned. Use 'const' instead.\",\n    +   \"Expected { after 'if' condition.\",\n    +   \"Expected { after 'if' condition.\",\n    +   \"Expected { after 'if' condition.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › kumarnandeesh › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (19). Maximum allowed is 15.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › kumarnandeesh › object_equals › should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   false,\n    +   true,\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › kumarnandeesh › object_equals › should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   false,\n    +   true,\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › kumarnandeesh › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 8\n\n    - Array []\n    + Array [\n    +   \"Identifier 'obj_1' is not in camel case.\",\n    +   \"Identifier 'obj_2' is not in camel case.\",\n    +   \"'key' is assigned a value but never used.\",\n    +   \"Identifier 'obj_1' is not in camel case.\",\n    +   \"'key' is assigned a value but never used.\",\n    +   \"Identifier 'obj_2' is not in camel case.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › mr-mouli03 › even_odd › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › mr-mouli03 › categorise › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  -  1\n    + Received  + 10\n\n    - Array []\n    + Array [\n    +   \"'sort' was used before it was defined.\",\n    +   \"Expected a function expression.\",\n    +   \"'NUMBERS' is already declared in the upper scope on line 3 column 7.\",\n    +   \"Expected { after 'for' condition.\",\n    +   \"Expected a function expression.\",\n    +   \"'sortedList' is never reassigned. Use 'const' instead.\",\n    +   \"Expected a function expression.\",\n    +   \"'sortedList' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › mr-mouli03 › entries › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › mr-mouli03 › remove_adjacent_spaces › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 5\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'removeAdjacentSpaces' has too many lines (16). Maximum allowed is 15.\",\n    +   \"'character' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › mr-mouli03 › tribonacci › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"'ENDING_RANGE' is already declared in the upper scope on line 3 column 7.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › mr-mouli03 › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 9\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'arraysEqual' has too many lines (29). Maximum allowed is 15.\",\n    +   \"Expected '===' and instead saw '=='.\",\n    +   \"'stack1' is never reassigned. Use 'const' instead.\",\n    +   \"'stack2' is never reassigned. Use 'const' instead.\",\n    +   \"'currentArray1' is never reassigned. Use 'const' instead.\",\n    +   \"'currentArray2' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › mr-mouli03 › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  -  1\n    + Received  + 10\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'isEqualObject' has too many lines (31). Maximum allowed is 15.\",\n    +   \"Expected '===' and instead saw '=='.\",\n    +   \"Expected '===' and instead saw '=='.\",\n    +   \"Expected '===' and instead saw '=='.\",\n    +   \"'bool' is never reassigned. Use 'const' instead.\",\n    +   \"Blocks are nested too deeply (5). Maximum allowed is 4.\",\n    +   \"Expected '===' and instead saw '=='.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › naveen-kumar-vadla › tribonacci › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"Arrow function has too many lines (19). Maximum allowed is 15.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › naveen-kumar-vadla › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  -  1\n    + Received  + 22\n\n    - Array []\n    + Array [\n    +   \"Arrow function has too many lines (37). Maximum allowed is 15.\",\n    +   \"Expected '===' and instead saw '=='.\",\n    +   \"Identifier 'array_1_length' is not in camel case.\",\n    +   \"Identifier 'array_2_length' is not in camel case.\",\n    +   \"Identifier 'array_1_length' is not in camel case.\",\n    +   \"Identifier 'array_2_length' is not in camel case.\",\n    +   \"Identifier 'array_1_length' is not in camel case.\",\n    +   \"Identifier 'array_1_element' is not in camel case.\",\n    +   \"Identifier 'array_2_element' is not in camel case.\",\n    +   \"Identifier 'is_array_1_element_array' is not in camel case.\",\n    +   \"Identifier 'is_array_2_element_array' is not in camel case.\",\n    +   \"Identifier 'array_1_element' is not in camel case.\",\n    +   \"Identifier 'array_2_element' is not in camel case.\",\n    +   \"Identifier 'is_array_1_element_array' is not in camel case.\",\n    +   \"Identifier 'is_array_2_element_array' is not in camel case.\",\n    +   \"Identifier 'is_array_1_element_array' is not in camel case.\",\n    +   \"Identifier 'is_array_2_element_array' is not in camel case.\",\n    +   \"Unexpected use of continue statement.\",\n    +   \"Identifier 'array_1_element' is not in camel case.\",\n    +   \"Identifier 'array_2_element' is not in camel case.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › naveen-kumar-vadla › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  -  1\n    + Received  + 30\n\n    - Array []\n    + Array [\n    +   \"Arrow function has too many lines (38). Maximum allowed is 15.\",\n    +   \"Identifier 'object_1_keys' is not in camel case.\",\n    +   \"Identifier 'object_2_keys' is not in camel case.\",\n    +   \"Identifier 'object_1_keys' is not in camel case.\",\n    +   \"Identifier 'object_2_keys' is not in camel case.\",\n    +   \"Identifier 'object_1_keys' is not in camel case.\",\n    +   \"Identifier 'object_1_value' is not in camel case.\",\n    +   \"Identifier 'object_2_value' is not in camel case.\",\n    +   \"Identifier 'object_1_value_type' is not in camel case.\",\n    +   \"Identifier 'object_1_value' is not in camel case.\",\n    +   \"Identifier 'object_2_value_type' is not in camel case.\",\n    +   \"Identifier 'object_2_value' is not in camel case.\",\n    +   \"Identifier 'is_object_1_value_object' is not in camel case.\",\n    +   \"Identifier 'object_1_value_type' is not in camel case.\",\n    +   \"Expected '===' and instead saw '=='.\",\n    +   \"Identifier 'is_object_2_value_object' is not in camel case.\",\n    +   \"Identifier 'object_2_value_type' is not in camel case.\",\n    +   \"Expected '===' and instead saw '=='.\",\n    +   \"Identifier 'object_1_value_type' is not in camel case.\",\n    +   \"Identifier 'object_2_value_type' is not in camel case.\",\n    +   \"Identifier 'is_object_1_value_object' is not in camel case.\",\n    +   \"Identifier 'is_object_2_value_object' is not in camel case.\",\n    +   \"Identifier 'is_object_1_value_object' is not in camel case.\",\n    +   \"Identifier 'is_object_2_value_object' is not in camel case.\",\n    +   \"Unexpected use of continue statement.\",\n    +   \"Identifier 'object_1_value' is not in camel case.\",\n    +   \"Expected '!==' and instead saw '!='.\",\n    +   \"Identifier 'object_2_value' is not in camel case.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › nithindenkada › even_odd › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 7\n\n    - Array []\n    + Array [\n    +   \"'evenOddSeperation' was used before it was defined.\",\n    +   \"Expected a function expression.\",\n    +   \"'numbers' is already declared in the upper scope on line 19 column 5.\",\n    +   \"'even' is never reassigned. Use 'const' instead.\",\n    +   \"'odd' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › nithindenkada › categorise › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  -  1\n    + Received  + 13\n\n    - Array []\n    + Array [\n    +   \"'copyOfNumbers' is never reassigned. Use 'const' instead.\",\n    +   \"'sortingGrouping' was used before it was defined.\",\n    +   \"Expected a function expression.\",\n    +   \"Function 'sortingGrouping' has too many lines (17). Maximum allowed is 15.\",\n    +   \"'copyOfNumbers' is already declared in the upper scope on line 27 column 5.\",\n    +   \"'sortList' is never reassigned. Use 'const' instead.\",\n    +   \"'sorting' was used before it was defined.\",\n    +   \"'category' is never reassigned. Use 'const' instead.\",\n    +   \"Expected a function expression.\",\n    +   \"'copyOfNumbers' is already declared in the upper scope on line 27 column 5.\",\n    +   \"'temporary' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › nithindenkada › entries › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 7\n\n    - Array []\n    + Array [\n    +   \"'myEntries' was used before it was defined.\",\n    +   \"Expected a function expression.\",\n    +   \"'objectCopy' is already declared in the upper scope on line 24 column 5.\",\n    +   \"'output' is never reassigned. Use 'const' instead.\",\n    +   \"'key' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › nithindenkada › remove_adjacent_spaces › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 7\n\n    - Array []\n    + Array [\n    +   \"'finalResult' is never reassigned. Use 'const' instead.\",\n    +   \"'removeAdjacentSpaces' was used before it was defined.\",\n    +   \"Expected a function expression.\",\n    +   \"Function 'removeAdjacentSpaces' has too many lines (27). Maximum allowed is 15.\",\n    +   \"Expected '!==' and instead saw '!='.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › nithindenkada › tribonacci › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  -  1\n    + Received  + 21\n\n    - Array []\n    + Array [\n    +   \"'number' is never reassigned. Use 'const' instead.\",\n    +   \"'number1' is never reassigned. Use 'const' instead.\",\n    +   \"'number2' is never reassigned. Use 'const' instead.\",\n    +   \"'number3' is never reassigned. Use 'const' instead.\",\n    +   \"'number4' is never reassigned. Use 'const' instead.\",\n    +   \"'result' is never reassigned. Use 'const' instead.\",\n    +   \"'finalResult' is never reassigned. Use 'const' instead.\",\n    +   \"'tribonacci' was used before it was defined.\",\n    +   \"Expected a function expression.\",\n    +   \"Function 'tribonacci' has too many lines (17). Maximum allowed is 15.\",\n    +   \"'number1' is already declared in the upper scope on line 25 column 7.\",\n    +   \"'number2' is already declared in the upper scope on line 26 column 7.\",\n    +   \"'number3' is already declared in the upper scope on line 27 column 7.\",\n    +   \"'number4' is already declared in the upper scope on line 28 column 7.\",\n    +   \"Assignment to function parameter 'number1'.\",\n    +   \"Assignment to function parameter 'number2'.\",\n    +   \"Assignment to function parameter 'number3'.\",\n    +   \"Assignment to function parameter 'number4'.\",\n    +   \"Unnecessary 'else' after 'return'.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › nithindenkada › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 6\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'arrayEqualOrNot' has too many lines (19). Maximum allowed is 15.\",\n    +   \"Expected '!==' and instead saw '!='.\",\n    +   \"Expected '!==' and instead saw '!='.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › nithindenkada › object_equals › should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}\n\n    evalmachine.<anonymous>:38\n      let array_1 = Object.keys(obj1);\n                           ^\n\n    TypeError: Cannot convert undefined or null to object\n        at Function.keys (<anonymous>)\n\n      at objectEqual (evalmachine.<anonymous>:38:24)\n      at objectEqual (evalmachine.<anonymous>:51:18)\n      at evalmachine.<anonymous>:34:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● JS-AOFS › nithindenkada › object_equals › should log true when OBJECT_1=null and OBJECT_2=null\n\n    evalmachine.<anonymous>:38\n      let array_1 = Object.keys(obj1);\n                           ^\n\n    TypeError: Cannot convert undefined or null to object\n        at Function.keys (<anonymous>)\n\n      at objectEqual (evalmachine.<anonymous>:38:24)\n      at evalmachine.<anonymous>:34:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● JS-AOFS › nithindenkada › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  -  1\n    + Received  + 23\n\n    - Array []\n    + Array [\n    +   \"'objectEqual' was used before it was defined.\",\n    +   \"Expected a function expression.\",\n    +   \"Function 'objectEqual' has too many lines (25). Maximum allowed is 15.\",\n    +   \"Identifier 'array_1' is not in camel case.\",\n    +   \"'array_1' is never reassigned. Use 'const' instead.\",\n    +   \"Identifier 'array_2' is not in camel case.\",\n    +   \"'array_2' is never reassigned. Use 'const' instead.\",\n    +   \"Identifier 'array_1' is not in camel case.\",\n    +   \"Expected '!==' and instead saw '!='.\",\n    +   \"Identifier 'array_2' is not in camel case.\",\n    +   \"Identifier 'array_1' is not in camel case.\",\n    +   \"Identifier 'array_2' is not in camel case.\",\n    +   \"Identifier 'array_1' is not in camel case.\",\n    +   \"Identifier 'array_2' is not in camel case.\",\n    +   \"Identifier 'array_1' is not in camel case.\",\n    +   \"Identifier 'array_2' is not in camel case.\",\n    +   \"Identifier 'array_1' is not in camel case.\",\n    +   \"Identifier 'array_2' is not in camel case.\",\n    +   \"Identifier 'array_1' is not in camel case.\",\n    +   \"Identifier 'array_2' is not in camel case.\",\n    +   \"Expected '===' and instead saw '=='.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › nithish-29 › categorise › should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]\n\n    evalmachine.<anonymous>:43\n            const arr = [number[search]];\n                         ^\n\n    ReferenceError: number is not defined\n\n      at categorise (evalmachine.<anonymous>:43:22)\n      at evalmachine.<anonymous>:54:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● JS-AOFS › nithish-29 › categorise › should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]\n\n    evalmachine.<anonymous>:43\n            const arr = [number[search]];\n                         ^\n\n    ReferenceError: number is not defined\n\n      at categorise (evalmachine.<anonymous>:43:22)\n      at evalmachine.<anonymous>:54:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● JS-AOFS › nithish-29 › categorise › should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]\n\n    evalmachine.<anonymous>:43\n            const arr = [number[search]];\n                         ^\n\n    ReferenceError: number is not defined\n\n      at categorise (evalmachine.<anonymous>:43:22)\n      at evalmachine.<anonymous>:54:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● JS-AOFS › nithish-29 › categorise › should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]\n\n    evalmachine.<anonymous>:43\n            const arr = [number[search]];\n                         ^\n\n    ReferenceError: number is not defined\n\n      at categorise (evalmachine.<anonymous>:43:22)\n      at evalmachine.<anonymous>:54:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● JS-AOFS › nithish-29 › categorise › should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]\n\n    evalmachine.<anonymous>:43\n            const arr = [number[search]];\n                         ^\n\n    ReferenceError: number is not defined\n\n      at categorise (evalmachine.<anonymous>:43:22)\n      at evalmachine.<anonymous>:54:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● JS-AOFS › nithish-29 › categorise › should group by value NUMBERS is an array with large numbers\n\n    evalmachine.<anonymous>:43\n            const arr = [number[search]];\n                         ^\n\n    ReferenceError: number is not defined\n\n      at categorise (evalmachine.<anonymous>:43:22)\n      at evalmachine.<anonymous>:54:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● JS-AOFS › nithish-29 › categorise › should group by value NUMBERS is an array with single element [7]\n\n    evalmachine.<anonymous>:43\n            const arr = [number[search]];\n                         ^\n\n    ReferenceError: number is not defined\n\n      at categorise (evalmachine.<anonymous>:43:22)\n      at evalmachine.<anonymous>:54:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● JS-AOFS › nithish-29 › categorise › should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]\n\n    evalmachine.<anonymous>:43\n            const arr = [number[search]];\n                         ^\n\n    ReferenceError: number is not defined\n\n      at categorise (evalmachine.<anonymous>:43:22)\n      at evalmachine.<anonymous>:54:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● JS-AOFS › nithish-29 › categorise › should group by value NUMBERS is an array with large no.of elements\n\n    evalmachine.<anonymous>:43\n            const arr = [number[search]];\n                         ^\n\n    ReferenceError: number is not defined\n\n      at categorise (evalmachine.<anonymous>:43:22)\n      at evalmachine.<anonymous>:54:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● JS-AOFS › nithish-29 › categorise › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"Assignment to function parameter 'numbers'.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › nithish-29 › remove_adjacent_spaces › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (16). Maximum allowed is 15.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › nithish-29 › tribonacci › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 5\n\n    - Array []\n    + Array [\n    +   \"Assignment to function parameter 'firstNum'.\",\n    +   \"Assignment to function parameter 'secondNum'.\",\n    +   \"Assignment to function parameter 'thridNum'.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › nithish-29 › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (28). Maximum allowed is 15.\",\n    +   \"Unnecessary 'else' after 'return'.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › nithish-29 › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 5\n\n    - Array []\n    + Array [\n    +   \"'equalObjects' was used before it was defined.\",\n    +   \"'equal' is assigned a value but never used.\",\n    +   \"'equal' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › omkardalu › categorise › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (17). Maximum allowed is 15.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › omkardalu › tribonacci › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (23). Maximum allowed is 15.\",\n    +   \"Unnecessary 'else' after 'return'.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › sampathkumarreddy123 › remove_adjacent_spaces › should remove extra spaces when TEXT  has leading & trailing spaces\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   \"Leading spaces!!! & Trailing Spaces!!!\",\n    +   \"Leading spaces!!! & Trailing Spaces!!! \",\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › sampathkumarreddy123 › remove_adjacent_spaces › should remove extra spaces when TEXT has trailing spaces\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   \"Trailing Spaces!!!\",\n    +   \"Trailing Spaces!!! \",\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › sampathkumarreddy123 › remove_adjacent_spaces › should remove extra spaces when TEXT is multi lingual string with spaces\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   \"こんにちは 世界\",\n    +   \"こんにちは 世界 \",\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › sampathkumarreddy123 › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"Arrow function has too many lines (19). Maximum allowed is 15.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › sampathkumarreddy123 › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"Arrow function has too many lines (20). Maximum allowed is 15.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › siriBaratam › remove_adjacent_spaces › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (24). Maximum allowed is 15.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › siriBaratam › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (23). Maximum allowed is 15.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › siriBaratam › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 5\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (28). Maximum allowed is 15.\",\n    +   \"'firstInnerObject' is never reassigned. Use 'const' instead.\",\n    +   \"'secondInnerObject' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › sohan-29 › even_odd › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 7\n\n    - Array []\n    + Array [\n    +   \"'numbers' is never reassigned. Use 'const' instead.\",\n    +   \"Expected a function expression.\",\n    +   \"'numbers' is already declared in the upper scope on line 19 column 5.\",\n    +   \"'even' is never reassigned. Use 'const' instead.\",\n    +   \"'odd' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › sohan-29 › categorise › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 8\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'sortAndGroup' has too many lines (16). Maximum allowed is 15.\",\n    +   \"'list' is already declared in the upper scope on line 27 column 7.\",\n    +   \"'sort' was used before it was defined.\",\n    +   \"Expected a function expression.\",\n    +   \"'list' is already declared in the upper scope on line 27 column 7.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › sohan-29 › entries › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 5\n\n    - Array []\n    + Array [\n    +   \"'objects' is never reassigned. Use 'const' instead.\",\n    +   \"Expected a function expression.\",\n    +   \"'objects' is already declared in the upper scope on line 24 column 5.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › sohan-29 › remove_adjacent_spaces › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 7\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Expected { after 'if' condition.\",\n    +   \"Unexpected use of continue statement.\",\n    +   \"Expected { after 'if' condition.\",\n    +   \"Unexpected use of continue statement.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › sohan-29 › tribonacci › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 7\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"'ENDING_RANGE' is already declared in the upper scope on line 3 column 7.\",\n    +   \"'firstNumber' is already declared in the upper scope on line 24 column 7.\",\n    +   \"'secondNumber' is already declared in the upper scope on line 24 column 24.\",\n    +   \"'thirdNumber' is already declared in the upper scope on line 24 column 42.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › sohan-29 › array_equals › should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   true,\n    +   undefined,\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › sohan-29 › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 8\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'isEqual' has too many lines (22). Maximum allowed is 15.\",\n    +   \"Expected { after 'if' condition.\",\n    +   \"Expected { after 'if' condition.\",\n    +   \"Expected { after 'if' condition.\",\n    +   \"Expected { after 'else'.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › sohan-29 › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 7\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression.\",\n    +   \"Function 'isEqual' has too many lines (21). Maximum allowed is 15.\",\n    +   \"Expected { after 'if' condition.\",\n    +   \"Expected { after 'if' condition.\",\n    +   \"Expected { after 'if' condition.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › suneethalokarapu › even_odd › should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]\n\n    Code ran more than 1.5 seconds. Please optimise your code or make sure to not have any INFINITE LOOPS\n\n    \u001b[0m \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\n     \u001b[90m    |\u001b[39m                         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 43 |\u001b[39m                     \u001b[32m'Code ran more than 1.5 seconds. Please optimise your code or make sure to not have any INFINITE LOOPS'\u001b[39m\n     \u001b[90m 44 |\u001b[39m                   )\u001b[33m;\u001b[39m\n     \u001b[90m 45 |\u001b[39m                 }\u001b[0m\n\n      at Object.<anonymous> (test/test.js:42:25)\n\n  ● JS-AOFS › suneethalokarapu › even_odd › should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]\n\n    Code ran more than 1.5 seconds. Please optimise your code or make sure to not have any INFINITE LOOPS\n\n    \u001b[0m \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\n     \u001b[90m    |\u001b[39m                         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 43 |\u001b[39m                     \u001b[32m'Code ran more than 1.5 seconds. Please optimise your code or make sure to not have any INFINITE LOOPS'\u001b[39m\n     \u001b[90m 44 |\u001b[39m                   )\u001b[33m;\u001b[39m\n     \u001b[90m 45 |\u001b[39m                 }\u001b[0m\n\n      at Object.<anonymous> (test/test.js:42:25)\n\n  ● JS-AOFS › suneethalokarapu › even_odd › should print object with even, odd numbers when NUMBERS = []\n\n    Code ran more than 1.5 seconds. Please optimise your code or make sure to not have any INFINITE LOOPS\n\n    \u001b[0m \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\n     \u001b[90m    |\u001b[39m                         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 43 |\u001b[39m                     \u001b[32m'Code ran more than 1.5 seconds. Please optimise your code or make sure to not have any INFINITE LOOPS'\u001b[39m\n     \u001b[90m 44 |\u001b[39m                   )\u001b[33m;\u001b[39m\n     \u001b[90m 45 |\u001b[39m                 }\u001b[0m\n\n      at Object.<anonymous> (test/test.js:42:25)\n\n  ● JS-AOFS › suneethalokarapu › even_odd › should print object with even, odd numbers when NUMBERS contains only even numbers\n\n    Code ran more than 1.5 seconds. Please optimise your code or make sure to not have any INFINITE LOOPS\n\n    \u001b[0m \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\n     \u001b[90m    |\u001b[39m                         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 43 |\u001b[39m                     \u001b[32m'Code ran more than 1.5 seconds. Please optimise your code or make sure to not have any INFINITE LOOPS'\u001b[39m\n     \u001b[90m 44 |\u001b[39m                   )\u001b[33m;\u001b[39m\n     \u001b[90m 45 |\u001b[39m                 }\u001b[0m\n\n      at Object.<anonymous> (test/test.js:42:25)\n\n  ● JS-AOFS › suneethalokarapu › even_odd › should print object with even, odd numbers when NUMBERS contains only odd numbers\n\n    Code ran more than 1.5 seconds. Please optimise your code or make sure to not have any INFINITE LOOPS\n\n    \u001b[0m \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\n     \u001b[90m    |\u001b[39m                         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 43 |\u001b[39m                     \u001b[32m'Code ran more than 1.5 seconds. Please optimise your code or make sure to not have any INFINITE LOOPS'\u001b[39m\n     \u001b[90m 44 |\u001b[39m                   )\u001b[33m;\u001b[39m\n     \u001b[90m 45 |\u001b[39m                 }\u001b[0m\n\n      at Object.<anonymous> (test/test.js:42:25)\n\n  ● JS-AOFS › suneethalokarapu › even_odd › should print object with even, odd numbers when NUMBERS contains single even number\n\n    Code ran more than 1.5 seconds. Please optimise your code or make sure to not have any INFINITE LOOPS\n\n    \u001b[0m \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\n     \u001b[90m    |\u001b[39m                         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 43 |\u001b[39m                     \u001b[32m'Code ran more than 1.5 seconds. Please optimise your code or make sure to not have any INFINITE LOOPS'\u001b[39m\n     \u001b[90m 44 |\u001b[39m                   )\u001b[33m;\u001b[39m\n     \u001b[90m 45 |\u001b[39m                 }\u001b[0m\n\n      at Object.<anonymous> (test/test.js:42:25)\n\n  ● JS-AOFS › suneethalokarapu › even_odd › should print object with even, odd numbers when NUMBERS contains single odd number\n\n    Code ran more than 1.5 seconds. Please optimise your code or make sure to not have any INFINITE LOOPS\n\n    \u001b[0m \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\n     \u001b[90m    |\u001b[39m                         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 43 |\u001b[39m                     \u001b[32m'Code ran more than 1.5 seconds. Please optimise your code or make sure to not have any INFINITE LOOPS'\u001b[39m\n     \u001b[90m 44 |\u001b[39m                   )\u001b[33m;\u001b[39m\n     \u001b[90m 45 |\u001b[39m                 }\u001b[0m\n\n      at Object.<anonymous> (test/test.js:42:25)\n\n  ● JS-AOFS › suneethalokarapu › even_odd › should print object with even, odd numbers when NUMBERS contains duplicates\n\n    Code ran more than 1.5 seconds. Please optimise your code or make sure to not have any INFINITE LOOPS\n\n    \u001b[0m \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\n     \u001b[90m    |\u001b[39m                         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 43 |\u001b[39m                     \u001b[32m'Code ran more than 1.5 seconds. Please optimise your code or make sure to not have any INFINITE LOOPS'\u001b[39m\n     \u001b[90m 44 |\u001b[39m                   )\u001b[33m;\u001b[39m\n     \u001b[90m 45 |\u001b[39m                 }\u001b[0m\n\n      at Object.<anonymous> (test/test.js:42:25)\n\n  ● JS-AOFS › suneethalokarapu › categorise › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 6\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (27). Maximum allowed is 15.\",\n    +   \"'NUMBERS' is already declared in the upper scope on line 2 column 7.\",\n    +   \"'result' is never reassigned. Use 'const' instead.\",\n    +   \"'temp' is never reassigned. Use 'const' instead.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › suneethalokarapu › remove_adjacent_spaces › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (16). Maximum allowed is 15.\",\n    +   \"Unexpected use of continue statement.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › suneethalokarapu › array_equals › should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   false,\n    +   true,\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● JS-AOFS › suneethalokarapu › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 5\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (20). Maximum allowed is 15.\",\n    +   \"'res' is never reassigned. Use 'const' instead.\",\n    +   \"Unexpected use of continue statement.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › suneethalokarapu › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 8\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (21). Maximum allowed is 15.\",\n    +   \"'res' is never reassigned. Use 'const' instead.\",\n    +   \"'keys1' is never reassigned. Use 'const' instead.\",\n    +   \"'keys2' is never reassigned. Use 'const' instead.\",\n    +   \"'key' is never reassigned. Use 'const' instead.\",\n    +   \"Unexpected use of continue statement.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › umarfarook07 › categorise › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"Assignment to function parameter 'currentGroup'.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n\n  ● JS-AOFS › umarfarook07 › remove_adjacent_spaces › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"Arrow function has too many lines (21). Maximum allowed is 15.\",\n    + ]\n\n    \u001b[0m \u001b[90m 59 |\u001b[39m               result\u001b[33m.\u001b[39mmessages\u001b[33m.\u001b[39mmap(message \u001b[33m=>\u001b[39m message\u001b[33m.\u001b[39mmessage)\n     \u001b[90m 60 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 61 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 62 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 63 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 64 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:61:30)\n","name":"/home/runner/work/test-suite/test-suite/test/test.js","startTime":1724310572130,"status":"failed","summary":""}],"wasInterrupted":false}
