{"numFailedTestSuites":1,"numFailedTests":205,"numPassedTestSuites":0,"numPassedTests":5252,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":1,"numTotalTests":5457,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1727189095357,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["js-aofs","Amarendra7062","even_odd"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["js-aofs","Amarendra7062","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["js-aofs","Amarendra7062","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["js-aofs","Amarendra7062","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["js-aofs","Amarendra7062","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["js-aofs","Amarendra7062","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["js-aofs","Amarendra7062","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["js-aofs","Amarendra7062","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["js-aofs","Amarendra7062","even_odd"],"duration":220,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Amarendra7062","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["js-aofs","Amarendra7062","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["js-aofs","Amarendra7062","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["js-aofs","Amarendra7062","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["js-aofs","Amarendra7062","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["js-aofs","Amarendra7062","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["js-aofs","Amarendra7062","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["js-aofs","Amarendra7062","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["js-aofs","Amarendra7062","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["js-aofs","Amarendra7062","categorise"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["js-aofs","Amarendra7062","categorise"],"duration":39,"failureDetails":[{"matcherResult":{"actual":["Expected indentation of 0 spaces but found 2. File: js-aofs-Amarendra7062/categorise.js Line: 25","'sorting' was used before it was defined. File: js-aofs-Amarendra7062/categorise.js Line: 27","Trailing spaces not allowed. File: js-aofs-Amarendra7062/categorise.js Line: 48"],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Expected indentation of 0 spaces but found 2. File: js-aofs-Amarendra7062/categorise.js Line: 25\",\n+   \"'sorting' was used before it was defined. File: js-aofs-Amarendra7062/categorise.js Line: 27\",\n+   \"Trailing spaces not allowed. File: js-aofs-Amarendra7062/categorise.js Line: 48\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Expected indentation of 0 spaces but found 2. File: js-aofs-Amarendra7062/categorise.js Line: 25\",\n+   \"'sorting' was used before it was defined. File: js-aofs-Amarendra7062/categorise.js Line: 27\",\n+   \"Trailing spaces not allowed. File: js-aofs-Amarendra7062/categorise.js Line: 48\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:79:30)"],"fullName":"js-aofs Amarendra7062 categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Amarendra7062","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["js-aofs","Amarendra7062","entries"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["js-aofs","Amarendra7062","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["js-aofs","Amarendra7062","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["js-aofs","Amarendra7062","entries"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["js-aofs","Amarendra7062","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["js-aofs","Amarendra7062","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["js-aofs","Amarendra7062","entries"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["js-aofs","Amarendra7062","entries"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["js-aofs","Amarendra7062","entries"],"duration":35,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Amarendra7062","remove_adjacent_spaces"],"duration":7,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:36\n       empty.push(char);\n             ^\n\nTypeError: empty.push is not a function\n    at spacecheck (evalmachine.<anonymous>:36:14)\n    at removeextraSpaces (evalmachine.<anonymous>:45:5)\n    at evalmachine.<anonymous>:51:15\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)"],"fullName":"js-aofs Amarendra7062 remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["js-aofs","Amarendra7062","remove_adjacent_spaces"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:36\n       empty.push(char);\n             ^\n\nTypeError: empty.push is not a function\n    at spacecheck (evalmachine.<anonymous>:36:14)\n    at removeextraSpaces (evalmachine.<anonymous>:45:5)\n    at evalmachine.<anonymous>:51:15\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)"],"fullName":"js-aofs Amarendra7062 remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["js-aofs","Amarendra7062","remove_adjacent_spaces"],"duration":2,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:36\n       empty.push(char);\n             ^\n\nTypeError: empty.push is not a function\n    at spacecheck (evalmachine.<anonymous>:36:14)\n    at removeextraSpaces (evalmachine.<anonymous>:45:5)\n    at evalmachine.<anonymous>:51:15\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)"],"fullName":"js-aofs Amarendra7062 remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["js-aofs","Amarendra7062","remove_adjacent_spaces"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:36\n       empty.push(char);\n             ^\n\nTypeError: empty.push is not a function\n    at spacecheck (evalmachine.<anonymous>:36:14)\n    at removeextraSpaces (evalmachine.<anonymous>:45:5)\n    at evalmachine.<anonymous>:51:15\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)"],"fullName":"js-aofs Amarendra7062 remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["js-aofs","Amarendra7062","remove_adjacent_spaces"],"duration":2,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:36\n       empty.push(char);\n             ^\n\nTypeError: empty.push is not a function\n    at spacecheck (evalmachine.<anonymous>:36:14)\n    at removeextraSpaces (evalmachine.<anonymous>:45:5)\n    at evalmachine.<anonymous>:51:15\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)"],"fullName":"js-aofs Amarendra7062 remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["js-aofs","Amarendra7062","remove_adjacent_spaces"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:36\n       empty.push(char);\n             ^\n\nTypeError: empty.push is not a function\n    at spacecheck (evalmachine.<anonymous>:36:14)\n    at removeextraSpaces (evalmachine.<anonymous>:45:5)\n    at evalmachine.<anonymous>:51:15\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)"],"fullName":"js-aofs Amarendra7062 remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["js-aofs","Amarendra7062","remove_adjacent_spaces"],"duration":2,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:36\n       empty.push(char);\n             ^\n\nTypeError: empty.push is not a function\n    at spacecheck (evalmachine.<anonymous>:36:14)\n    at removeextraSpaces (evalmachine.<anonymous>:45:5)\n    at evalmachine.<anonymous>:51:15\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)"],"fullName":"js-aofs Amarendra7062 remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["js-aofs","Amarendra7062","remove_adjacent_spaces"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:36\n       empty.push(char);\n             ^\n\nTypeError: empty.push is not a function\n    at spacecheck (evalmachine.<anonymous>:36:14)\n    at removeextraSpaces (evalmachine.<anonymous>:45:5)\n    at evalmachine.<anonymous>:51:15\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)"],"fullName":"js-aofs Amarendra7062 remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["js-aofs","Amarendra7062","remove_adjacent_spaces"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:36\n       empty.push(char);\n             ^\n\nTypeError: empty.push is not a function\n    at spacecheck (evalmachine.<anonymous>:36:14)\n    at removeextraSpaces (evalmachine.<anonymous>:45:5)\n    at evalmachine.<anonymous>:51:15\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)"],"fullName":"js-aofs Amarendra7062 remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["js-aofs","Amarendra7062","remove_adjacent_spaces"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:36\n       empty.push(char);\n             ^\n\nTypeError: empty.push is not a function\n    at spacecheck (evalmachine.<anonymous>:36:14)\n    at removeextraSpaces (evalmachine.<anonymous>:45:5)\n    at evalmachine.<anonymous>:51:15\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)"],"fullName":"js-aofs Amarendra7062 remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["js-aofs","Amarendra7062","remove_adjacent_spaces"],"duration":2,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:36\n       empty.push(char);\n             ^\n\nTypeError: empty.push is not a function\n    at spacecheck (evalmachine.<anonymous>:36:14)\n    at removeextraSpaces (evalmachine.<anonymous>:45:5)\n    at evalmachine.<anonymous>:51:15\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)"],"fullName":"js-aofs Amarendra7062 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["js-aofs","Amarendra7062","remove_adjacent_spaces"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:60\n       empty.push(char);\n             ^\n\nTypeError: empty.push is not a function\n    at spacecheck (evalmachine.<anonymous>:60:14)\n    at removeextraSpaces (evalmachine.<anonymous>:69:5)\n    at evalmachine.<anonymous>:75:15\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)"],"fullName":"js-aofs Amarendra7062 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["js-aofs","Amarendra7062","remove_adjacent_spaces"],"duration":2,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:36\n       empty.push(char);\n             ^\n\nTypeError: empty.push is not a function\n    at spacecheck (evalmachine.<anonymous>:36:14)\n    at removeextraSpaces (evalmachine.<anonymous>:45:5)\n    at evalmachine.<anonymous>:51:15\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)"],"fullName":"js-aofs Amarendra7062 remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["js-aofs","Amarendra7062","remove_adjacent_spaces"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:36\n       empty.push(char);\n             ^\n\nTypeError: empty.push is not a function\n    at spacecheck (evalmachine.<anonymous>:36:14)\n    at removeextraSpaces (evalmachine.<anonymous>:45:5)\n    at evalmachine.<anonymous>:51:15\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)"],"fullName":"js-aofs Amarendra7062 remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["js-aofs","Amarendra7062","remove_adjacent_spaces"],"duration":36,"failureDetails":[{"matcherResult":{"actual":["Expected indentation of 0 spaces but found 1. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 2","Strings must use singlequote. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 2","Expected indentation of 0 spaces but found 1. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 3","Trailing spaces not allowed. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 5","Expected indentation of 0 spaces but found 1. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 29","Expected indentation of 0 spaces but found 1. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 30","Expected indentation of 0 spaces but found 1. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 31","Expected indentation of 2 spaces but found 4. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 32","Expected indentation of 4 spaces but found 6. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 33","Expected indentation of 4 spaces but found 6. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 34","Expected indentation of 6 spaces but found 7. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 35","Expected indentation of 4 spaces but found 6. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 36","Expected indentation of 4 spaces but found 6. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 37","'value' is constant. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 37","Expected indentation of 2 spaces but found 4. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 38","Expected indentation of 0 spaces but found 2. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 39","Expected indentation of 0 spaces but found 2. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 40","Expected indentation of 2 spaces but found 4. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 41","Expected indentation of 4 spaces but found 6. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 42","'value' is constant. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 42","Expected indentation of 2 spaces but found 4. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 43","Expected indentation of 2 spaces but found 4. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 44","Expected indentation of 2 spaces but found 4. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 45","Expected indentation of 4 spaces but found 6. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 46","Expected indentation of 2 spaces but found 4. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 47","Expected indentation of 2 spaces but found 4. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 48","Expected indentation of 0 spaces but found 2. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 49","Expected indentation of 0 spaces but found 2. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 50","Newline required at end of file but not found. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 50"],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 31\n\n- Array []\n+ Array [\n+   \"Expected indentation of 0 spaces but found 1. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 2\",\n+   \"Strings must use singlequote. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 2\",\n+   \"Expected indentation of 0 spaces but found 1. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 3\",\n+   \"Trailing spaces not allowed. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 5\",\n+   \"Expected indentation of 0 spaces but found 1. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 29\",\n+   \"Expected indentation of 0 spaces but found 1. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 30\",\n+   \"Expected indentation of 0 spaces but found 1. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 31\",\n+   \"Expected indentation of 2 spaces but found 4. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 32\",\n+   \"Expected indentation of 4 spaces but found 6. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 33\",\n+   \"Expected indentation of 4 spaces but found 6. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 34\",\n+   \"Expected indentation of 6 spaces but found 7. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 35\",\n+   \"Expected indentation of 4 spaces but found 6. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 36\",\n+   \"Expected indentation of 4 spaces but found 6. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 37\",\n+   \"'value' is constant. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 37\",\n+   \"Expected indentation of 2 spaces but found 4. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 38\",\n+   \"Expected indentation of 0 spaces but found 2. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 39\",\n+   \"Expected indentation of 0 spaces but found 2. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 40\",\n+   \"Expected indentation of 2 spaces but found 4. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 41\",\n+   \"Expected indentation of 4 spaces but found 6. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 42\",\n+   \"'value' is constant. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 42\",\n+   \"Expected indentation of 2 spaces but found 4. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 43\",\n+   \"Expected indentation of 2 spaces but found 4. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 44\",\n+   \"Expected indentation of 2 spaces but found 4. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 45\",\n+   \"Expected indentation of 4 spaces but found 6. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 46\",\n+   \"Expected indentation of 2 spaces but found 4. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 47\",\n+   \"Expected indentation of 2 spaces but found 4. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 48\",\n+   \"Expected indentation of 0 spaces but found 2. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 49\",\n+   \"Expected indentation of 0 spaces but found 2. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 50\",\n+   \"Newline required at end of file but not found. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 50\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 31\n\n- Array []\n+ Array [\n+   \"Expected indentation of 0 spaces but found 1. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 2\",\n+   \"Strings must use singlequote. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 2\",\n+   \"Expected indentation of 0 spaces but found 1. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 3\",\n+   \"Trailing spaces not allowed. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 5\",\n+   \"Expected indentation of 0 spaces but found 1. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 29\",\n+   \"Expected indentation of 0 spaces but found 1. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 30\",\n+   \"Expected indentation of 0 spaces but found 1. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 31\",\n+   \"Expected indentation of 2 spaces but found 4. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 32\",\n+   \"Expected indentation of 4 spaces but found 6. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 33\",\n+   \"Expected indentation of 4 spaces but found 6. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 34\",\n+   \"Expected indentation of 6 spaces but found 7. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 35\",\n+   \"Expected indentation of 4 spaces but found 6. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 36\",\n+   \"Expected indentation of 4 spaces but found 6. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 37\",\n+   \"'value' is constant. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 37\",\n+   \"Expected indentation of 2 spaces but found 4. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 38\",\n+   \"Expected indentation of 0 spaces but found 2. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 39\",\n+   \"Expected indentation of 0 spaces but found 2. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 40\",\n+   \"Expected indentation of 2 spaces but found 4. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 41\",\n+   \"Expected indentation of 4 spaces but found 6. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 42\",\n+   \"'value' is constant. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 42\",\n+   \"Expected indentation of 2 spaces but found 4. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 43\",\n+   \"Expected indentation of 2 spaces but found 4. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 44\",\n+   \"Expected indentation of 2 spaces but found 4. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 45\",\n+   \"Expected indentation of 4 spaces but found 6. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 46\",\n+   \"Expected indentation of 2 spaces but found 4. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 47\",\n+   \"Expected indentation of 2 spaces but found 4. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 48\",\n+   \"Expected indentation of 0 spaces but found 2. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 49\",\n+   \"Expected indentation of 0 spaces but found 2. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 50\",\n+   \"Newline required at end of file but not found. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 50\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:79:30)"],"fullName":"js-aofs Amarendra7062 remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Amarendra7062","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["js-aofs","Amarendra7062","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["js-aofs","Amarendra7062","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["js-aofs","Amarendra7062","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["js-aofs","Amarendra7062","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["js-aofs","Amarendra7062","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["js-aofs","Amarendra7062","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["js-aofs","Amarendra7062","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["js-aofs","Amarendra7062","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["js-aofs","Amarendra7062","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["js-aofs","Amarendra7062","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["js-aofs","Amarendra7062","tribonacci"],"duration":21,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Amarendra7062","array_equals"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Amarendra7062","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["js-aofs","Amarendra7062","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["js-aofs","Amarendra7062","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["js-aofs","Amarendra7062","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","Amarendra7062","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","Amarendra7062","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Amarendra7062","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["js-aofs","Amarendra7062","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","Amarendra7062","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["js-aofs","Amarendra7062","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","Amarendra7062","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","Amarendra7062","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","Amarendra7062","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","Amarendra7062","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","Amarendra7062","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["js-aofs","Amarendra7062","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["js-aofs","Amarendra7062","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Amarendra7062","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["js-aofs","Amarendra7062","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["js-aofs","Amarendra7062","array_equals"],"duration":2,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:33\n  if (arrayOne.length !== arrayTwo.length) {\n               ^\n\nTypeError: Cannot read properties of null (reading 'length')\n    at arrayEqual (evalmachine.<anonymous>:33:16)\n    at evalmachine.<anonymous>:63:15\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)"],"fullName":"js-aofs Amarendra7062 array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when given two arrays are null"},{"ancestorTitles":["js-aofs","Amarendra7062","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["js-aofs","Amarendra7062","array_equals"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:33\n  if (arrayOne.length !== arrayTwo.length) {\n               ^\n\nTypeError: Cannot read properties of undefined (reading 'length')\n    at arrayEqual (evalmachine.<anonymous>:33:16)\n    at evalmachine.<anonymous>:63:15\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)"],"fullName":"js-aofs Amarendra7062 array_equals should log false when ARRAY_1=undefined and ARRAY_2=null","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when ARRAY_1=undefined and ARRAY_2=null"},{"ancestorTitles":["js-aofs","Amarendra7062","array_equals"],"duration":2,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:33\n  if (arrayOne.length !== arrayTwo.length) {\n               ^\n\nTypeError: Cannot read properties of undefined (reading 'length')\n    at arrayEqual (evalmachine.<anonymous>:33:16)\n    at evalmachine.<anonymous>:63:15\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)"],"fullName":"js-aofs Amarendra7062 array_equals should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Amarendra7062","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 array_equals should log false when ARRAY_1=[1] and ARRAY_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=[1] and ARRAY_2={0:1}"},{"ancestorTitles":["js-aofs","Amarendra7062","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Amarendra7062 array_equals should log false when ARRAY_1={0:1} and ARRAY_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1={0:1} and ARRAY_2=[1]"},{"ancestorTitles":["js-aofs","Amarendra7062","array_equals"],"duration":42,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (16). Maximum allowed is 15. File: js-aofs-Amarendra7062/array_equals.js Line: 32","Expected indentation of 2 spaces but found 3. File: js-aofs-Amarendra7062/array_equals.js Line: 36","Expected indentation of 4 spaces but found 5. File: js-aofs-Amarendra7062/array_equals.js Line: 37","Closing curly brace does not appear on the same line as the subsequent block. File: js-aofs-Amarendra7062/array_equals.js Line: 41","Expected indentation of 4 spaces but found 5. File: js-aofs-Amarendra7062/array_equals.js Line: 42","Expected indentation of 6 spaces but found 7. File: js-aofs-Amarendra7062/array_equals.js Line: 43","Expected indentation of 4 spaces but found 5. File: js-aofs-Amarendra7062/array_equals.js Line: 44","Expected indentation of 2 spaces but found 3. File: js-aofs-Amarendra7062/array_equals.js Line: 45","Expected indentation of 2 spaces but found 3. File: js-aofs-Amarendra7062/array_equals.js Line: 46","Expected indentation of 0 spaces but found 2. File: js-aofs-Amarendra7062/array_equals.js Line: 47","Trailing spaces not allowed. File: js-aofs-Amarendra7062/array_equals.js Line: 62","Expected indentation of 0 spaces but found 1. File: js-aofs-Amarendra7062/array_equals.js Line: 63","Newline required at end of file but not found. File: js-aofs-Amarendra7062/array_equals.js Line: 63"],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 15\n\n- Array []\n+ Array [\n+   \"Function has too many lines (16). Maximum allowed is 15. File: js-aofs-Amarendra7062/array_equals.js Line: 32\",\n+   \"Expected indentation of 2 spaces but found 3. File: js-aofs-Amarendra7062/array_equals.js Line: 36\",\n+   \"Expected indentation of 4 spaces but found 5. File: js-aofs-Amarendra7062/array_equals.js Line: 37\",\n+   \"Closing curly brace does not appear on the same line as the subsequent block. File: js-aofs-Amarendra7062/array_equals.js Line: 41\",\n+   \"Expected indentation of 4 spaces but found 5. File: js-aofs-Amarendra7062/array_equals.js Line: 42\",\n+   \"Expected indentation of 6 spaces but found 7. File: js-aofs-Amarendra7062/array_equals.js Line: 43\",\n+   \"Expected indentation of 4 spaces but found 5. File: js-aofs-Amarendra7062/array_equals.js Line: 44\",\n+   \"Expected indentation of 2 spaces but found 3. File: js-aofs-Amarendra7062/array_equals.js Line: 45\",\n+   \"Expected indentation of 2 spaces but found 3. File: js-aofs-Amarendra7062/array_equals.js Line: 46\",\n+   \"Expected indentation of 0 spaces but found 2. File: js-aofs-Amarendra7062/array_equals.js Line: 47\",\n+   \"Trailing spaces not allowed. File: js-aofs-Amarendra7062/array_equals.js Line: 62\",\n+   \"Expected indentation of 0 spaces but found 1. File: js-aofs-Amarendra7062/array_equals.js Line: 63\",\n+   \"Newline required at end of file but not found. File: js-aofs-Amarendra7062/array_equals.js Line: 63\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 15\n\n- Array []\n+ Array [\n+   \"Function has too many lines (16). Maximum allowed is 15. File: js-aofs-Amarendra7062/array_equals.js Line: 32\",\n+   \"Expected indentation of 2 spaces but found 3. File: js-aofs-Amarendra7062/array_equals.js Line: 36\",\n+   \"Expected indentation of 4 spaces but found 5. File: js-aofs-Amarendra7062/array_equals.js Line: 37\",\n+   \"Closing curly brace does not appear on the same line as the subsequent block. File: js-aofs-Amarendra7062/array_equals.js Line: 41\",\n+   \"Expected indentation of 4 spaces but found 5. File: js-aofs-Amarendra7062/array_equals.js Line: 42\",\n+   \"Expected indentation of 6 spaces but found 7. File: js-aofs-Amarendra7062/array_equals.js Line: 43\",\n+   \"Expected indentation of 4 spaces but found 5. File: js-aofs-Amarendra7062/array_equals.js Line: 44\",\n+   \"Expected indentation of 2 spaces but found 3. File: js-aofs-Amarendra7062/array_equals.js Line: 45\",\n+   \"Expected indentation of 2 spaces but found 3. File: js-aofs-Amarendra7062/array_equals.js Line: 46\",\n+   \"Expected indentation of 0 spaces but found 2. File: js-aofs-Amarendra7062/array_equals.js Line: 47\",\n+   \"Trailing spaces not allowed. File: js-aofs-Amarendra7062/array_equals.js Line: 62\",\n+   \"Expected indentation of 0 spaces but found 1. File: js-aofs-Amarendra7062/array_equals.js Line: 63\",\n+   \"Newline required at end of file but not found. File: js-aofs-Amarendra7062/array_equals.js Line: 63\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:79:30)"],"fullName":"js-aofs Amarendra7062 array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Amarendra7062","object_equals"],"duration":2,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:59\nconsole.log(objectEqual(OBJECT_1, OBJECT_2));\n        ^\n\nReferenceError: objectEqual is not defined\n    at evalmachine.<anonymous>:59:9\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)"],"fullName":"js-aofs Amarendra7062 object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Amarendra7062","object_equals"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:59\nconsole.log(objectEqual(OBJECT_1, OBJECT_2));\n        ^\n\nReferenceError: objectEqual is not defined\n    at evalmachine.<anonymous>:59:9\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)"],"fullName":"js-aofs Amarendra7062 object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Amarendra7062","object_equals"],"duration":2,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:59\nconsole.log(objectEqual(OBJECT_1, OBJECT_2));\n        ^\n\nReferenceError: objectEqual is not defined\n    at evalmachine.<anonymous>:59:9\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)"],"fullName":"js-aofs Amarendra7062 object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Amarendra7062","object_equals"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:59\nconsole.log(objectEqual(OBJECT_1, OBJECT_2));\n        ^\n\nReferenceError: objectEqual is not defined\n    at evalmachine.<anonymous>:59:9\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)"],"fullName":"js-aofs Amarendra7062 object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Amarendra7062","object_equals"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:59\nconsole.log(objectEqual(OBJECT_1, OBJECT_2));\n        ^\n\nReferenceError: objectEqual is not defined\n    at evalmachine.<anonymous>:59:9\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)"],"fullName":"js-aofs Amarendra7062 object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Amarendra7062","object_equals"],"duration":2,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:59\nconsole.log(objectEqual(OBJECT_1, OBJECT_2));\n        ^\n\nReferenceError: objectEqual is not defined\n    at evalmachine.<anonymous>:59:9\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)"],"fullName":"js-aofs Amarendra7062 object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Amarendra7062","object_equals"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:59\nconsole.log(objectEqual(OBJECT_1, OBJECT_2));\n        ^\n\nReferenceError: objectEqual is not defined\n    at evalmachine.<anonymous>:59:9\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)"],"fullName":"js-aofs Amarendra7062 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Amarendra7062","object_equals"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:59\nconsole.log(objectEqual(OBJECT_1, OBJECT_2));\n        ^\n\nReferenceError: objectEqual is not defined\n    at evalmachine.<anonymous>:59:9\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)"],"fullName":"js-aofs Amarendra7062 object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","Amarendra7062","object_equals"],"duration":2,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:59\nconsole.log(objectEqual(OBJECT_1, OBJECT_2));\n        ^\n\nReferenceError: objectEqual is not defined\n    at evalmachine.<anonymous>:59:9\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)"],"fullName":"js-aofs Amarendra7062 object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","Amarendra7062","object_equals"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:59\nconsole.log(objectEqual(OBJECT_1, OBJECT_2));\n        ^\n\nReferenceError: objectEqual is not defined\n    at evalmachine.<anonymous>:59:9\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)"],"fullName":"js-aofs Amarendra7062 object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["js-aofs","Amarendra7062","object_equals"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:59\nconsole.log(objectEqual(OBJECT_1, OBJECT_2));\n        ^\n\nReferenceError: objectEqual is not defined\n    at evalmachine.<anonymous>:59:9\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)"],"fullName":"js-aofs Amarendra7062 object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","Amarendra7062","object_equals"],"duration":2,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:59\nconsole.log(objectEqual(OBJECT_1, OBJECT_2));\n        ^\n\nReferenceError: objectEqual is not defined\n    at evalmachine.<anonymous>:59:9\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)"],"fullName":"js-aofs Amarendra7062 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","Amarendra7062","object_equals"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:59\nconsole.log(objectEqual(OBJECT_1, OBJECT_2));\n        ^\n\nReferenceError: objectEqual is not defined\n    at evalmachine.<anonymous>:59:9\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)"],"fullName":"js-aofs Amarendra7062 object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["js-aofs","Amarendra7062","object_equals"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:59\nconsole.log(objectEqual(OBJECT_1, OBJECT_2));\n        ^\n\nReferenceError: objectEqual is not defined\n    at evalmachine.<anonymous>:59:9\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)"],"fullName":"js-aofs Amarendra7062 object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["js-aofs","Amarendra7062","object_equals"],"duration":3,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:59\nconsole.log(objectEqual(OBJECT_1, OBJECT_2));\n        ^\n\nReferenceError: objectEqual is not defined\n    at evalmachine.<anonymous>:59:9\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)"],"fullName":"js-aofs Amarendra7062 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["js-aofs","Amarendra7062","object_equals"],"duration":5,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:59\nconsole.log(objectEqual(OBJECT_1, OBJECT_2));\n        ^\n\nReferenceError: objectEqual is not defined\n    at evalmachine.<anonymous>:59:9\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)"],"fullName":"js-aofs Amarendra7062 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["js-aofs","Amarendra7062","object_equals"],"duration":7,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:59\nconsole.log(objectEqual(OBJECT_1, OBJECT_2));\n        ^\n\nReferenceError: objectEqual is not defined\n    at evalmachine.<anonymous>:59:9\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)"],"fullName":"js-aofs Amarendra7062 object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["js-aofs","Amarendra7062","object_equals"],"duration":3,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:59\nconsole.log(objectEqual(OBJECT_1, OBJECT_2));\n        ^\n\nReferenceError: objectEqual is not defined\n    at evalmachine.<anonymous>:59:9\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)"],"fullName":"js-aofs Amarendra7062 object_equals should log false when OBJECT_1=undefined and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1=undefined and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Amarendra7062","object_equals"],"duration":3,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:59\nconsole.log(objectEqual(OBJECT_1, OBJECT_2));\n        ^\n\nReferenceError: objectEqual is not defined\n    at evalmachine.<anonymous>:59:9\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)"],"fullName":"js-aofs Amarendra7062 object_equals should log false when OBJECT_1={} and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={} and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","Amarendra7062","object_equals"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:59\nconsole.log(objectEqual(OBJECT_1, OBJECT_2));\n        ^\n\nReferenceError: objectEqual is not defined\n    at evalmachine.<anonymous>:59:9\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)"],"fullName":"js-aofs Amarendra7062 object_equals should log true when OBJECT_1=undefined and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when OBJECT_1=undefined and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","Amarendra7062","object_equals"],"duration":2,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:59\nconsole.log(objectEqual(OBJECT_1, OBJECT_2));\n        ^\n\nReferenceError: objectEqual is not defined\n    at evalmachine.<anonymous>:59:9\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)"],"fullName":"js-aofs Amarendra7062 object_equals should log false when OBJECT_1=[1] and OBJECT_2={0:1}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1=[1] and OBJECT_2={0:1}"},{"ancestorTitles":["js-aofs","Amarendra7062","object_equals"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:59\nconsole.log(objectEqual(OBJECT_1, OBJECT_2));\n        ^\n\nReferenceError: objectEqual is not defined\n    at evalmachine.<anonymous>:59:9\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)"],"fullName":"js-aofs Amarendra7062 object_equals should log false when OBJECT_1={0:1} and OBJECT_2=[1]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={0:1} and OBJECT_2=[1]"},{"ancestorTitles":["js-aofs","Amarendra7062","object_equals"],"duration":33,"failureDetails":[{"matcherResult":{"actual":["Missing semicolon. File: js-aofs-Amarendra7062/object_equals.js Line: 2","Missing semicolon. File: js-aofs-Amarendra7062/object_equals.js Line: 3","Expected indentation of 2 spaces but found 4. File: js-aofs-Amarendra7062/object_equals.js Line: 33","Expected indentation of 4 spaces but found 6. File: js-aofs-Amarendra7062/object_equals.js Line: 34","Expected indentation of 2 spaces but found 4. File: js-aofs-Amarendra7062/object_equals.js Line: 35","Expected indentation of 2 spaces but found 4. File: js-aofs-Amarendra7062/object_equals.js Line: 36","Trailing spaces not allowed. File: js-aofs-Amarendra7062/object_equals.js Line: 57"],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 9\n\n- Array []\n+ Array [\n+   \"Missing semicolon. File: js-aofs-Amarendra7062/object_equals.js Line: 2\",\n+   \"Missing semicolon. File: js-aofs-Amarendra7062/object_equals.js Line: 3\",\n+   \"Expected indentation of 2 spaces but found 4. File: js-aofs-Amarendra7062/object_equals.js Line: 33\",\n+   \"Expected indentation of 4 spaces but found 6. File: js-aofs-Amarendra7062/object_equals.js Line: 34\",\n+   \"Expected indentation of 2 spaces but found 4. File: js-aofs-Amarendra7062/object_equals.js Line: 35\",\n+   \"Expected indentation of 2 spaces but found 4. File: js-aofs-Amarendra7062/object_equals.js Line: 36\",\n+   \"Trailing spaces not allowed. File: js-aofs-Amarendra7062/object_equals.js Line: 57\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 9\n\n- Array []\n+ Array [\n+   \"Missing semicolon. File: js-aofs-Amarendra7062/object_equals.js Line: 2\",\n+   \"Missing semicolon. File: js-aofs-Amarendra7062/object_equals.js Line: 3\",\n+   \"Expected indentation of 2 spaces but found 4. File: js-aofs-Amarendra7062/object_equals.js Line: 33\",\n+   \"Expected indentation of 4 spaces but found 6. File: js-aofs-Amarendra7062/object_equals.js Line: 34\",\n+   \"Expected indentation of 2 spaces but found 4. File: js-aofs-Amarendra7062/object_equals.js Line: 35\",\n+   \"Expected indentation of 2 spaces but found 4. File: js-aofs-Amarendra7062/object_equals.js Line: 36\",\n+   \"Trailing spaces not allowed. File: js-aofs-Amarendra7062/object_equals.js Line: 57\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:79:30)"],"fullName":"js-aofs Amarendra7062 object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","even_odd"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","even_odd"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","even_odd"],"duration":17,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","categorise"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","categorise"],"duration":48,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","entries"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","entries"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","entries"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","entries"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","entries"],"duration":19,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","remove_adjacent_spaces"],"duration":46,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","tribonacci"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","tribonacci"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","tribonacci"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","tribonacci"],"duration":22,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 array_equals should log false when ARRAY_1=undefined and ARRAY_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=null"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 array_equals should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 array_equals should log false when ARRAY_1=[1] and ARRAY_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=[1] and ARRAY_2={0:1}"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 array_equals should log false when ARRAY_1={0:1} and ARRAY_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1={0:1} and ARRAY_2=[1]"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","array_equals"],"duration":26,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","object_equals"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 object_equals should log false when OBJECT_1=undefined and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=undefined and OBJECT_2={}"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 object_equals should log false when OBJECT_1={} and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={} and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 object_equals should log true when OBJECT_1=undefined and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=undefined and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 object_equals should log false when OBJECT_1=[1] and OBJECT_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=[1] and OBJECT_2={0:1}"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 object_equals should log false when OBJECT_1={0:1} and OBJECT_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={0:1} and OBJECT_2=[1]"},{"ancestorTitles":["js-aofs","AshwakKattubadi45","object_equals"],"duration":56,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs AshwakKattubadi45 object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Balaraju2007","even_odd"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["js-aofs","Balaraju2007","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["js-aofs","Balaraju2007","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["js-aofs","Balaraju2007","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["js-aofs","Balaraju2007","even_odd"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["js-aofs","Balaraju2007","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["js-aofs","Balaraju2007","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["js-aofs","Balaraju2007","even_odd"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["js-aofs","Balaraju2007","even_odd"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Balaraju2007","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["js-aofs","Balaraju2007","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["js-aofs","Balaraju2007","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["js-aofs","Balaraju2007","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["js-aofs","Balaraju2007","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["js-aofs","Balaraju2007","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["js-aofs","Balaraju2007","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["js-aofs","Balaraju2007","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["js-aofs","Balaraju2007","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["js-aofs","Balaraju2007","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["js-aofs","Balaraju2007","categorise"],"duration":27,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Balaraju2007","entries"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["js-aofs","Balaraju2007","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["js-aofs","Balaraju2007","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["js-aofs","Balaraju2007","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["js-aofs","Balaraju2007","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["js-aofs","Balaraju2007","entries"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["js-aofs","Balaraju2007","entries"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["js-aofs","Balaraju2007","entries"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["js-aofs","Balaraju2007","entries"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["js-aofs","Balaraju2007","entries"],"duration":25,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Balaraju2007","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["js-aofs","Balaraju2007","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["js-aofs","Balaraju2007","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["js-aofs","Balaraju2007","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["js-aofs","Balaraju2007","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["js-aofs","Balaraju2007","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["js-aofs","Balaraju2007","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["js-aofs","Balaraju2007","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["js-aofs","Balaraju2007","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["js-aofs","Balaraju2007","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["js-aofs","Balaraju2007","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["js-aofs","Balaraju2007","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["js-aofs","Balaraju2007","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["js-aofs","Balaraju2007","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["js-aofs","Balaraju2007","remove_adjacent_spaces"],"duration":25,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Balaraju2007","tribonacci"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["js-aofs","Balaraju2007","tribonacci"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["js-aofs","Balaraju2007","tribonacci"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["js-aofs","Balaraju2007","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["js-aofs","Balaraju2007","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["js-aofs","Balaraju2007","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["js-aofs","Balaraju2007","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["js-aofs","Balaraju2007","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["js-aofs","Balaraju2007","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["js-aofs","Balaraju2007","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["js-aofs","Balaraju2007","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["js-aofs","Balaraju2007","tribonacci"],"duration":34,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Balaraju2007","array_equals"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Balaraju2007","array_equals"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["js-aofs","Balaraju2007","array_equals"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["js-aofs","Balaraju2007","array_equals"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["js-aofs","Balaraju2007","array_equals"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","Balaraju2007","array_equals"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","Balaraju2007","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Balaraju2007","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["js-aofs","Balaraju2007","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","Balaraju2007","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["js-aofs","Balaraju2007","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","Balaraju2007","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","Balaraju2007","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","Balaraju2007","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","Balaraju2007","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","Balaraju2007","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["js-aofs","Balaraju2007","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["js-aofs","Balaraju2007","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Balaraju2007","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["js-aofs","Balaraju2007","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["js-aofs","Balaraju2007","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["js-aofs","Balaraju2007","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["js-aofs","Balaraju2007","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 array_equals should log false when ARRAY_1=undefined and ARRAY_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=null"},{"ancestorTitles":["js-aofs","Balaraju2007","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 array_equals should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Balaraju2007","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 array_equals should log false when ARRAY_1=[1] and ARRAY_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=[1] and ARRAY_2={0:1}"},{"ancestorTitles":["js-aofs","Balaraju2007","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 array_equals should log false when ARRAY_1={0:1} and ARRAY_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1={0:1} and ARRAY_2=[1]"},{"ancestorTitles":["js-aofs","Balaraju2007","array_equals"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Balaraju2007","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Balaraju2007","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Balaraju2007","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Balaraju2007","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Balaraju2007","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Balaraju2007","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Balaraju2007","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Balaraju2007","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","Balaraju2007","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","Balaraju2007","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["js-aofs","Balaraju2007","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","Balaraju2007","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","Balaraju2007","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["js-aofs","Balaraju2007","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["js-aofs","Balaraju2007","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["js-aofs","Balaraju2007","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["js-aofs","Balaraju2007","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["js-aofs","Balaraju2007","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 object_equals should log false when OBJECT_1=undefined and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=undefined and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Balaraju2007","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 object_equals should log false when OBJECT_1={} and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={} and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","Balaraju2007","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 object_equals should log true when OBJECT_1=undefined and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=undefined and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","Balaraju2007","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 object_equals should log false when OBJECT_1=[1] and OBJECT_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=[1] and OBJECT_2={0:1}"},{"ancestorTitles":["js-aofs","Balaraju2007","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 object_equals should log false when OBJECT_1={0:1} and OBJECT_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={0:1} and OBJECT_2=[1]"},{"ancestorTitles":["js-aofs","Balaraju2007","object_equals"],"duration":24,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Balaraju2007 object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Chandiniruttala","even_odd"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["js-aofs","Chandiniruttala","even_odd"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["js-aofs","Chandiniruttala","even_odd"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["js-aofs","Chandiniruttala","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["js-aofs","Chandiniruttala","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["js-aofs","Chandiniruttala","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["js-aofs","Chandiniruttala","even_odd"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["js-aofs","Chandiniruttala","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["js-aofs","Chandiniruttala","even_odd"],"duration":16,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Chandiniruttala","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["js-aofs","Chandiniruttala","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["js-aofs","Chandiniruttala","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["js-aofs","Chandiniruttala","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["js-aofs","Chandiniruttala","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["js-aofs","Chandiniruttala","categorise"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["js-aofs","Chandiniruttala","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["js-aofs","Chandiniruttala","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["js-aofs","Chandiniruttala","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["js-aofs","Chandiniruttala","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["js-aofs","Chandiniruttala","categorise"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Chandiniruttala","entries"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["js-aofs","Chandiniruttala","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["js-aofs","Chandiniruttala","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["js-aofs","Chandiniruttala","entries"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["js-aofs","Chandiniruttala","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["js-aofs","Chandiniruttala","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["js-aofs","Chandiniruttala","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["js-aofs","Chandiniruttala","entries"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["js-aofs","Chandiniruttala","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["js-aofs","Chandiniruttala","entries"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Chandiniruttala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["js-aofs","Chandiniruttala","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["js-aofs","Chandiniruttala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["js-aofs","Chandiniruttala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["js-aofs","Chandiniruttala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["js-aofs","Chandiniruttala","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["js-aofs","Chandiniruttala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["js-aofs","Chandiniruttala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["js-aofs","Chandiniruttala","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["js-aofs","Chandiniruttala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["js-aofs","Chandiniruttala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["js-aofs","Chandiniruttala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["js-aofs","Chandiniruttala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["js-aofs","Chandiniruttala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["js-aofs","Chandiniruttala","remove_adjacent_spaces"],"duration":34,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Chandiniruttala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["js-aofs","Chandiniruttala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["js-aofs","Chandiniruttala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["js-aofs","Chandiniruttala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["js-aofs","Chandiniruttala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["js-aofs","Chandiniruttala","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["js-aofs","Chandiniruttala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["js-aofs","Chandiniruttala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["js-aofs","Chandiniruttala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["js-aofs","Chandiniruttala","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["js-aofs","Chandiniruttala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["js-aofs","Chandiniruttala","tribonacci"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Chandiniruttala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Chandiniruttala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["js-aofs","Chandiniruttala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["js-aofs","Chandiniruttala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["js-aofs","Chandiniruttala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","Chandiniruttala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","Chandiniruttala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Chandiniruttala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["js-aofs","Chandiniruttala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","Chandiniruttala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["js-aofs","Chandiniruttala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","Chandiniruttala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","Chandiniruttala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","Chandiniruttala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","Chandiniruttala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","Chandiniruttala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["js-aofs","Chandiniruttala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["js-aofs","Chandiniruttala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Chandiniruttala","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["js-aofs","Chandiniruttala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["js-aofs","Chandiniruttala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["js-aofs","Chandiniruttala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["js-aofs","Chandiniruttala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala array_equals should log false when ARRAY_1=undefined and ARRAY_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=null"},{"ancestorTitles":["js-aofs","Chandiniruttala","array_equals"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala array_equals should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Chandiniruttala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala array_equals should log false when ARRAY_1=[1] and ARRAY_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=[1] and ARRAY_2={0:1}"},{"ancestorTitles":["js-aofs","Chandiniruttala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala array_equals should log false when ARRAY_1={0:1} and ARRAY_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1={0:1} and ARRAY_2=[1]"},{"ancestorTitles":["js-aofs","Chandiniruttala","array_equals"],"duration":26,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Chandiniruttala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Chandiniruttala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Chandiniruttala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Chandiniruttala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Chandiniruttala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Chandiniruttala","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Chandiniruttala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Chandiniruttala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","Chandiniruttala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","Chandiniruttala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["js-aofs","Chandiniruttala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","Chandiniruttala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","Chandiniruttala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["js-aofs","Chandiniruttala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["js-aofs","Chandiniruttala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["js-aofs","Chandiniruttala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["js-aofs","Chandiniruttala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["js-aofs","Chandiniruttala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala object_equals should log false when OBJECT_1=undefined and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=undefined and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Chandiniruttala","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala object_equals should log false when OBJECT_1={} and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={} and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","Chandiniruttala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala object_equals should log true when OBJECT_1=undefined and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=undefined and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","Chandiniruttala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala object_equals should log false when OBJECT_1=[1] and OBJECT_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=[1] and OBJECT_2={0:1}"},{"ancestorTitles":["js-aofs","Chandiniruttala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala object_equals should log false when OBJECT_1={0:1} and OBJECT_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={0:1} and OBJECT_2=[1]"},{"ancestorTitles":["js-aofs","Chandiniruttala","object_equals"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Chandiniruttala object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Charantej21","even_odd"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["js-aofs","Charantej21","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["js-aofs","Charantej21","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["js-aofs","Charantej21","even_odd"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["js-aofs","Charantej21","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["js-aofs","Charantej21","even_odd"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["js-aofs","Charantej21","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["js-aofs","Charantej21","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["js-aofs","Charantej21","even_odd"],"duration":73,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Charantej21","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["js-aofs","Charantej21","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["js-aofs","Charantej21","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["js-aofs","Charantej21","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["js-aofs","Charantej21","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["js-aofs","Charantej21","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["js-aofs","Charantej21","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["js-aofs","Charantej21","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["js-aofs","Charantej21","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["js-aofs","Charantej21","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["js-aofs","Charantej21","categorise"],"duration":64,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Charantej21","entries"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["js-aofs","Charantej21","entries"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["js-aofs","Charantej21","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["js-aofs","Charantej21","entries"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["js-aofs","Charantej21","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["js-aofs","Charantej21","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["js-aofs","Charantej21","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["js-aofs","Charantej21","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["js-aofs","Charantej21","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["js-aofs","Charantej21","entries"],"duration":17,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Charantej21","remove_adjacent_spaces"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["js-aofs","Charantej21","remove_adjacent_spaces"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["js-aofs","Charantej21","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["js-aofs","Charantej21","remove_adjacent_spaces"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["js-aofs","Charantej21","remove_adjacent_spaces"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["js-aofs","Charantej21","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["js-aofs","Charantej21","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["js-aofs","Charantej21","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["js-aofs","Charantej21","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["js-aofs","Charantej21","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["js-aofs","Charantej21","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["js-aofs","Charantej21","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["js-aofs","Charantej21","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["js-aofs","Charantej21","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["js-aofs","Charantej21","remove_adjacent_spaces"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Charantej21","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["js-aofs","Charantej21","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["js-aofs","Charantej21","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["js-aofs","Charantej21","tribonacci"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["js-aofs","Charantej21","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["js-aofs","Charantej21","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["js-aofs","Charantej21","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["js-aofs","Charantej21","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["js-aofs","Charantej21","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["js-aofs","Charantej21","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["js-aofs","Charantej21","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["js-aofs","Charantej21","tribonacci"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Charantej21","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Charantej21","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["js-aofs","Charantej21","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["js-aofs","Charantej21","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["js-aofs","Charantej21","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","Charantej21","array_equals"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","Charantej21","array_equals"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Charantej21","array_equals"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["js-aofs","Charantej21","array_equals"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","Charantej21","array_equals"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["js-aofs","Charantej21","array_equals"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","Charantej21","array_equals"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","Charantej21","array_equals"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","Charantej21","array_equals"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","Charantej21","array_equals"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","Charantej21","array_equals"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["js-aofs","Charantej21","array_equals"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["js-aofs","Charantej21","array_equals"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Charantej21","array_equals"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["js-aofs","Charantej21","array_equals"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["js-aofs","Charantej21","array_equals"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["js-aofs","Charantej21","array_equals"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["js-aofs","Charantej21","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 array_equals should log false when ARRAY_1=undefined and ARRAY_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=null"},{"ancestorTitles":["js-aofs","Charantej21","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 array_equals should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Charantej21","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 array_equals should log false when ARRAY_1=[1] and ARRAY_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=[1] and ARRAY_2={0:1}"},{"ancestorTitles":["js-aofs","Charantej21","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 array_equals should log false when ARRAY_1={0:1} and ARRAY_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1={0:1} and ARRAY_2=[1]"},{"ancestorTitles":["js-aofs","Charantej21","array_equals"],"duration":38,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (17). Maximum allowed is 15. File: js-aofs-Charantej21/array_equals.js Line: 31","This line has a length of 115. Maximum allowed is 80. File: js-aofs-Charantej21/array_equals.js Line: 34"],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Function has too many lines (17). Maximum allowed is 15. File: js-aofs-Charantej21/array_equals.js Line: 31\",\n+   \"This line has a length of 115. Maximum allowed is 80. File: js-aofs-Charantej21/array_equals.js Line: 34\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Function has too many lines (17). Maximum allowed is 15. File: js-aofs-Charantej21/array_equals.js Line: 31\",\n+   \"This line has a length of 115. Maximum allowed is 80. File: js-aofs-Charantej21/array_equals.js Line: 34\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:79:30)"],"fullName":"js-aofs Charantej21 array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Charantej21","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Charantej21","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Charantej21","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Charantej21","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Charantej21","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Charantej21","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Charantej21","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Charantej21","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","Charantej21","object_equals"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","Charantej21","object_equals"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["js-aofs","Charantej21","object_equals"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","Charantej21","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","Charantej21","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["js-aofs","Charantej21","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["js-aofs","Charantej21","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["js-aofs","Charantej21","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["js-aofs","Charantej21","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["js-aofs","Charantej21","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 object_equals should log false when OBJECT_1=undefined and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=undefined and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Charantej21","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 object_equals should log false when OBJECT_1={} and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={} and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","Charantej21","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Charantej21 object_equals should log true when OBJECT_1=undefined and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=undefined and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","Charantej21","object_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[true],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Charantej21 object_equals should log false when OBJECT_1=[1] and OBJECT_2={0:1}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1=[1] and OBJECT_2={0:1}"},{"ancestorTitles":["js-aofs","Charantej21","object_equals"],"duration":2,"failureDetails":[{"matcherResult":{"actual":[true],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Charantej21 object_equals should log false when OBJECT_1={0:1} and OBJECT_2=[1]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={0:1} and OBJECT_2=[1]"},{"ancestorTitles":["js-aofs","Charantej21","object_equals"],"duration":20,"failureDetails":[{"matcherResult":{"actual":["This line has a length of 153. Maximum allowed is 80. File: js-aofs-Charantej21/object_equals.js Line: 36"],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"This line has a length of 153. Maximum allowed is 80. File: js-aofs-Charantej21/object_equals.js Line: 36\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"This line has a length of 153. Maximum allowed is 80. File: js-aofs-Charantej21/object_equals.js Line: 36\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:79:30)"],"fullName":"js-aofs Charantej21 object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","even_odd"],"duration":22,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","categorise"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","categorise"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","categorise"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","categorise"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","entries"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","entries"],"duration":31,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","remove_adjacent_spaces"],"duration":16,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","tribonacci"],"duration":20,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala array_equals should log false when ARRAY_1=undefined and ARRAY_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=null"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala array_equals should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala array_equals should log false when ARRAY_1=[1] and ARRAY_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=[1] and ARRAY_2={0:1}"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala array_equals should log false when ARRAY_1={0:1} and ARRAY_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1={0:1} and ARRAY_2=[1]"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","array_equals"],"duration":31,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","object_equals"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","object_equals"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","object_equals"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","object_equals"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","object_equals"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala object_equals should log false when OBJECT_1=undefined and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=undefined and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala object_equals should log false when OBJECT_1={} and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={} and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala object_equals should log true when OBJECT_1=undefined and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=undefined and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala object_equals should log false when OBJECT_1=[1] and OBJECT_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=[1] and OBJECT_2={0:1}"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala object_equals should log false when OBJECT_1={0:1} and OBJECT_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={0:1} and OBJECT_2=[1]"},{"ancestorTitles":["js-aofs","Dhanalaxmi-Mendadala","object_equals"],"duration":24,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Dhanalaxmi-Mendadala object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","G-Rajini","even_odd"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["js-aofs","G-Rajini","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["js-aofs","G-Rajini","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["js-aofs","G-Rajini","even_odd"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["js-aofs","G-Rajini","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["js-aofs","G-Rajini","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["js-aofs","G-Rajini","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["js-aofs","G-Rajini","even_odd"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["js-aofs","G-Rajini","even_odd"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","G-Rajini","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["js-aofs","G-Rajini","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["js-aofs","G-Rajini","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["js-aofs","G-Rajini","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["js-aofs","G-Rajini","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["js-aofs","G-Rajini","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["js-aofs","G-Rajini","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["js-aofs","G-Rajini","categorise"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["js-aofs","G-Rajini","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["js-aofs","G-Rajini","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["js-aofs","G-Rajini","categorise"],"duration":16,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","G-Rajini","entries"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["js-aofs","G-Rajini","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["js-aofs","G-Rajini","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["js-aofs","G-Rajini","entries"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["js-aofs","G-Rajini","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["js-aofs","G-Rajini","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["js-aofs","G-Rajini","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["js-aofs","G-Rajini","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["js-aofs","G-Rajini","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["js-aofs","G-Rajini","entries"],"duration":17,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","G-Rajini","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["js-aofs","G-Rajini","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["js-aofs","G-Rajini","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["js-aofs","G-Rajini","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["js-aofs","G-Rajini","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["js-aofs","G-Rajini","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["js-aofs","G-Rajini","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["js-aofs","G-Rajini","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["js-aofs","G-Rajini","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["js-aofs","G-Rajini","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["js-aofs","G-Rajini","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["js-aofs","G-Rajini","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["js-aofs","G-Rajini","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["js-aofs","G-Rajini","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["js-aofs","G-Rajini","remove_adjacent_spaces"],"duration":39,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","G-Rajini","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["js-aofs","G-Rajini","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["js-aofs","G-Rajini","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["js-aofs","G-Rajini","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["js-aofs","G-Rajini","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["js-aofs","G-Rajini","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["js-aofs","G-Rajini","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["js-aofs","G-Rajini","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["js-aofs","G-Rajini","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["js-aofs","G-Rajini","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["js-aofs","G-Rajini","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["js-aofs","G-Rajini","tribonacci"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","G-Rajini","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","G-Rajini","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["js-aofs","G-Rajini","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["js-aofs","G-Rajini","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["js-aofs","G-Rajini","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","G-Rajini","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","G-Rajini","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","G-Rajini","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["js-aofs","G-Rajini","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","G-Rajini","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["js-aofs","G-Rajini","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","G-Rajini","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","G-Rajini","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","G-Rajini","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","G-Rajini","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","G-Rajini","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["js-aofs","G-Rajini","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["js-aofs","G-Rajini","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","G-Rajini","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["js-aofs","G-Rajini","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["js-aofs","G-Rajini","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["js-aofs","G-Rajini","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["js-aofs","G-Rajini","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini array_equals should log false when ARRAY_1=undefined and ARRAY_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=null"},{"ancestorTitles":["js-aofs","G-Rajini","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini array_equals should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","G-Rajini","array_equals"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini array_equals should log false when ARRAY_1=[1] and ARRAY_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=[1] and ARRAY_2={0:1}"},{"ancestorTitles":["js-aofs","G-Rajini","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini array_equals should log false when ARRAY_1={0:1} and ARRAY_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1={0:1} and ARRAY_2=[1]"},{"ancestorTitles":["js-aofs","G-Rajini","array_equals"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","G-Rajini","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","G-Rajini","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","G-Rajini","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","G-Rajini","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","G-Rajini","object_equals"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","G-Rajini","object_equals"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","G-Rajini","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","G-Rajini","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","G-Rajini","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","G-Rajini","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["js-aofs","G-Rajini","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","G-Rajini","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","G-Rajini","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["js-aofs","G-Rajini","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["js-aofs","G-Rajini","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["js-aofs","G-Rajini","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["js-aofs","G-Rajini","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["js-aofs","G-Rajini","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini object_equals should log false when OBJECT_1=undefined and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=undefined and OBJECT_2={}"},{"ancestorTitles":["js-aofs","G-Rajini","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini object_equals should log false when OBJECT_1={} and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={} and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","G-Rajini","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini object_equals should log true when OBJECT_1=undefined and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=undefined and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","G-Rajini","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini object_equals should log false when OBJECT_1=[1] and OBJECT_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=[1] and OBJECT_2={0:1}"},{"ancestorTitles":["js-aofs","G-Rajini","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini object_equals should log false when OBJECT_1={0:1} and OBJECT_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={0:1} and OBJECT_2=[1]"},{"ancestorTitles":["js-aofs","G-Rajini","object_equals"],"duration":19,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs G-Rajini object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","even_odd"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","even_odd"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","categorise"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","categorise"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","categorise"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","categorise"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","categorise"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","categorise"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","categorise"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","categorise"],"duration":27,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","entries"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","entries"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","remove_adjacent_spaces"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","remove_adjacent_spaces"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","remove_adjacent_spaces"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","tribonacci"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","tribonacci"],"duration":22,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW array_equals should log false when ARRAY_1=undefined and ARRAY_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=null"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW array_equals should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW array_equals should log false when ARRAY_1=[1] and ARRAY_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=[1] and ARRAY_2={0:1}"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW array_equals should log false when ARRAY_1={0:1} and ARRAY_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1={0:1} and ARRAY_2=[1]"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","array_equals"],"duration":18,"failureDetails":[{"matcherResult":{"actual":["Arrow function has too many lines (21). Maximum allowed is 15. File: js-aofs-GOWRIPRASADTW/array_equals.js Line: 32","This line has a length of 91. Maximum allowed is 80. File: js-aofs-GOWRIPRASADTW/array_equals.js Line: 36"],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (21). Maximum allowed is 15. File: js-aofs-GOWRIPRASADTW/array_equals.js Line: 32\",\n+   \"This line has a length of 91. Maximum allowed is 80. File: js-aofs-GOWRIPRASADTW/array_equals.js Line: 36\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (21). Maximum allowed is 15. File: js-aofs-GOWRIPRASADTW/array_equals.js Line: 32\",\n+   \"This line has a length of 91. Maximum allowed is 80. File: js-aofs-GOWRIPRASADTW/array_equals.js Line: 36\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:79:30)"],"fullName":"js-aofs GOWRIPRASADTW array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","object_equals"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","object_equals"],"duration":2,"failureDetails":[{"matcherResult":{"actual":[true],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs GOWRIPRASADTW object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","object_equals"],"duration":2,"failureDetails":[{"matcherResult":{"actual":[true],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs GOWRIPRASADTW object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","object_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[true],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs GOWRIPRASADTW object_equals should log false when OBJECT_1=undefined and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1=undefined and OBJECT_2={}"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","object_equals"],"duration":2,"failureDetails":[{"matcherResult":{"actual":[true],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs GOWRIPRASADTW object_equals should log false when OBJECT_1={} and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={} and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs GOWRIPRASADTW object_equals should log true when OBJECT_1=undefined and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=undefined and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","object_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[true],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs GOWRIPRASADTW object_equals should log false when OBJECT_1=[1] and OBJECT_2={0:1}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1=[1] and OBJECT_2={0:1}"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","object_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[true],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs GOWRIPRASADTW object_equals should log false when OBJECT_1={0:1} and OBJECT_2=[1]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={0:1} and OBJECT_2=[1]"},{"ancestorTitles":["js-aofs","GOWRIPRASADTW","object_equals"],"duration":22,"failureDetails":[{"matcherResult":{"actual":["This line has a length of 95. Maximum allowed is 80. File: js-aofs-GOWRIPRASADTW/object_equals.js Line: 36","Closing curly brace does not appear on the same line as the subsequent block. File: js-aofs-GOWRIPRASADTW/object_equals.js Line: 54"],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"This line has a length of 95. Maximum allowed is 80. File: js-aofs-GOWRIPRASADTW/object_equals.js Line: 36\",\n+   \"Closing curly brace does not appear on the same line as the subsequent block. File: js-aofs-GOWRIPRASADTW/object_equals.js Line: 54\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"This line has a length of 95. Maximum allowed is 80. File: js-aofs-GOWRIPRASADTW/object_equals.js Line: 36\",\n+   \"Closing curly brace does not appear on the same line as the subsequent block. File: js-aofs-GOWRIPRASADTW/object_equals.js Line: 54\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:79:30)"],"fullName":"js-aofs GOWRIPRASADTW object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Harshavardhanlav","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["js-aofs","Harshavardhanlav","even_odd"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["js-aofs","Harshavardhanlav","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["js-aofs","Harshavardhanlav","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["js-aofs","Harshavardhanlav","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["js-aofs","Harshavardhanlav","even_odd"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["js-aofs","Harshavardhanlav","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["js-aofs","Harshavardhanlav","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["js-aofs","Harshavardhanlav","even_odd"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Harshavardhanlav","categorise"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["js-aofs","Harshavardhanlav","categorise"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["js-aofs","Harshavardhanlav","categorise"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["js-aofs","Harshavardhanlav","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["js-aofs","Harshavardhanlav","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["js-aofs","Harshavardhanlav","categorise"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["js-aofs","Harshavardhanlav","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["js-aofs","Harshavardhanlav","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["js-aofs","Harshavardhanlav","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["js-aofs","Harshavardhanlav","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["js-aofs","Harshavardhanlav","categorise"],"duration":17,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Harshavardhanlav","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["js-aofs","Harshavardhanlav","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["js-aofs","Harshavardhanlav","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["js-aofs","Harshavardhanlav","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["js-aofs","Harshavardhanlav","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["js-aofs","Harshavardhanlav","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["js-aofs","Harshavardhanlav","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["js-aofs","Harshavardhanlav","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["js-aofs","Harshavardhanlav","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["js-aofs","Harshavardhanlav","entries"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Harshavardhanlav","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["js-aofs","Harshavardhanlav","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["js-aofs","Harshavardhanlav","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["js-aofs","Harshavardhanlav","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["js-aofs","Harshavardhanlav","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["js-aofs","Harshavardhanlav","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["js-aofs","Harshavardhanlav","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["js-aofs","Harshavardhanlav","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["js-aofs","Harshavardhanlav","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["js-aofs","Harshavardhanlav","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["js-aofs","Harshavardhanlav","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["js-aofs","Harshavardhanlav","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["js-aofs","Harshavardhanlav","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["js-aofs","Harshavardhanlav","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["js-aofs","Harshavardhanlav","remove_adjacent_spaces"],"duration":20,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Harshavardhanlav","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["js-aofs","Harshavardhanlav","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["js-aofs","Harshavardhanlav","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["js-aofs","Harshavardhanlav","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["js-aofs","Harshavardhanlav","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["js-aofs","Harshavardhanlav","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["js-aofs","Harshavardhanlav","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["js-aofs","Harshavardhanlav","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["js-aofs","Harshavardhanlav","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["js-aofs","Harshavardhanlav","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["js-aofs","Harshavardhanlav","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["js-aofs","Harshavardhanlav","tribonacci"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Harshavardhanlav","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Harshavardhanlav","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["js-aofs","Harshavardhanlav","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["js-aofs","Harshavardhanlav","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["js-aofs","Harshavardhanlav","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","Harshavardhanlav","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","Harshavardhanlav","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Harshavardhanlav","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["js-aofs","Harshavardhanlav","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","Harshavardhanlav","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["js-aofs","Harshavardhanlav","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","Harshavardhanlav","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","Harshavardhanlav","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","Harshavardhanlav","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","Harshavardhanlav","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","Harshavardhanlav","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["js-aofs","Harshavardhanlav","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["js-aofs","Harshavardhanlav","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Harshavardhanlav","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["js-aofs","Harshavardhanlav","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["js-aofs","Harshavardhanlav","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["js-aofs","Harshavardhanlav","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["js-aofs","Harshavardhanlav","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav array_equals should log false when ARRAY_1=undefined and ARRAY_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=null"},{"ancestorTitles":["js-aofs","Harshavardhanlav","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav array_equals should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Harshavardhanlav","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav array_equals should log false when ARRAY_1=[1] and ARRAY_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=[1] and ARRAY_2={0:1}"},{"ancestorTitles":["js-aofs","Harshavardhanlav","array_equals"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav array_equals should log false when ARRAY_1={0:1} and ARRAY_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1={0:1} and ARRAY_2=[1]"},{"ancestorTitles":["js-aofs","Harshavardhanlav","array_equals"],"duration":23,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Harshavardhanlav","object_equals"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Harshavardhanlav","object_equals"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Harshavardhanlav","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Harshavardhanlav","object_equals"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Harshavardhanlav","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Harshavardhanlav","object_equals"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Harshavardhanlav","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Harshavardhanlav","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","Harshavardhanlav","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","Harshavardhanlav","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["js-aofs","Harshavardhanlav","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","Harshavardhanlav","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","Harshavardhanlav","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["js-aofs","Harshavardhanlav","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["js-aofs","Harshavardhanlav","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["js-aofs","Harshavardhanlav","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["js-aofs","Harshavardhanlav","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["js-aofs","Harshavardhanlav","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav object_equals should log false when OBJECT_1=undefined and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=undefined and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Harshavardhanlav","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav object_equals should log false when OBJECT_1={} and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={} and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","Harshavardhanlav","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav object_equals should log true when OBJECT_1=undefined and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=undefined and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","Harshavardhanlav","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav object_equals should log false when OBJECT_1=[1] and OBJECT_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=[1] and OBJECT_2={0:1}"},{"ancestorTitles":["js-aofs","Harshavardhanlav","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav object_equals should log false when OBJECT_1={0:1} and OBJECT_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={0:1} and OBJECT_2=[1]"},{"ancestorTitles":["js-aofs","Harshavardhanlav","object_equals"],"duration":28,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Harshavardhanlav object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","HemPradeepthummala","even_odd"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["js-aofs","HemPradeepthummala","even_odd"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["js-aofs","HemPradeepthummala","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["js-aofs","HemPradeepthummala","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["js-aofs","HemPradeepthummala","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["js-aofs","HemPradeepthummala","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["js-aofs","HemPradeepthummala","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["js-aofs","HemPradeepthummala","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["js-aofs","HemPradeepthummala","even_odd"],"duration":20,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","HemPradeepthummala","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["js-aofs","HemPradeepthummala","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["js-aofs","HemPradeepthummala","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["js-aofs","HemPradeepthummala","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["js-aofs","HemPradeepthummala","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["js-aofs","HemPradeepthummala","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["js-aofs","HemPradeepthummala","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["js-aofs","HemPradeepthummala","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["js-aofs","HemPradeepthummala","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["js-aofs","HemPradeepthummala","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["js-aofs","HemPradeepthummala","categorise"],"duration":20,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","HemPradeepthummala","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["js-aofs","HemPradeepthummala","entries"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["js-aofs","HemPradeepthummala","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["js-aofs","HemPradeepthummala","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["js-aofs","HemPradeepthummala","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["js-aofs","HemPradeepthummala","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["js-aofs","HemPradeepthummala","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["js-aofs","HemPradeepthummala","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["js-aofs","HemPradeepthummala","entries"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["js-aofs","HemPradeepthummala","entries"],"duration":30,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","HemPradeepthummala","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["js-aofs","HemPradeepthummala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["js-aofs","HemPradeepthummala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["js-aofs","HemPradeepthummala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["js-aofs","HemPradeepthummala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["js-aofs","HemPradeepthummala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["js-aofs","HemPradeepthummala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["js-aofs","HemPradeepthummala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["js-aofs","HemPradeepthummala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["js-aofs","HemPradeepthummala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["js-aofs","HemPradeepthummala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["js-aofs","HemPradeepthummala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["js-aofs","HemPradeepthummala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["js-aofs","HemPradeepthummala","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["js-aofs","HemPradeepthummala","remove_adjacent_spaces"],"duration":20,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","HemPradeepthummala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["js-aofs","HemPradeepthummala","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["js-aofs","HemPradeepthummala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["js-aofs","HemPradeepthummala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["js-aofs","HemPradeepthummala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["js-aofs","HemPradeepthummala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["js-aofs","HemPradeepthummala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["js-aofs","HemPradeepthummala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["js-aofs","HemPradeepthummala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["js-aofs","HemPradeepthummala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["js-aofs","HemPradeepthummala","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["js-aofs","HemPradeepthummala","tribonacci"],"duration":20,"failureDetails":[{"matcherResult":{"actual":["This line has a length of 101. Maximum allowed is 80. File: js-aofs-HemPradeepthummala/tribonacci.js Line: 27","This line has a length of 90. Maximum allowed is 80. File: js-aofs-HemPradeepthummala/tribonacci.js Line: 35"],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"This line has a length of 101. Maximum allowed is 80. File: js-aofs-HemPradeepthummala/tribonacci.js Line: 27\",\n+   \"This line has a length of 90. Maximum allowed is 80. File: js-aofs-HemPradeepthummala/tribonacci.js Line: 35\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"This line has a length of 101. Maximum allowed is 80. File: js-aofs-HemPradeepthummala/tribonacci.js Line: 27\",\n+   \"This line has a length of 90. Maximum allowed is 80. File: js-aofs-HemPradeepthummala/tribonacci.js Line: 35\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:79:30)"],"fullName":"js-aofs HemPradeepthummala tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","HemPradeepthummala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","HemPradeepthummala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["js-aofs","HemPradeepthummala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["js-aofs","HemPradeepthummala","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["js-aofs","HemPradeepthummala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","HemPradeepthummala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","HemPradeepthummala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","HemPradeepthummala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["js-aofs","HemPradeepthummala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","HemPradeepthummala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["js-aofs","HemPradeepthummala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","HemPradeepthummala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","HemPradeepthummala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","HemPradeepthummala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","HemPradeepthummala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","HemPradeepthummala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["js-aofs","HemPradeepthummala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["js-aofs","HemPradeepthummala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","HemPradeepthummala","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["js-aofs","HemPradeepthummala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["js-aofs","HemPradeepthummala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["js-aofs","HemPradeepthummala","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["js-aofs","HemPradeepthummala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala array_equals should log false when ARRAY_1=undefined and ARRAY_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=null"},{"ancestorTitles":["js-aofs","HemPradeepthummala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala array_equals should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","HemPradeepthummala","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala array_equals should log false when ARRAY_1=[1] and ARRAY_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=[1] and ARRAY_2={0:1}"},{"ancestorTitles":["js-aofs","HemPradeepthummala","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala array_equals should log false when ARRAY_1={0:1} and ARRAY_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1={0:1} and ARRAY_2=[1]"},{"ancestorTitles":["js-aofs","HemPradeepthummala","array_equals"],"duration":27,"failureDetails":[{"matcherResult":{"actual":["Function has a complexity of 27. Maximum allowed is 20. File: js-aofs-HemPradeepthummala/array_equals.js Line: 33","This line has a length of 251. Maximum allowed is 80. File: js-aofs-HemPradeepthummala/array_equals.js Line: 34","This line has a length of 133. Maximum allowed is 80. File: js-aofs-HemPradeepthummala/array_equals.js Line: 36","This line has a length of 176. Maximum allowed is 80. File: js-aofs-HemPradeepthummala/array_equals.js Line: 39"],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Function has a complexity of 27. Maximum allowed is 20. File: js-aofs-HemPradeepthummala/array_equals.js Line: 33\",\n+   \"This line has a length of 251. Maximum allowed is 80. File: js-aofs-HemPradeepthummala/array_equals.js Line: 34\",\n+   \"This line has a length of 133. Maximum allowed is 80. File: js-aofs-HemPradeepthummala/array_equals.js Line: 36\",\n+   \"This line has a length of 176. Maximum allowed is 80. File: js-aofs-HemPradeepthummala/array_equals.js Line: 39\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Function has a complexity of 27. Maximum allowed is 20. File: js-aofs-HemPradeepthummala/array_equals.js Line: 33\",\n+   \"This line has a length of 251. Maximum allowed is 80. File: js-aofs-HemPradeepthummala/array_equals.js Line: 34\",\n+   \"This line has a length of 133. Maximum allowed is 80. File: js-aofs-HemPradeepthummala/array_equals.js Line: 36\",\n+   \"This line has a length of 176. Maximum allowed is 80. File: js-aofs-HemPradeepthummala/array_equals.js Line: 39\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:79:30)"],"fullName":"js-aofs HemPradeepthummala array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","HemPradeepthummala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","HemPradeepthummala","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","HemPradeepthummala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","HemPradeepthummala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","HemPradeepthummala","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","HemPradeepthummala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","HemPradeepthummala","object_equals"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","HemPradeepthummala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","HemPradeepthummala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","HemPradeepthummala","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["js-aofs","HemPradeepthummala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","HemPradeepthummala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","HemPradeepthummala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["js-aofs","HemPradeepthummala","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["js-aofs","HemPradeepthummala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["js-aofs","HemPradeepthummala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["js-aofs","HemPradeepthummala","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs HemPradeepthummala object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["js-aofs","HemPradeepthummala","object_equals"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:34\n  if ((object1 === null && object2 === null) || (object1 !== null && object2 !== null && Object.keys(object1).length === Object.keys(object2).length)) {\n                                                                                                ^\n\nTypeError: Cannot convert undefined or null to object\n    at Function.keys (<anonymous>)\n    at compareObjects (evalmachine.<anonymous>:34:97)\n    at evalmachine.<anonymous>:51:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)"],"fullName":"js-aofs HemPradeepthummala object_equals should log false when OBJECT_1=undefined and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1=undefined and OBJECT_2={}"},{"ancestorTitles":["js-aofs","HemPradeepthummala","object_equals"],"duration":3,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:34\n  if ((object1 === null && object2 === null) || (object1 !== null && object2 !== null && Object.keys(object1).length === Object.keys(object2).length)) {\n                                                                                                                                ^\n\nTypeError: Cannot convert undefined or null to object\n    at Function.keys (<anonymous>)\n    at compareObjects (evalmachine.<anonymous>:34:129)\n    at evalmachine.<anonymous>:51:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)"],"fullName":"js-aofs HemPradeepthummala object_equals should log false when OBJECT_1={} and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={} and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","HemPradeepthummala","object_equals"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:34\n  if ((object1 === null && object2 === null) || (object1 !== null && object2 !== null && Object.keys(object1).length === Object.keys(object2).length)) {\n                                                                                                ^\n\nTypeError: Cannot convert undefined or null to object\n    at Function.keys (<anonymous>)\n    at compareObjects (evalmachine.<anonymous>:34:97)\n    at evalmachine.<anonymous>:51:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)"],"fullName":"js-aofs HemPradeepthummala object_equals should log true when OBJECT_1=undefined and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when OBJECT_1=undefined and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","HemPradeepthummala","object_equals"],"duration":2,"failureDetails":[{"matcherResult":{"actual":[true],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs HemPradeepthummala object_equals should log false when OBJECT_1=[1] and OBJECT_2={0:1}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1=[1] and OBJECT_2={0:1}"},{"ancestorTitles":["js-aofs","HemPradeepthummala","object_equals"],"duration":2,"failureDetails":[{"matcherResult":{"actual":[true],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs HemPradeepthummala object_equals should log false when OBJECT_1={0:1} and OBJECT_2=[1]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={0:1} and OBJECT_2=[1]"},{"ancestorTitles":["js-aofs","HemPradeepthummala","object_equals"],"duration":20,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (18). Maximum allowed is 15. File: js-aofs-HemPradeepthummala/object_equals.js Line: 33","This line has a length of 152. Maximum allowed is 80. File: js-aofs-HemPradeepthummala/object_equals.js Line: 34","Too many blank lines at the end of file. Max of 0 allowed. File: js-aofs-HemPradeepthummala/object_equals.js Line: 52"],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Function has too many lines (18). Maximum allowed is 15. File: js-aofs-HemPradeepthummala/object_equals.js Line: 33\",\n+   \"This line has a length of 152. Maximum allowed is 80. File: js-aofs-HemPradeepthummala/object_equals.js Line: 34\",\n+   \"Too many blank lines at the end of file. Max of 0 allowed. File: js-aofs-HemPradeepthummala/object_equals.js Line: 52\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"Function has too many lines (18). Maximum allowed is 15. File: js-aofs-HemPradeepthummala/object_equals.js Line: 33\",\n+   \"This line has a length of 152. Maximum allowed is 80. File: js-aofs-HemPradeepthummala/object_equals.js Line: 34\",\n+   \"Too many blank lines at the end of file. Max of 0 allowed. File: js-aofs-HemPradeepthummala/object_equals.js Line: 52\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:79:30)"],"fullName":"js-aofs HemPradeepthummala object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","even_odd"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","even_odd"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","categorise"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","categorise"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","categorise"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","categorise"],"duration":20,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","entries"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","entries"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","entries"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","remove_adjacent_spaces"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","remove_adjacent_spaces"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","remove_adjacent_spaces"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","remove_adjacent_spaces"],"duration":26,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","tribonacci"],"duration":19,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","array_equals"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","array_equals"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","array_equals"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","array_equals"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","array_equals"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","array_equals"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","array_equals"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","array_equals"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","array_equals"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","array_equals"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","array_equals"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","array_equals"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ array_equals should log false when ARRAY_1=undefined and ARRAY_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=null"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ array_equals should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ array_equals should log false when ARRAY_1=[1] and ARRAY_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=[1] and ARRAY_2={0:1}"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ array_equals should log false when ARRAY_1={0:1} and ARRAY_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1={0:1} and ARRAY_2=[1]"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","array_equals"],"duration":39,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","object_equals"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ object_equals should log false when OBJECT_1=undefined and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=undefined and OBJECT_2={}"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ object_equals should log false when OBJECT_1={} and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={} and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ object_equals should log true when OBJECT_1=undefined and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=undefined and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ object_equals should log false when OBJECT_1=[1] and OBJECT_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=[1] and OBJECT_2={0:1}"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ object_equals should log false when OBJECT_1={0:1} and OBJECT_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={0:1} and OBJECT_2=[1]"},{"ancestorTitles":["js-aofs","JAGADEESH2004PJ","object_equals"],"duration":35,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs JAGADEESH2004PJ object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","even_odd"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","even_odd"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","even_odd"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","even_odd"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","even_odd"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","even_odd"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","categorise"],"duration":24,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","entries"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","entries"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","entries"],"duration":25,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","remove_adjacent_spaces"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","remove_adjacent_spaces"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","remove_adjacent_spaces"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","remove_adjacent_spaces"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","remove_adjacent_spaces"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","remove_adjacent_spaces"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","tribonacci"],"duration":19,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA array_equals should log false when ARRAY_1=undefined and ARRAY_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=null"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA array_equals should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA array_equals should log false when ARRAY_1=[1] and ARRAY_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=[1] and ARRAY_2={0:1}"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA array_equals should log false when ARRAY_1={0:1} and ARRAY_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1={0:1} and ARRAY_2=[1]"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","array_equals"],"duration":17,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","object_equals"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA object_equals should log false when OBJECT_1=undefined and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=undefined and OBJECT_2={}"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA object_equals should log false when OBJECT_1={} and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={} and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA object_equals should log true when OBJECT_1=undefined and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=undefined and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA object_equals should log false when OBJECT_1=[1] and OBJECT_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=[1] and OBJECT_2={0:1}"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA object_equals should log false when OBJECT_1={0:1} and OBJECT_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={0:1} and OBJECT_2=[1]"},{"ancestorTitles":["js-aofs","KARTHEEK-TAMADA","object_equals"],"duration":19,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KARTHEEK-TAMADA object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","even_odd"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","even_odd"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","even_odd"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","even_odd"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","even_odd"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","even_odd"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","even_odd"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","even_odd"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","categorise"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","categorise"],"duration":58,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","entries"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","entries"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","entries"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","entries"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","entries"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","entries"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","entries"],"duration":29,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","remove_adjacent_spaces"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","remove_adjacent_spaces"],"duration":39,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","tribonacci"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","array_equals"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree array_equals should log false when ARRAY_1=undefined and ARRAY_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=null"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree array_equals should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree array_equals should log false when ARRAY_1=[1] and ARRAY_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=[1] and ARRAY_2={0:1}"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree array_equals should log false when ARRAY_1={0:1} and ARRAY_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1={0:1} and ARRAY_2=[1]"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","array_equals"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree object_equals should log false when OBJECT_1=undefined and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=undefined and OBJECT_2={}"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree object_equals should log false when OBJECT_1={} and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={} and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree object_equals should log true when OBJECT_1=undefined and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=undefined and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree object_equals should log false when OBJECT_1=[1] and OBJECT_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=[1] and OBJECT_2={0:1}"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree object_equals should log false when OBJECT_1={0:1} and OBJECT_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={0:1} and OBJECT_2=[1]"},{"ancestorTitles":["js-aofs","KalluriBhagyasree","object_equals"],"duration":21,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs KalluriBhagyasree object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Krishnakoushik005","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["js-aofs","Krishnakoushik005","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["js-aofs","Krishnakoushik005","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["js-aofs","Krishnakoushik005","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["js-aofs","Krishnakoushik005","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["js-aofs","Krishnakoushik005","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["js-aofs","Krishnakoushik005","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["js-aofs","Krishnakoushik005","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["js-aofs","Krishnakoushik005","even_odd"],"duration":29,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Krishnakoushik005","categorise"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["js-aofs","Krishnakoushik005","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["js-aofs","Krishnakoushik005","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["js-aofs","Krishnakoushik005","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["js-aofs","Krishnakoushik005","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["js-aofs","Krishnakoushik005","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["js-aofs","Krishnakoushik005","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["js-aofs","Krishnakoushik005","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["js-aofs","Krishnakoushik005","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["js-aofs","Krishnakoushik005","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["js-aofs","Krishnakoushik005","categorise"],"duration":17,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Krishnakoushik005","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["js-aofs","Krishnakoushik005","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["js-aofs","Krishnakoushik005","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["js-aofs","Krishnakoushik005","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["js-aofs","Krishnakoushik005","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["js-aofs","Krishnakoushik005","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["js-aofs","Krishnakoushik005","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["js-aofs","Krishnakoushik005","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["js-aofs","Krishnakoushik005","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["js-aofs","Krishnakoushik005","entries"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Krishnakoushik005","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["js-aofs","Krishnakoushik005","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["js-aofs","Krishnakoushik005","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["js-aofs","Krishnakoushik005","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["js-aofs","Krishnakoushik005","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["js-aofs","Krishnakoushik005","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["js-aofs","Krishnakoushik005","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["js-aofs","Krishnakoushik005","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["js-aofs","Krishnakoushik005","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["js-aofs","Krishnakoushik005","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["js-aofs","Krishnakoushik005","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["js-aofs","Krishnakoushik005","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["js-aofs","Krishnakoushik005","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["js-aofs","Krishnakoushik005","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["js-aofs","Krishnakoushik005","remove_adjacent_spaces"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Krishnakoushik005","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["js-aofs","Krishnakoushik005","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["js-aofs","Krishnakoushik005","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["js-aofs","Krishnakoushik005","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["js-aofs","Krishnakoushik005","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["js-aofs","Krishnakoushik005","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["js-aofs","Krishnakoushik005","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["js-aofs","Krishnakoushik005","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["js-aofs","Krishnakoushik005","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["js-aofs","Krishnakoushik005","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["js-aofs","Krishnakoushik005","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["js-aofs","Krishnakoushik005","tribonacci"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Krishnakoushik005","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Krishnakoushik005","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["js-aofs","Krishnakoushik005","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["js-aofs","Krishnakoushik005","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["js-aofs","Krishnakoushik005","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","Krishnakoushik005","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","Krishnakoushik005","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Krishnakoushik005","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["js-aofs","Krishnakoushik005","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","Krishnakoushik005","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["js-aofs","Krishnakoushik005","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","Krishnakoushik005","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","Krishnakoushik005","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","Krishnakoushik005","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","Krishnakoushik005","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","Krishnakoushik005","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["js-aofs","Krishnakoushik005","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["js-aofs","Krishnakoushik005","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Krishnakoushik005","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["js-aofs","Krishnakoushik005","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["js-aofs","Krishnakoushik005","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["js-aofs","Krishnakoushik005","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["js-aofs","Krishnakoushik005","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 array_equals should log false when ARRAY_1=undefined and ARRAY_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=null"},{"ancestorTitles":["js-aofs","Krishnakoushik005","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 array_equals should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Krishnakoushik005","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 array_equals should log false when ARRAY_1=[1] and ARRAY_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=[1] and ARRAY_2={0:1}"},{"ancestorTitles":["js-aofs","Krishnakoushik005","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 array_equals should log false when ARRAY_1={0:1} and ARRAY_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1={0:1} and ARRAY_2=[1]"},{"ancestorTitles":["js-aofs","Krishnakoushik005","array_equals"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Krishnakoushik005","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Krishnakoushik005","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Krishnakoushik005","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Krishnakoushik005","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Krishnakoushik005","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Krishnakoushik005","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Krishnakoushik005","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Krishnakoushik005","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","Krishnakoushik005","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","Krishnakoushik005","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["js-aofs","Krishnakoushik005","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","Krishnakoushik005","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","Krishnakoushik005","object_equals"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["js-aofs","Krishnakoushik005","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["js-aofs","Krishnakoushik005","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["js-aofs","Krishnakoushik005","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["js-aofs","Krishnakoushik005","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["js-aofs","Krishnakoushik005","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 object_equals should log false when OBJECT_1=undefined and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=undefined and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Krishnakoushik005","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 object_equals should log false when OBJECT_1={} and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={} and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","Krishnakoushik005","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 object_equals should log true when OBJECT_1=undefined and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=undefined and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","Krishnakoushik005","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 object_equals should log false when OBJECT_1=[1] and OBJECT_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=[1] and OBJECT_2={0:1}"},{"ancestorTitles":["js-aofs","Krishnakoushik005","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 object_equals should log false when OBJECT_1={0:1} and OBJECT_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={0:1} and OBJECT_2=[1]"},{"ancestorTitles":["js-aofs","Krishnakoushik005","object_equals"],"duration":16,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Krishnakoushik005 object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Kshivaji333","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["js-aofs","Kshivaji333","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["js-aofs","Kshivaji333","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["js-aofs","Kshivaji333","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["js-aofs","Kshivaji333","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["js-aofs","Kshivaji333","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["js-aofs","Kshivaji333","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["js-aofs","Kshivaji333","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["js-aofs","Kshivaji333","even_odd"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Kshivaji333","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["js-aofs","Kshivaji333","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["js-aofs","Kshivaji333","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["js-aofs","Kshivaji333","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["js-aofs","Kshivaji333","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["js-aofs","Kshivaji333","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["js-aofs","Kshivaji333","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["js-aofs","Kshivaji333","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["js-aofs","Kshivaji333","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["js-aofs","Kshivaji333","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["js-aofs","Kshivaji333","categorise"],"duration":19,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Kshivaji333","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["js-aofs","Kshivaji333","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["js-aofs","Kshivaji333","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["js-aofs","Kshivaji333","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["js-aofs","Kshivaji333","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["js-aofs","Kshivaji333","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["js-aofs","Kshivaji333","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["js-aofs","Kshivaji333","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["js-aofs","Kshivaji333","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["js-aofs","Kshivaji333","entries"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Kshivaji333","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["js-aofs","Kshivaji333","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["js-aofs","Kshivaji333","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["js-aofs","Kshivaji333","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["js-aofs","Kshivaji333","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["js-aofs","Kshivaji333","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["js-aofs","Kshivaji333","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["js-aofs","Kshivaji333","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["js-aofs","Kshivaji333","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["js-aofs","Kshivaji333","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["js-aofs","Kshivaji333","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["js-aofs","Kshivaji333","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["js-aofs","Kshivaji333","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["js-aofs","Kshivaji333","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["js-aofs","Kshivaji333","remove_adjacent_spaces"],"duration":24,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Kshivaji333","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["js-aofs","Kshivaji333","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["js-aofs","Kshivaji333","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["js-aofs","Kshivaji333","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["js-aofs","Kshivaji333","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["js-aofs","Kshivaji333","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["js-aofs","Kshivaji333","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["js-aofs","Kshivaji333","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["js-aofs","Kshivaji333","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["js-aofs","Kshivaji333","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["js-aofs","Kshivaji333","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["js-aofs","Kshivaji333","tribonacci"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Kshivaji333","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Kshivaji333","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["js-aofs","Kshivaji333","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["js-aofs","Kshivaji333","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["js-aofs","Kshivaji333","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","Kshivaji333","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","Kshivaji333","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Kshivaji333","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["js-aofs","Kshivaji333","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","Kshivaji333","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["js-aofs","Kshivaji333","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","Kshivaji333","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","Kshivaji333","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","Kshivaji333","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","Kshivaji333","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","Kshivaji333","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["js-aofs","Kshivaji333","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["js-aofs","Kshivaji333","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Kshivaji333","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["js-aofs","Kshivaji333","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["js-aofs","Kshivaji333","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["js-aofs","Kshivaji333","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["js-aofs","Kshivaji333","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 array_equals should log false when ARRAY_1=undefined and ARRAY_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=null"},{"ancestorTitles":["js-aofs","Kshivaji333","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 array_equals should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Kshivaji333","array_equals"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 array_equals should log false when ARRAY_1=[1] and ARRAY_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=[1] and ARRAY_2={0:1}"},{"ancestorTitles":["js-aofs","Kshivaji333","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 array_equals should log false when ARRAY_1={0:1} and ARRAY_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1={0:1} and ARRAY_2=[1]"},{"ancestorTitles":["js-aofs","Kshivaji333","array_equals"],"duration":16,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Kshivaji333","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Kshivaji333","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Kshivaji333","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Kshivaji333","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Kshivaji333","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Kshivaji333","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Kshivaji333","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Kshivaji333","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","Kshivaji333","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","Kshivaji333","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["js-aofs","Kshivaji333","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","Kshivaji333","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","Kshivaji333","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["js-aofs","Kshivaji333","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["js-aofs","Kshivaji333","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["js-aofs","Kshivaji333","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["js-aofs","Kshivaji333","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["js-aofs","Kshivaji333","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 object_equals should log false when OBJECT_1=undefined and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=undefined and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Kshivaji333","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 object_equals should log false when OBJECT_1={} and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={} and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","Kshivaji333","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 object_equals should log true when OBJECT_1=undefined and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=undefined and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","Kshivaji333","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 object_equals should log false when OBJECT_1=[1] and OBJECT_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=[1] and OBJECT_2={0:1}"},{"ancestorTitles":["js-aofs","Kshivaji333","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 object_equals should log false when OBJECT_1={0:1} and OBJECT_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={0:1} and OBJECT_2=[1]"},{"ancestorTitles":["js-aofs","Kshivaji333","object_equals"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Kshivaji333 object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","even_odd"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","even_odd"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","categorise"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","entries"],"duration":17,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","remove_adjacent_spaces"],"duration":17,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","tribonacci"],"duration":17,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi array_equals should log false when ARRAY_1=undefined and ARRAY_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=null"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi array_equals should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi array_equals should log false when ARRAY_1=[1] and ARRAY_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=[1] and ARRAY_2={0:1}"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi array_equals should log false when ARRAY_1={0:1} and ARRAY_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1={0:1} and ARRAY_2=[1]"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","array_equals"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","object_equals"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi object_equals should log false when OBJECT_1=undefined and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=undefined and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi object_equals should log false when OBJECT_1={} and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={} and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi object_equals should log true when OBJECT_1=undefined and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=undefined and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi object_equals should log false when OBJECT_1=[1] and OBJECT_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=[1] and OBJECT_2={0:1}"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi object_equals should log false when OBJECT_1={0:1} and OBJECT_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={0:1} and OBJECT_2=[1]"},{"ancestorTitles":["js-aofs","Nagalakshmivaranasi","object_equals"],"duration":129,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nagalakshmivaranasi object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Nithin7411","even_odd"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["js-aofs","Nithin7411","even_odd"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["js-aofs","Nithin7411","even_odd"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["js-aofs","Nithin7411","even_odd"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["js-aofs","Nithin7411","even_odd"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["js-aofs","Nithin7411","even_odd"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["js-aofs","Nithin7411","even_odd"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["js-aofs","Nithin7411","even_odd"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["js-aofs","Nithin7411","even_odd"],"duration":69,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Nithin7411","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["js-aofs","Nithin7411","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["js-aofs","Nithin7411","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["js-aofs","Nithin7411","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["js-aofs","Nithin7411","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["js-aofs","Nithin7411","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["js-aofs","Nithin7411","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["js-aofs","Nithin7411","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["js-aofs","Nithin7411","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["js-aofs","Nithin7411","categorise"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["js-aofs","Nithin7411","categorise"],"duration":87,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Nithin7411","entries"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["js-aofs","Nithin7411","entries"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["js-aofs","Nithin7411","entries"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["js-aofs","Nithin7411","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["js-aofs","Nithin7411","entries"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["js-aofs","Nithin7411","entries"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["js-aofs","Nithin7411","entries"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["js-aofs","Nithin7411","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["js-aofs","Nithin7411","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["js-aofs","Nithin7411","entries"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Nithin7411","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["js-aofs","Nithin7411","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["js-aofs","Nithin7411","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["js-aofs","Nithin7411","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["js-aofs","Nithin7411","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["js-aofs","Nithin7411","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["js-aofs","Nithin7411","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["js-aofs","Nithin7411","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["js-aofs","Nithin7411","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["js-aofs","Nithin7411","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["js-aofs","Nithin7411","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["js-aofs","Nithin7411","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["js-aofs","Nithin7411","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["js-aofs","Nithin7411","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["js-aofs","Nithin7411","remove_adjacent_spaces"],"duration":22,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Nithin7411","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["js-aofs","Nithin7411","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["js-aofs","Nithin7411","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["js-aofs","Nithin7411","tribonacci"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["js-aofs","Nithin7411","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["js-aofs","Nithin7411","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["js-aofs","Nithin7411","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["js-aofs","Nithin7411","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["js-aofs","Nithin7411","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["js-aofs","Nithin7411","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["js-aofs","Nithin7411","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["js-aofs","Nithin7411","tribonacci"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Nithin7411","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Nithin7411","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["js-aofs","Nithin7411","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["js-aofs","Nithin7411","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["js-aofs","Nithin7411","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","Nithin7411","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","Nithin7411","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Nithin7411","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["js-aofs","Nithin7411","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","Nithin7411","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["js-aofs","Nithin7411","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","Nithin7411","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","Nithin7411","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","Nithin7411","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","Nithin7411","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","Nithin7411","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["js-aofs","Nithin7411","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["js-aofs","Nithin7411","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Nithin7411","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["js-aofs","Nithin7411","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["js-aofs","Nithin7411","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["js-aofs","Nithin7411","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["js-aofs","Nithin7411","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 array_equals should log false when ARRAY_1=undefined and ARRAY_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=null"},{"ancestorTitles":["js-aofs","Nithin7411","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 array_equals should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Nithin7411","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 array_equals should log false when ARRAY_1=[1] and ARRAY_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=[1] and ARRAY_2={0:1}"},{"ancestorTitles":["js-aofs","Nithin7411","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 array_equals should log false when ARRAY_1={0:1} and ARRAY_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1={0:1} and ARRAY_2=[1]"},{"ancestorTitles":["js-aofs","Nithin7411","array_equals"],"duration":29,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (17). Maximum allowed is 15. File: js-aofs-Nithin7411/array_equals.js Line: 49"],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Function has too many lines (17). Maximum allowed is 15. File: js-aofs-Nithin7411/array_equals.js Line: 49\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Function has too many lines (17). Maximum allowed is 15. File: js-aofs-Nithin7411/array_equals.js Line: 49\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:79:30)"],"fullName":"js-aofs Nithin7411 array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Nithin7411","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Nithin7411","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Nithin7411","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Nithin7411","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Nithin7411","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Nithin7411","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Nithin7411","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Nithin7411","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","Nithin7411","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","Nithin7411","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["js-aofs","Nithin7411","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","Nithin7411","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","Nithin7411","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["js-aofs","Nithin7411","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["js-aofs","Nithin7411","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["js-aofs","Nithin7411","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["js-aofs","Nithin7411","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["js-aofs","Nithin7411","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 object_equals should log false when OBJECT_1=undefined and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=undefined and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Nithin7411","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 object_equals should log false when OBJECT_1={} and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={} and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","Nithin7411","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 object_equals should log true when OBJECT_1=undefined and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=undefined and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","Nithin7411","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 object_equals should log false when OBJECT_1=[1] and OBJECT_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=[1] and OBJECT_2={0:1}"},{"ancestorTitles":["js-aofs","Nithin7411","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Nithin7411 object_equals should log false when OBJECT_1={0:1} and OBJECT_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={0:1} and OBJECT_2=[1]"},{"ancestorTitles":["js-aofs","Nithin7411","object_equals"],"duration":30,"failureDetails":[{"matcherResult":{"actual":["Function has too many lines (19). Maximum allowed is 15. File: js-aofs-Nithin7411/object_equals.js Line: 69"],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Function has too many lines (19). Maximum allowed is 15. File: js-aofs-Nithin7411/object_equals.js Line: 69\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Function has too many lines (19). Maximum allowed is 15. File: js-aofs-Nithin7411/object_equals.js Line: 69\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:79:30)"],"fullName":"js-aofs Nithin7411 object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","even_odd"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","even_odd"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","even_odd"],"duration":19,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","categorise"],"duration":21,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","entries"],"duration":17,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","remove_adjacent_spaces"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","tribonacci"],"duration":17,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 array_equals should log false when ARRAY_1=undefined and ARRAY_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=null"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 array_equals should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 array_equals should log false when ARRAY_1=[1] and ARRAY_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=[1] and ARRAY_2={0:1}"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 array_equals should log false when ARRAY_1={0:1} and ARRAY_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1={0:1} and ARRAY_2=[1]"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","array_equals"],"duration":24,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","object_equals"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 object_equals should log false when OBJECT_1=undefined and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=undefined and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 object_equals should log false when OBJECT_1={} and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={} and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 object_equals should log true when OBJECT_1=undefined and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=undefined and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 object_equals should log false when OBJECT_1=[1] and OBJECT_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=[1] and OBJECT_2={0:1}"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 object_equals should log false when OBJECT_1={0:1} and OBJECT_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={0:1} and OBJECT_2=[1]"},{"ancestorTitles":["js-aofs","Pardhasaradhi031","object_equals"],"duration":28,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pardhasaradhi031 object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Pujari-Praveen","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["js-aofs","Pujari-Praveen","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["js-aofs","Pujari-Praveen","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["js-aofs","Pujari-Praveen","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["js-aofs","Pujari-Praveen","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["js-aofs","Pujari-Praveen","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["js-aofs","Pujari-Praveen","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["js-aofs","Pujari-Praveen","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["js-aofs","Pujari-Praveen","even_odd"],"duration":16,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Pujari-Praveen","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["js-aofs","Pujari-Praveen","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["js-aofs","Pujari-Praveen","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["js-aofs","Pujari-Praveen","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["js-aofs","Pujari-Praveen","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["js-aofs","Pujari-Praveen","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["js-aofs","Pujari-Praveen","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["js-aofs","Pujari-Praveen","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["js-aofs","Pujari-Praveen","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["js-aofs","Pujari-Praveen","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["js-aofs","Pujari-Praveen","categorise"],"duration":32,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Pujari-Praveen","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["js-aofs","Pujari-Praveen","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["js-aofs","Pujari-Praveen","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["js-aofs","Pujari-Praveen","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["js-aofs","Pujari-Praveen","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["js-aofs","Pujari-Praveen","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["js-aofs","Pujari-Praveen","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["js-aofs","Pujari-Praveen","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["js-aofs","Pujari-Praveen","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["js-aofs","Pujari-Praveen","entries"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Pujari-Praveen","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["js-aofs","Pujari-Praveen","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["js-aofs","Pujari-Praveen","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["js-aofs","Pujari-Praveen","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["js-aofs","Pujari-Praveen","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["js-aofs","Pujari-Praveen","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["js-aofs","Pujari-Praveen","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["js-aofs","Pujari-Praveen","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["js-aofs","Pujari-Praveen","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["js-aofs","Pujari-Praveen","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["js-aofs","Pujari-Praveen","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["js-aofs","Pujari-Praveen","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["js-aofs","Pujari-Praveen","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["js-aofs","Pujari-Praveen","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["js-aofs","Pujari-Praveen","remove_adjacent_spaces"],"duration":23,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Pujari-Praveen","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["js-aofs","Pujari-Praveen","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["js-aofs","Pujari-Praveen","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["js-aofs","Pujari-Praveen","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["js-aofs","Pujari-Praveen","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["js-aofs","Pujari-Praveen","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["js-aofs","Pujari-Praveen","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["js-aofs","Pujari-Praveen","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["js-aofs","Pujari-Praveen","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["js-aofs","Pujari-Praveen","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["js-aofs","Pujari-Praveen","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["js-aofs","Pujari-Praveen","tribonacci"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Pujari-Praveen","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Pujari-Praveen","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["js-aofs","Pujari-Praveen","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["js-aofs","Pujari-Praveen","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["js-aofs","Pujari-Praveen","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","Pujari-Praveen","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","Pujari-Praveen","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Pujari-Praveen","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["js-aofs","Pujari-Praveen","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","Pujari-Praveen","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["js-aofs","Pujari-Praveen","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","Pujari-Praveen","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","Pujari-Praveen","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","Pujari-Praveen","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","Pujari-Praveen","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","Pujari-Praveen","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["js-aofs","Pujari-Praveen","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["js-aofs","Pujari-Praveen","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Pujari-Praveen","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["js-aofs","Pujari-Praveen","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["js-aofs","Pujari-Praveen","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["js-aofs","Pujari-Praveen","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["js-aofs","Pujari-Praveen","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen array_equals should log false when ARRAY_1=undefined and ARRAY_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=null"},{"ancestorTitles":["js-aofs","Pujari-Praveen","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen array_equals should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Pujari-Praveen","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen array_equals should log false when ARRAY_1=[1] and ARRAY_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=[1] and ARRAY_2={0:1}"},{"ancestorTitles":["js-aofs","Pujari-Praveen","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen array_equals should log false when ARRAY_1={0:1} and ARRAY_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1={0:1} and ARRAY_2=[1]"},{"ancestorTitles":["js-aofs","Pujari-Praveen","array_equals"],"duration":32,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Pujari-Praveen","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Pujari-Praveen","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Pujari-Praveen","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Pujari-Praveen","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Pujari-Praveen","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Pujari-Praveen","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Pujari-Praveen","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Pujari-Praveen","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","Pujari-Praveen","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","Pujari-Praveen","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["js-aofs","Pujari-Praveen","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","Pujari-Praveen","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","Pujari-Praveen","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["js-aofs","Pujari-Praveen","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["js-aofs","Pujari-Praveen","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["js-aofs","Pujari-Praveen","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["js-aofs","Pujari-Praveen","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["js-aofs","Pujari-Praveen","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen object_equals should log false when OBJECT_1=undefined and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=undefined and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Pujari-Praveen","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen object_equals should log false when OBJECT_1={} and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={} and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","Pujari-Praveen","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen object_equals should log true when OBJECT_1=undefined and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=undefined and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","Pujari-Praveen","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen object_equals should log false when OBJECT_1=[1] and OBJECT_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=[1] and OBJECT_2={0:1}"},{"ancestorTitles":["js-aofs","Pujari-Praveen","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen object_equals should log false when OBJECT_1={0:1} and OBJECT_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={0:1} and OBJECT_2=[1]"},{"ancestorTitles":["js-aofs","Pujari-Praveen","object_equals"],"duration":35,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Pujari-Praveen object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","even_odd"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","even_odd"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","even_odd"],"duration":19,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","categorise"],"duration":33,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","entries"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","entries"],"duration":32,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","remove_adjacent_spaces"],"duration":25,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","tribonacci"],"duration":22,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU array_equals should log false when ARRAY_1=undefined and ARRAY_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=null"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU array_equals should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU array_equals should log false when ARRAY_1=[1] and ARRAY_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=[1] and ARRAY_2={0:1}"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU array_equals should log false when ARRAY_1={0:1} and ARRAY_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1={0:1} and ARRAY_2=[1]"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","array_equals"],"duration":30,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","object_equals"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU object_equals should log false when OBJECT_1=undefined and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=undefined and OBJECT_2={}"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU object_equals should log false when OBJECT_1={} and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={} and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU object_equals should log true when OBJECT_1=undefined and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=undefined and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU object_equals should log false when OBJECT_1=[1] and OBJECT_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=[1] and OBJECT_2={0:1}"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU object_equals should log false when OBJECT_1={0:1} and OBJECT_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={0:1} and OBJECT_2=[1]"},{"ancestorTitles":["js-aofs","RAKESHGURUGU","object_equals"],"duration":36,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs RAKESHGURUGU object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Rafiya1207","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["js-aofs","Rafiya1207","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["js-aofs","Rafiya1207","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["js-aofs","Rafiya1207","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["js-aofs","Rafiya1207","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["js-aofs","Rafiya1207","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["js-aofs","Rafiya1207","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["js-aofs","Rafiya1207","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["js-aofs","Rafiya1207","even_odd"],"duration":25,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Rafiya1207","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["js-aofs","Rafiya1207","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["js-aofs","Rafiya1207","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["js-aofs","Rafiya1207","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["js-aofs","Rafiya1207","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["js-aofs","Rafiya1207","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["js-aofs","Rafiya1207","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["js-aofs","Rafiya1207","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["js-aofs","Rafiya1207","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["js-aofs","Rafiya1207","categorise"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["js-aofs","Rafiya1207","categorise"],"duration":23,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Rafiya1207","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["js-aofs","Rafiya1207","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["js-aofs","Rafiya1207","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["js-aofs","Rafiya1207","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["js-aofs","Rafiya1207","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["js-aofs","Rafiya1207","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["js-aofs","Rafiya1207","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["js-aofs","Rafiya1207","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["js-aofs","Rafiya1207","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["js-aofs","Rafiya1207","entries"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Rafiya1207","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["js-aofs","Rafiya1207","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["js-aofs","Rafiya1207","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["js-aofs","Rafiya1207","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["js-aofs","Rafiya1207","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["js-aofs","Rafiya1207","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["js-aofs","Rafiya1207","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["js-aofs","Rafiya1207","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["js-aofs","Rafiya1207","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["js-aofs","Rafiya1207","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["js-aofs","Rafiya1207","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["js-aofs","Rafiya1207","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["js-aofs","Rafiya1207","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["js-aofs","Rafiya1207","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["js-aofs","Rafiya1207","remove_adjacent_spaces"],"duration":26,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Rafiya1207","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["js-aofs","Rafiya1207","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["js-aofs","Rafiya1207","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["js-aofs","Rafiya1207","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["js-aofs","Rafiya1207","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["js-aofs","Rafiya1207","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["js-aofs","Rafiya1207","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["js-aofs","Rafiya1207","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["js-aofs","Rafiya1207","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["js-aofs","Rafiya1207","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["js-aofs","Rafiya1207","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["js-aofs","Rafiya1207","tribonacci"],"duration":16,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Rafiya1207","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Rafiya1207","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["js-aofs","Rafiya1207","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["js-aofs","Rafiya1207","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["js-aofs","Rafiya1207","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","Rafiya1207","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","Rafiya1207","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Rafiya1207","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["js-aofs","Rafiya1207","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","Rafiya1207","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["js-aofs","Rafiya1207","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","Rafiya1207","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","Rafiya1207","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","Rafiya1207","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","Rafiya1207","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","Rafiya1207","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["js-aofs","Rafiya1207","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["js-aofs","Rafiya1207","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Rafiya1207","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["js-aofs","Rafiya1207","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["js-aofs","Rafiya1207","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["js-aofs","Rafiya1207","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["js-aofs","Rafiya1207","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 array_equals should log false when ARRAY_1=undefined and ARRAY_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=null"},{"ancestorTitles":["js-aofs","Rafiya1207","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 array_equals should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Rafiya1207","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 array_equals should log false when ARRAY_1=[1] and ARRAY_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=[1] and ARRAY_2={0:1}"},{"ancestorTitles":["js-aofs","Rafiya1207","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 array_equals should log false when ARRAY_1={0:1} and ARRAY_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1={0:1} and ARRAY_2=[1]"},{"ancestorTitles":["js-aofs","Rafiya1207","array_equals"],"duration":40,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Rafiya1207","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Rafiya1207","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Rafiya1207","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Rafiya1207","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Rafiya1207","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Rafiya1207","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Rafiya1207","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Rafiya1207","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","Rafiya1207","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","Rafiya1207","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["js-aofs","Rafiya1207","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","Rafiya1207","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","Rafiya1207","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["js-aofs","Rafiya1207","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["js-aofs","Rafiya1207","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["js-aofs","Rafiya1207","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["js-aofs","Rafiya1207","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["js-aofs","Rafiya1207","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 object_equals should log false when OBJECT_1=undefined and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=undefined and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Rafiya1207","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 object_equals should log false when OBJECT_1={} and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={} and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","Rafiya1207","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 object_equals should log true when OBJECT_1=undefined and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=undefined and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","Rafiya1207","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 object_equals should log false when OBJECT_1=[1] and OBJECT_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=[1] and OBJECT_2={0:1}"},{"ancestorTitles":["js-aofs","Rafiya1207","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 object_equals should log false when OBJECT_1={0:1} and OBJECT_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={0:1} and OBJECT_2=[1]"},{"ancestorTitles":["js-aofs","Rafiya1207","object_equals"],"duration":39,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rafiya1207 object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Revanth-backbencher","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["js-aofs","Revanth-backbencher","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["js-aofs","Revanth-backbencher","even_odd"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["js-aofs","Revanth-backbencher","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["js-aofs","Revanth-backbencher","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["js-aofs","Revanth-backbencher","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["js-aofs","Revanth-backbencher","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["js-aofs","Revanth-backbencher","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["js-aofs","Revanth-backbencher","even_odd"],"duration":19,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Revanth-backbencher","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["js-aofs","Revanth-backbencher","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["js-aofs","Revanth-backbencher","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["js-aofs","Revanth-backbencher","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["js-aofs","Revanth-backbencher","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["js-aofs","Revanth-backbencher","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["js-aofs","Revanth-backbencher","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["js-aofs","Revanth-backbencher","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["js-aofs","Revanth-backbencher","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["js-aofs","Revanth-backbencher","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["js-aofs","Revanth-backbencher","categorise"],"duration":38,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Revanth-backbencher","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["js-aofs","Revanth-backbencher","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["js-aofs","Revanth-backbencher","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["js-aofs","Revanth-backbencher","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["js-aofs","Revanth-backbencher","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["js-aofs","Revanth-backbencher","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["js-aofs","Revanth-backbencher","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["js-aofs","Revanth-backbencher","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["js-aofs","Revanth-backbencher","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["js-aofs","Revanth-backbencher","entries"],"duration":23,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Revanth-backbencher","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["js-aofs","Revanth-backbencher","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["js-aofs","Revanth-backbencher","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["js-aofs","Revanth-backbencher","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["js-aofs","Revanth-backbencher","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["js-aofs","Revanth-backbencher","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["js-aofs","Revanth-backbencher","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["js-aofs","Revanth-backbencher","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["js-aofs","Revanth-backbencher","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["js-aofs","Revanth-backbencher","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["js-aofs","Revanth-backbencher","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["js-aofs","Revanth-backbencher","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["js-aofs","Revanth-backbencher","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["js-aofs","Revanth-backbencher","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["js-aofs","Revanth-backbencher","remove_adjacent_spaces"],"duration":43,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Revanth-backbencher","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["js-aofs","Revanth-backbencher","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["js-aofs","Revanth-backbencher","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["js-aofs","Revanth-backbencher","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["js-aofs","Revanth-backbencher","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["js-aofs","Revanth-backbencher","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["js-aofs","Revanth-backbencher","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["js-aofs","Revanth-backbencher","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["js-aofs","Revanth-backbencher","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["js-aofs","Revanth-backbencher","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["js-aofs","Revanth-backbencher","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["js-aofs","Revanth-backbencher","tribonacci"],"duration":22,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Revanth-backbencher","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Revanth-backbencher","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["js-aofs","Revanth-backbencher","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["js-aofs","Revanth-backbencher","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["js-aofs","Revanth-backbencher","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","Revanth-backbencher","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","Revanth-backbencher","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Revanth-backbencher","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["js-aofs","Revanth-backbencher","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","Revanth-backbencher","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["js-aofs","Revanth-backbencher","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","Revanth-backbencher","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","Revanth-backbencher","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","Revanth-backbencher","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","Revanth-backbencher","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","Revanth-backbencher","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["js-aofs","Revanth-backbencher","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["js-aofs","Revanth-backbencher","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Revanth-backbencher","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["js-aofs","Revanth-backbencher","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["js-aofs","Revanth-backbencher","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["js-aofs","Revanth-backbencher","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["js-aofs","Revanth-backbencher","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher array_equals should log false when ARRAY_1=undefined and ARRAY_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=null"},{"ancestorTitles":["js-aofs","Revanth-backbencher","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher array_equals should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Revanth-backbencher","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher array_equals should log false when ARRAY_1=[1] and ARRAY_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=[1] and ARRAY_2={0:1}"},{"ancestorTitles":["js-aofs","Revanth-backbencher","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher array_equals should log false when ARRAY_1={0:1} and ARRAY_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1={0:1} and ARRAY_2=[1]"},{"ancestorTitles":["js-aofs","Revanth-backbencher","array_equals"],"duration":33,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Revanth-backbencher","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Revanth-backbencher","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Revanth-backbencher","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Revanth-backbencher","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Revanth-backbencher","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Revanth-backbencher","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Revanth-backbencher","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Revanth-backbencher","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","Revanth-backbencher","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","Revanth-backbencher","object_equals"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["js-aofs","Revanth-backbencher","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","Revanth-backbencher","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","Revanth-backbencher","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["js-aofs","Revanth-backbencher","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["js-aofs","Revanth-backbencher","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["js-aofs","Revanth-backbencher","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["js-aofs","Revanth-backbencher","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["js-aofs","Revanth-backbencher","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher object_equals should log false when OBJECT_1=undefined and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=undefined and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Revanth-backbencher","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher object_equals should log false when OBJECT_1={} and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={} and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","Revanth-backbencher","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher object_equals should log true when OBJECT_1=undefined and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=undefined and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","Revanth-backbencher","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher object_equals should log false when OBJECT_1=[1] and OBJECT_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=[1] and OBJECT_2={0:1}"},{"ancestorTitles":["js-aofs","Revanth-backbencher","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher object_equals should log false when OBJECT_1={0:1} and OBJECT_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={0:1} and OBJECT_2=[1]"},{"ancestorTitles":["js-aofs","Revanth-backbencher","object_equals"],"duration":37,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Revanth-backbencher object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Rohith-216","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["js-aofs","Rohith-216","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["js-aofs","Rohith-216","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["js-aofs","Rohith-216","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["js-aofs","Rohith-216","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["js-aofs","Rohith-216","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["js-aofs","Rohith-216","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["js-aofs","Rohith-216","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["js-aofs","Rohith-216","even_odd"],"duration":37,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Rohith-216","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["js-aofs","Rohith-216","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["js-aofs","Rohith-216","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["js-aofs","Rohith-216","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["js-aofs","Rohith-216","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["js-aofs","Rohith-216","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["js-aofs","Rohith-216","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["js-aofs","Rohith-216","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["js-aofs","Rohith-216","categorise"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["js-aofs","Rohith-216","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["js-aofs","Rohith-216","categorise"],"duration":43,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Rohith-216","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["js-aofs","Rohith-216","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["js-aofs","Rohith-216","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["js-aofs","Rohith-216","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["js-aofs","Rohith-216","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["js-aofs","Rohith-216","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["js-aofs","Rohith-216","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["js-aofs","Rohith-216","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["js-aofs","Rohith-216","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["js-aofs","Rohith-216","entries"],"duration":17,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Rohith-216","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["js-aofs","Rohith-216","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["js-aofs","Rohith-216","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["js-aofs","Rohith-216","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["js-aofs","Rohith-216","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["js-aofs","Rohith-216","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["js-aofs","Rohith-216","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["js-aofs","Rohith-216","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["js-aofs","Rohith-216","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["js-aofs","Rohith-216","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["js-aofs","Rohith-216","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["js-aofs","Rohith-216","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["js-aofs","Rohith-216","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["js-aofs","Rohith-216","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["js-aofs","Rohith-216","remove_adjacent_spaces"],"duration":41,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Rohith-216","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["js-aofs","Rohith-216","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["js-aofs","Rohith-216","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["js-aofs","Rohith-216","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["js-aofs","Rohith-216","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["js-aofs","Rohith-216","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["js-aofs","Rohith-216","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["js-aofs","Rohith-216","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["js-aofs","Rohith-216","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["js-aofs","Rohith-216","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["js-aofs","Rohith-216","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["js-aofs","Rohith-216","tribonacci"],"duration":28,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Rohith-216","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Rohith-216","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["js-aofs","Rohith-216","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["js-aofs","Rohith-216","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["js-aofs","Rohith-216","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","Rohith-216","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","Rohith-216","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Rohith-216","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["js-aofs","Rohith-216","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","Rohith-216","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["js-aofs","Rohith-216","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","Rohith-216","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","Rohith-216","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","Rohith-216","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","Rohith-216","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","Rohith-216","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["js-aofs","Rohith-216","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["js-aofs","Rohith-216","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Rohith-216","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["js-aofs","Rohith-216","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["js-aofs","Rohith-216","array_equals"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["js-aofs","Rohith-216","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["js-aofs","Rohith-216","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 array_equals should log false when ARRAY_1=undefined and ARRAY_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=null"},{"ancestorTitles":["js-aofs","Rohith-216","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 array_equals should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Rohith-216","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 array_equals should log false when ARRAY_1=[1] and ARRAY_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=[1] and ARRAY_2={0:1}"},{"ancestorTitles":["js-aofs","Rohith-216","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 array_equals should log false when ARRAY_1={0:1} and ARRAY_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1={0:1} and ARRAY_2=[1]"},{"ancestorTitles":["js-aofs","Rohith-216","array_equals"],"duration":39,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Rohith-216","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Rohith-216","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Rohith-216","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Rohith-216","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Rohith-216","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Rohith-216","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Rohith-216","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Rohith-216","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","Rohith-216","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","Rohith-216","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["js-aofs","Rohith-216","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","Rohith-216","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","Rohith-216","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["js-aofs","Rohith-216","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["js-aofs","Rohith-216","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["js-aofs","Rohith-216","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["js-aofs","Rohith-216","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["js-aofs","Rohith-216","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 object_equals should log false when OBJECT_1=undefined and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=undefined and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Rohith-216","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 object_equals should log false when OBJECT_1={} and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={} and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","Rohith-216","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 object_equals should log true when OBJECT_1=undefined and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=undefined and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","Rohith-216","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 object_equals should log false when OBJECT_1=[1] and OBJECT_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=[1] and OBJECT_2={0:1}"},{"ancestorTitles":["js-aofs","Rohith-216","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 object_equals should log false when OBJECT_1={0:1} and OBJECT_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={0:1} and OBJECT_2=[1]"},{"ancestorTitles":["js-aofs","Rohith-216","object_equals"],"duration":40,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Rohith-216 object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","SACHITH31","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["js-aofs","SACHITH31","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["js-aofs","SACHITH31","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["js-aofs","SACHITH31","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["js-aofs","SACHITH31","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["js-aofs","SACHITH31","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["js-aofs","SACHITH31","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["js-aofs","SACHITH31","even_odd"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["js-aofs","SACHITH31","even_odd"],"duration":24,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","SACHITH31","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["js-aofs","SACHITH31","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["js-aofs","SACHITH31","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["js-aofs","SACHITH31","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["js-aofs","SACHITH31","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["js-aofs","SACHITH31","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["js-aofs","SACHITH31","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["js-aofs","SACHITH31","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["js-aofs","SACHITH31","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["js-aofs","SACHITH31","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["js-aofs","SACHITH31","categorise"],"duration":37,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","SACHITH31","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["js-aofs","SACHITH31","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["js-aofs","SACHITH31","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["js-aofs","SACHITH31","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["js-aofs","SACHITH31","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["js-aofs","SACHITH31","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["js-aofs","SACHITH31","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["js-aofs","SACHITH31","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["js-aofs","SACHITH31","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["js-aofs","SACHITH31","entries"],"duration":26,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","SACHITH31","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["js-aofs","SACHITH31","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["js-aofs","SACHITH31","remove_adjacent_spaces"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[" "],"expected":[""],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   \"\",\n+   \" \",\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   \"\",\n+   \" \",\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs SACHITH31 remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["js-aofs","SACHITH31","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["js-aofs","SACHITH31","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["js-aofs","SACHITH31","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["js-aofs","SACHITH31","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["js-aofs","SACHITH31","remove_adjacent_spaces"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[" Leading spaces!!!"],"expected":["Leading spaces!!!"],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   \"Leading spaces!!!\",\n+   \" Leading spaces!!!\",\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   \"Leading spaces!!!\",\n+   \" Leading spaces!!!\",\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs SACHITH31 remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["js-aofs","SACHITH31","remove_adjacent_spaces"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[" Leading spaces!!! & Trailing Spaces!!! "],"expected":["Leading spaces!!! & Trailing Spaces!!!"],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   \"Leading spaces!!! & Trailing Spaces!!!\",\n+   \" Leading spaces!!! & Trailing Spaces!!! \",\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   \"Leading spaces!!! & Trailing Spaces!!!\",\n+   \" Leading spaces!!! & Trailing Spaces!!! \",\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs SACHITH31 remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["js-aofs","SACHITH31","remove_adjacent_spaces"],"duration":1,"failureDetails":[{"matcherResult":{"actual":["Trailing Spaces!!! "],"expected":["Trailing Spaces!!!"],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   \"Trailing Spaces!!!\",\n+   \"Trailing Spaces!!! \",\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   \"Trailing Spaces!!!\",\n+   \"Trailing Spaces!!! \",\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs SACHITH31 remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["js-aofs","SACHITH31","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["js-aofs","SACHITH31","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["js-aofs","SACHITH31","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["js-aofs","SACHITH31","remove_adjacent_spaces"],"duration":2,"failureDetails":[{"matcherResult":{"actual":[" こんにちは 世界 "],"expected":["こんにちは 世界"],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   \"こんにちは 世界\",\n+   \" こんにちは 世界 \",\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   \"こんにちは 世界\",\n+   \" こんにちは 世界 \",\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs SACHITH31 remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["js-aofs","SACHITH31","remove_adjacent_spaces"],"duration":23,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","SACHITH31","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["js-aofs","SACHITH31","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["js-aofs","SACHITH31","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["js-aofs","SACHITH31","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["js-aofs","SACHITH31","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["js-aofs","SACHITH31","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["js-aofs","SACHITH31","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["js-aofs","SACHITH31","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["js-aofs","SACHITH31","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["js-aofs","SACHITH31","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["js-aofs","SACHITH31","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["js-aofs","SACHITH31","tribonacci"],"duration":32,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","SACHITH31","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","SACHITH31","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["js-aofs","SACHITH31","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["js-aofs","SACHITH31","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["js-aofs","SACHITH31","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","SACHITH31","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","SACHITH31","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","SACHITH31","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["js-aofs","SACHITH31","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","SACHITH31","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["js-aofs","SACHITH31","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","SACHITH31","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","SACHITH31","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","SACHITH31","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","SACHITH31","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","SACHITH31","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["js-aofs","SACHITH31","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["js-aofs","SACHITH31","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","SACHITH31","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["js-aofs","SACHITH31","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["js-aofs","SACHITH31","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["js-aofs","SACHITH31","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["js-aofs","SACHITH31","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 array_equals should log false when ARRAY_1=undefined and ARRAY_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=null"},{"ancestorTitles":["js-aofs","SACHITH31","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 array_equals should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","SACHITH31","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 array_equals should log false when ARRAY_1=[1] and ARRAY_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=[1] and ARRAY_2={0:1}"},{"ancestorTitles":["js-aofs","SACHITH31","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 array_equals should log false when ARRAY_1={0:1} and ARRAY_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1={0:1} and ARRAY_2=[1]"},{"ancestorTitles":["js-aofs","SACHITH31","array_equals"],"duration":34,"failureDetails":[{"matcherResult":{"actual":["'myArrayFunction' was used before it was defined. File: js-aofs-SACHITH31/array_equals.js Line: 34","This line has a length of 132. Maximum allowed is 80. File: js-aofs-SACHITH31/array_equals.js Line: 47"],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"'myArrayFunction' was used before it was defined. File: js-aofs-SACHITH31/array_equals.js Line: 34\",\n+   \"This line has a length of 132. Maximum allowed is 80. File: js-aofs-SACHITH31/array_equals.js Line: 47\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"'myArrayFunction' was used before it was defined. File: js-aofs-SACHITH31/array_equals.js Line: 34\",\n+   \"This line has a length of 132. Maximum allowed is 80. File: js-aofs-SACHITH31/array_equals.js Line: 47\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:79:30)"],"fullName":"js-aofs SACHITH31 array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","SACHITH31","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","SACHITH31","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","SACHITH31","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","SACHITH31","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","SACHITH31","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","SACHITH31","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","SACHITH31","object_equals"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","SACHITH31","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","SACHITH31","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","SACHITH31","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["js-aofs","SACHITH31","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","SACHITH31","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","SACHITH31","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["js-aofs","SACHITH31","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["js-aofs","SACHITH31","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["js-aofs","SACHITH31","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["js-aofs","SACHITH31","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["js-aofs","SACHITH31","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 object_equals should log false when OBJECT_1=undefined and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=undefined and OBJECT_2={}"},{"ancestorTitles":["js-aofs","SACHITH31","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 object_equals should log false when OBJECT_1={} and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={} and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","SACHITH31","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 object_equals should log true when OBJECT_1=undefined and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=undefined and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","SACHITH31","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 object_equals should log false when OBJECT_1=[1] and OBJECT_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=[1] and OBJECT_2={0:1}"},{"ancestorTitles":["js-aofs","SACHITH31","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SACHITH31 object_equals should log false when OBJECT_1={0:1} and OBJECT_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={0:1} and OBJECT_2=[1]"},{"ancestorTitles":["js-aofs","SACHITH31","object_equals"],"duration":44,"failureDetails":[{"matcherResult":{"actual":["This line has a length of 91. Maximum allowed is 80. File: js-aofs-SACHITH31/object_equals.js Line: 32","This line has a length of 91. Maximum allowed is 80. File: js-aofs-SACHITH31/object_equals.js Line: 35","'anotherFunction' was used before it was defined. File: js-aofs-SACHITH31/object_equals.js Line: 44"],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"This line has a length of 91. Maximum allowed is 80. File: js-aofs-SACHITH31/object_equals.js Line: 32\",\n+   \"This line has a length of 91. Maximum allowed is 80. File: js-aofs-SACHITH31/object_equals.js Line: 35\",\n+   \"'anotherFunction' was used before it was defined. File: js-aofs-SACHITH31/object_equals.js Line: 44\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 5\n\n- Array []\n+ Array [\n+   \"This line has a length of 91. Maximum allowed is 80. File: js-aofs-SACHITH31/object_equals.js Line: 32\",\n+   \"This line has a length of 91. Maximum allowed is 80. File: js-aofs-SACHITH31/object_equals.js Line: 35\",\n+   \"'anotherFunction' was used before it was defined. File: js-aofs-SACHITH31/object_equals.js Line: 44\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:79:30)"],"fullName":"js-aofs SACHITH31 object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","even_odd"],"duration":23,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","categorise"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","categorise"],"duration":39,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","entries"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","entries"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","entries"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","remove_adjacent_spaces"],"duration":45,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","tribonacci"],"duration":21,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud array_equals should log false when ARRAY_1=undefined and ARRAY_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=null"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud array_equals should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud array_equals should log false when ARRAY_1=[1] and ARRAY_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=[1] and ARRAY_2={0:1}"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","array_equals"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud array_equals should log false when ARRAY_1={0:1} and ARRAY_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1={0:1} and ARRAY_2=[1]"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","array_equals"],"duration":37,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud object_equals should log false when OBJECT_1=undefined and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=undefined and OBJECT_2={}"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud object_equals should log false when OBJECT_1={} and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={} and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud object_equals should log true when OBJECT_1=undefined and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=undefined and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud object_equals should log false when OBJECT_1=[1] and OBJECT_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=[1] and OBJECT_2={0:1}"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud object_equals should log false when OBJECT_1={0:1} and OBJECT_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={0:1} and OBJECT_2=[1]"},{"ancestorTitles":["js-aofs","SaiLokeshGoud","object_equals"],"duration":41,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SaiLokeshGoud object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Saicharanteja-844","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["js-aofs","Saicharanteja-844","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["js-aofs","Saicharanteja-844","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["js-aofs","Saicharanteja-844","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["js-aofs","Saicharanteja-844","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["js-aofs","Saicharanteja-844","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["js-aofs","Saicharanteja-844","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["js-aofs","Saicharanteja-844","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["js-aofs","Saicharanteja-844","even_odd"],"duration":30,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Saicharanteja-844","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["js-aofs","Saicharanteja-844","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["js-aofs","Saicharanteja-844","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["js-aofs","Saicharanteja-844","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["js-aofs","Saicharanteja-844","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["js-aofs","Saicharanteja-844","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["js-aofs","Saicharanteja-844","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["js-aofs","Saicharanteja-844","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["js-aofs","Saicharanteja-844","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["js-aofs","Saicharanteja-844","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["js-aofs","Saicharanteja-844","categorise"],"duration":45,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Saicharanteja-844","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["js-aofs","Saicharanteja-844","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["js-aofs","Saicharanteja-844","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["js-aofs","Saicharanteja-844","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["js-aofs","Saicharanteja-844","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["js-aofs","Saicharanteja-844","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["js-aofs","Saicharanteja-844","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["js-aofs","Saicharanteja-844","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["js-aofs","Saicharanteja-844","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["js-aofs","Saicharanteja-844","entries"],"duration":26,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Saicharanteja-844","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["js-aofs","Saicharanteja-844","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["js-aofs","Saicharanteja-844","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["js-aofs","Saicharanteja-844","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["js-aofs","Saicharanteja-844","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["js-aofs","Saicharanteja-844","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["js-aofs","Saicharanteja-844","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["js-aofs","Saicharanteja-844","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["js-aofs","Saicharanteja-844","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["js-aofs","Saicharanteja-844","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["js-aofs","Saicharanteja-844","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["js-aofs","Saicharanteja-844","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["js-aofs","Saicharanteja-844","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["js-aofs","Saicharanteja-844","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["js-aofs","Saicharanteja-844","remove_adjacent_spaces"],"duration":70,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Saicharanteja-844","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["js-aofs","Saicharanteja-844","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["js-aofs","Saicharanteja-844","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["js-aofs","Saicharanteja-844","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["js-aofs","Saicharanteja-844","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["js-aofs","Saicharanteja-844","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["js-aofs","Saicharanteja-844","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["js-aofs","Saicharanteja-844","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["js-aofs","Saicharanteja-844","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["js-aofs","Saicharanteja-844","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["js-aofs","Saicharanteja-844","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["js-aofs","Saicharanteja-844","tribonacci"],"duration":27,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Saicharanteja-844","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Saicharanteja-844","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["js-aofs","Saicharanteja-844","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["js-aofs","Saicharanteja-844","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["js-aofs","Saicharanteja-844","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","Saicharanteja-844","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","Saicharanteja-844","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Saicharanteja-844","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["js-aofs","Saicharanteja-844","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","Saicharanteja-844","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["js-aofs","Saicharanteja-844","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","Saicharanteja-844","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","Saicharanteja-844","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","Saicharanteja-844","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","Saicharanteja-844","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","Saicharanteja-844","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["js-aofs","Saicharanteja-844","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["js-aofs","Saicharanteja-844","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Saicharanteja-844","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["js-aofs","Saicharanteja-844","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["js-aofs","Saicharanteja-844","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["js-aofs","Saicharanteja-844","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["js-aofs","Saicharanteja-844","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 array_equals should log false when ARRAY_1=undefined and ARRAY_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=null"},{"ancestorTitles":["js-aofs","Saicharanteja-844","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 array_equals should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Saicharanteja-844","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 array_equals should log false when ARRAY_1=[1] and ARRAY_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=[1] and ARRAY_2={0:1}"},{"ancestorTitles":["js-aofs","Saicharanteja-844","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 array_equals should log false when ARRAY_1={0:1} and ARRAY_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1={0:1} and ARRAY_2=[1]"},{"ancestorTitles":["js-aofs","Saicharanteja-844","array_equals"],"duration":36,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Saicharanteja-844","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Saicharanteja-844","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Saicharanteja-844","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Saicharanteja-844","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Saicharanteja-844","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Saicharanteja-844","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Saicharanteja-844","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Saicharanteja-844","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","Saicharanteja-844","object_equals"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","Saicharanteja-844","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["js-aofs","Saicharanteja-844","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","Saicharanteja-844","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","Saicharanteja-844","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["js-aofs","Saicharanteja-844","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["js-aofs","Saicharanteja-844","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["js-aofs","Saicharanteja-844","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["js-aofs","Saicharanteja-844","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["js-aofs","Saicharanteja-844","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 object_equals should log false when OBJECT_1=undefined and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=undefined and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Saicharanteja-844","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 object_equals should log false when OBJECT_1={} and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={} and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","Saicharanteja-844","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 object_equals should log true when OBJECT_1=undefined and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=undefined and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","Saicharanteja-844","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 object_equals should log false when OBJECT_1=[1] and OBJECT_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=[1] and OBJECT_2={0:1}"},{"ancestorTitles":["js-aofs","Saicharanteja-844","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 object_equals should log false when OBJECT_1={0:1} and OBJECT_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={0:1} and OBJECT_2=[1]"},{"ancestorTitles":["js-aofs","Saicharanteja-844","object_equals"],"duration":74,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Saicharanteja-844 object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","even_odd"],"duration":25,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","categorise"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","categorise"],"duration":28,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","entries"],"duration":22,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","remove_adjacent_spaces"],"duration":34,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","tribonacci"],"duration":25,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 array_equals should log false when ARRAY_1=undefined and ARRAY_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=null"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 array_equals should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 array_equals should log false when ARRAY_1=[1] and ARRAY_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=[1] and ARRAY_2={0:1}"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 array_equals should log false when ARRAY_1={0:1} and ARRAY_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1={0:1} and ARRAY_2=[1]"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","array_equals"],"duration":47,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 object_equals should log false when OBJECT_1=undefined and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=undefined and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 object_equals should log false when OBJECT_1={} and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={} and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 object_equals should log true when OBJECT_1=undefined and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=undefined and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 object_equals should log false when OBJECT_1=[1] and OBJECT_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=[1] and OBJECT_2={0:1}"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 object_equals should log false when OBJECT_1={0:1} and OBJECT_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={0:1} and OBJECT_2=[1]"},{"ancestorTitles":["js-aofs","Shek-Nowshik66","object_equals"],"duration":52,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Shek-Nowshik66 object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Siddhu83","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["js-aofs","Siddhu83","even_odd"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["js-aofs","Siddhu83","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["js-aofs","Siddhu83","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["js-aofs","Siddhu83","even_odd"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["js-aofs","Siddhu83","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["js-aofs","Siddhu83","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["js-aofs","Siddhu83","even_odd"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["js-aofs","Siddhu83","even_odd"],"duration":24,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Siddhu83","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["js-aofs","Siddhu83","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["js-aofs","Siddhu83","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["js-aofs","Siddhu83","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["js-aofs","Siddhu83","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["js-aofs","Siddhu83","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["js-aofs","Siddhu83","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["js-aofs","Siddhu83","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["js-aofs","Siddhu83","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["js-aofs","Siddhu83","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["js-aofs","Siddhu83","categorise"],"duration":28,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Siddhu83","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["js-aofs","Siddhu83","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["js-aofs","Siddhu83","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["js-aofs","Siddhu83","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["js-aofs","Siddhu83","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["js-aofs","Siddhu83","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["js-aofs","Siddhu83","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["js-aofs","Siddhu83","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["js-aofs","Siddhu83","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["js-aofs","Siddhu83","entries"],"duration":26,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Siddhu83","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["js-aofs","Siddhu83","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["js-aofs","Siddhu83","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["js-aofs","Siddhu83","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["js-aofs","Siddhu83","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["js-aofs","Siddhu83","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["js-aofs","Siddhu83","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["js-aofs","Siddhu83","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["js-aofs","Siddhu83","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["js-aofs","Siddhu83","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["js-aofs","Siddhu83","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["js-aofs","Siddhu83","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["js-aofs","Siddhu83","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["js-aofs","Siddhu83","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["js-aofs","Siddhu83","remove_adjacent_spaces"],"duration":33,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Siddhu83","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["js-aofs","Siddhu83","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["js-aofs","Siddhu83","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["js-aofs","Siddhu83","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["js-aofs","Siddhu83","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["js-aofs","Siddhu83","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["js-aofs","Siddhu83","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["js-aofs","Siddhu83","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["js-aofs","Siddhu83","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["js-aofs","Siddhu83","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["js-aofs","Siddhu83","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["js-aofs","Siddhu83","tribonacci"],"duration":25,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Siddhu83","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Siddhu83","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["js-aofs","Siddhu83","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["js-aofs","Siddhu83","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["js-aofs","Siddhu83","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","Siddhu83","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","Siddhu83","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Siddhu83","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["js-aofs","Siddhu83","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","Siddhu83","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["js-aofs","Siddhu83","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","Siddhu83","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","Siddhu83","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","Siddhu83","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","Siddhu83","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","Siddhu83","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["js-aofs","Siddhu83","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["js-aofs","Siddhu83","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Siddhu83","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["js-aofs","Siddhu83","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["js-aofs","Siddhu83","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["js-aofs","Siddhu83","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["js-aofs","Siddhu83","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 array_equals should log false when ARRAY_1=undefined and ARRAY_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=null"},{"ancestorTitles":["js-aofs","Siddhu83","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 array_equals should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Siddhu83","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 array_equals should log false when ARRAY_1=[1] and ARRAY_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=[1] and ARRAY_2={0:1}"},{"ancestorTitles":["js-aofs","Siddhu83","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 array_equals should log false when ARRAY_1={0:1} and ARRAY_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1={0:1} and ARRAY_2=[1]"},{"ancestorTitles":["js-aofs","Siddhu83","array_equals"],"duration":38,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Siddhu83","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Siddhu83","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Siddhu83","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Siddhu83","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Siddhu83","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Siddhu83","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Siddhu83","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Siddhu83","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","Siddhu83","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","Siddhu83","object_equals"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["js-aofs","Siddhu83","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","Siddhu83","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","Siddhu83","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["js-aofs","Siddhu83","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["js-aofs","Siddhu83","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["js-aofs","Siddhu83","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["js-aofs","Siddhu83","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["js-aofs","Siddhu83","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 object_equals should log false when OBJECT_1=undefined and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=undefined and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Siddhu83","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 object_equals should log false when OBJECT_1={} and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={} and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","Siddhu83","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 object_equals should log true when OBJECT_1=undefined and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=undefined and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","Siddhu83","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 object_equals should log false when OBJECT_1=[1] and OBJECT_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=[1] and OBJECT_2={0:1}"},{"ancestorTitles":["js-aofs","Siddhu83","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 object_equals should log false when OBJECT_1={0:1} and OBJECT_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={0:1} and OBJECT_2=[1]"},{"ancestorTitles":["js-aofs","Siddhu83","object_equals"],"duration":43,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Siddhu83 object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","SkAkramali","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["js-aofs","SkAkramali","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["js-aofs","SkAkramali","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["js-aofs","SkAkramali","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["js-aofs","SkAkramali","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["js-aofs","SkAkramali","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["js-aofs","SkAkramali","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["js-aofs","SkAkramali","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["js-aofs","SkAkramali","even_odd"],"duration":28,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","SkAkramali","categorise"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["js-aofs","SkAkramali","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["js-aofs","SkAkramali","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["js-aofs","SkAkramali","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["js-aofs","SkAkramali","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["js-aofs","SkAkramali","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["js-aofs","SkAkramali","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["js-aofs","SkAkramali","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["js-aofs","SkAkramali","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["js-aofs","SkAkramali","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["js-aofs","SkAkramali","categorise"],"duration":55,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","SkAkramali","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["js-aofs","SkAkramali","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["js-aofs","SkAkramali","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["js-aofs","SkAkramali","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["js-aofs","SkAkramali","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["js-aofs","SkAkramali","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["js-aofs","SkAkramali","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["js-aofs","SkAkramali","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["js-aofs","SkAkramali","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["js-aofs","SkAkramali","entries"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","SkAkramali","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["js-aofs","SkAkramali","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["js-aofs","SkAkramali","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["js-aofs","SkAkramali","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["js-aofs","SkAkramali","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["js-aofs","SkAkramali","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["js-aofs","SkAkramali","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["js-aofs","SkAkramali","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["js-aofs","SkAkramali","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["js-aofs","SkAkramali","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["js-aofs","SkAkramali","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["js-aofs","SkAkramali","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["js-aofs","SkAkramali","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["js-aofs","SkAkramali","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["js-aofs","SkAkramali","remove_adjacent_spaces"],"duration":35,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","SkAkramali","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["js-aofs","SkAkramali","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["js-aofs","SkAkramali","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["js-aofs","SkAkramali","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["js-aofs","SkAkramali","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["js-aofs","SkAkramali","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["js-aofs","SkAkramali","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["js-aofs","SkAkramali","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["js-aofs","SkAkramali","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["js-aofs","SkAkramali","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["js-aofs","SkAkramali","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["js-aofs","SkAkramali","tribonacci"],"duration":26,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","SkAkramali","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","SkAkramali","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["js-aofs","SkAkramali","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["js-aofs","SkAkramali","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["js-aofs","SkAkramali","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","SkAkramali","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","SkAkramali","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","SkAkramali","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["js-aofs","SkAkramali","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","SkAkramali","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["js-aofs","SkAkramali","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","SkAkramali","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","SkAkramali","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","SkAkramali","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","SkAkramali","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","SkAkramali","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["js-aofs","SkAkramali","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["js-aofs","SkAkramali","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","SkAkramali","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["js-aofs","SkAkramali","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["js-aofs","SkAkramali","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["js-aofs","SkAkramali","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["js-aofs","SkAkramali","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali array_equals should log false when ARRAY_1=undefined and ARRAY_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=null"},{"ancestorTitles":["js-aofs","SkAkramali","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali array_equals should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","SkAkramali","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali array_equals should log false when ARRAY_1=[1] and ARRAY_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=[1] and ARRAY_2={0:1}"},{"ancestorTitles":["js-aofs","SkAkramali","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali array_equals should log false when ARRAY_1={0:1} and ARRAY_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1={0:1} and ARRAY_2=[1]"},{"ancestorTitles":["js-aofs","SkAkramali","array_equals"],"duration":50,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","SkAkramali","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","SkAkramali","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","SkAkramali","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","SkAkramali","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","SkAkramali","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","SkAkramali","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","SkAkramali","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","SkAkramali","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","SkAkramali","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","SkAkramali","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["js-aofs","SkAkramali","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","SkAkramali","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","SkAkramali","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["js-aofs","SkAkramali","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["js-aofs","SkAkramali","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["js-aofs","SkAkramali","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["js-aofs","SkAkramali","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["js-aofs","SkAkramali","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali object_equals should log false when OBJECT_1=undefined and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=undefined and OBJECT_2={}"},{"ancestorTitles":["js-aofs","SkAkramali","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali object_equals should log false when OBJECT_1={} and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={} and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","SkAkramali","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali object_equals should log true when OBJECT_1=undefined and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=undefined and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","SkAkramali","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali object_equals should log false when OBJECT_1=[1] and OBJECT_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=[1] and OBJECT_2={0:1}"},{"ancestorTitles":["js-aofs","SkAkramali","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali object_equals should log false when OBJECT_1={0:1} and OBJECT_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={0:1} and OBJECT_2=[1]"},{"ancestorTitles":["js-aofs","SkAkramali","object_equals"],"duration":59,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs SkAkramali object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Sravani175","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sravani175 even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["js-aofs","Sravani175","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sravani175 even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["js-aofs","Sravani175","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sravani175 even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["js-aofs","Sravani175","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sravani175 even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["js-aofs","Sravani175","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sravani175 even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["js-aofs","Sravani175","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sravani175 even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["js-aofs","Sravani175","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sravani175 even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["js-aofs","Sravani175","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sravani175 even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["js-aofs","Sravani175","even_odd"],"duration":28,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression. File: js-aofs-Sravani175/even_odd.js Line: 18","Missing space before opening brace. File: js-aofs-Sravani175/even_odd.js Line: 18","Expected indentation of 2 spaces but found 1. File: js-aofs-Sravani175/even_odd.js Line: 19","A space is required before '}'. File: js-aofs-Sravani175/even_odd.js Line: 19","Expected indentation of 2 spaces but found 4. File: js-aofs-Sravani175/even_odd.js Line: 20","There should be no space after this paren. File: js-aofs-Sravani175/even_odd.js Line: 20","'mine' is never reassigned. Use 'const' instead. File: js-aofs-Sravani175/even_odd.js Line: 20","Missing space before opening brace. File: js-aofs-Sravani175/even_odd.js Line: 20","Expected indentation of 4 spaces but found 6. File: js-aofs-Sravani175/even_odd.js Line: 21","There should be no space before this paren. File: js-aofs-Sravani175/even_odd.js Line: 21","Missing space before opening brace. File: js-aofs-Sravani175/even_odd.js Line: 21","Expected indentation of 6 spaces but found 4. File: js-aofs-Sravani175/even_odd.js Line: 22","Closing curly brace does not appear on the same line as the subsequent block. File: js-aofs-Sravani175/even_odd.js Line: 23","Expected indentation of 4 spaces but found 0. File: js-aofs-Sravani175/even_odd.js Line: 23","Expected indentation of 4 spaces but found 5. File: js-aofs-Sravani175/even_odd.js Line: 24","Expected indentation of 6 spaces but found 9. File: js-aofs-Sravani175/even_odd.js Line: 25","Expected indentation of 4 spaces but found 6. File: js-aofs-Sravani175/even_odd.js Line: 26","Expected indentation of 2 spaces but found 4. File: js-aofs-Sravani175/even_odd.js Line: 27","Expected indentation of 2 spaces but found 6. File: js-aofs-Sravani175/even_odd.js Line: 28","Expected indentation of 0 spaces but found 2. File: js-aofs-Sravani175/even_odd.js Line: 29","Expected indentation of 0 spaces but found 4. File: js-aofs-Sravani175/even_odd.js Line: 30","Trailing spaces not allowed. File: js-aofs-Sravani175/even_odd.js Line: 31","Too many blank lines at the end of file. Max of 0 allowed. File: js-aofs-Sravani175/even_odd.js Line: 31","Newline required at end of file but not found. File: js-aofs-Sravani175/even_odd.js Line: 31"],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 26\n\n- Array []\n+ Array [\n+   \"Expected a function expression. File: js-aofs-Sravani175/even_odd.js Line: 18\",\n+   \"Missing space before opening brace. File: js-aofs-Sravani175/even_odd.js Line: 18\",\n+   \"Expected indentation of 2 spaces but found 1. File: js-aofs-Sravani175/even_odd.js Line: 19\",\n+   \"A space is required before '}'. File: js-aofs-Sravani175/even_odd.js Line: 19\",\n+   \"Expected indentation of 2 spaces but found 4. File: js-aofs-Sravani175/even_odd.js Line: 20\",\n+   \"There should be no space after this paren. File: js-aofs-Sravani175/even_odd.js Line: 20\",\n+   \"'mine' is never reassigned. Use 'const' instead. File: js-aofs-Sravani175/even_odd.js Line: 20\",\n+   \"Missing space before opening brace. File: js-aofs-Sravani175/even_odd.js Line: 20\",\n+   \"Expected indentation of 4 spaces but found 6. File: js-aofs-Sravani175/even_odd.js Line: 21\",\n+   \"There should be no space before this paren. File: js-aofs-Sravani175/even_odd.js Line: 21\",\n+   \"Missing space before opening brace. File: js-aofs-Sravani175/even_odd.js Line: 21\",\n+   \"Expected indentation of 6 spaces but found 4. File: js-aofs-Sravani175/even_odd.js Line: 22\",\n+   \"Closing curly brace does not appear on the same line as the subsequent block. File: js-aofs-Sravani175/even_odd.js Line: 23\",\n+   \"Expected indentation of 4 spaces but found 0. File: js-aofs-Sravani175/even_odd.js Line: 23\",\n+   \"Expected indentation of 4 spaces but found 5. File: js-aofs-Sravani175/even_odd.js Line: 24\",\n+   \"Expected indentation of 6 spaces but found 9. File: js-aofs-Sravani175/even_odd.js Line: 25\",\n+   \"Expected indentation of 4 spaces but found 6. File: js-aofs-Sravani175/even_odd.js Line: 26\",\n+   \"Expected indentation of 2 spaces but found 4. File: js-aofs-Sravani175/even_odd.js Line: 27\",\n+   \"Expected indentation of 2 spaces but found 6. File: js-aofs-Sravani175/even_odd.js Line: 28\",\n+   \"Expected indentation of 0 spaces but found 2. File: js-aofs-Sravani175/even_odd.js Line: 29\",\n+   \"Expected indentation of 0 spaces but found 4. File: js-aofs-Sravani175/even_odd.js Line: 30\",\n+   \"Trailing spaces not allowed. File: js-aofs-Sravani175/even_odd.js Line: 31\",\n+   \"Too many blank lines at the end of file. Max of 0 allowed. File: js-aofs-Sravani175/even_odd.js Line: 31\",\n+   \"Newline required at end of file but not found. File: js-aofs-Sravani175/even_odd.js Line: 31\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 26\n\n- Array []\n+ Array [\n+   \"Expected a function expression. File: js-aofs-Sravani175/even_odd.js Line: 18\",\n+   \"Missing space before opening brace. File: js-aofs-Sravani175/even_odd.js Line: 18\",\n+   \"Expected indentation of 2 spaces but found 1. File: js-aofs-Sravani175/even_odd.js Line: 19\",\n+   \"A space is required before '}'. File: js-aofs-Sravani175/even_odd.js Line: 19\",\n+   \"Expected indentation of 2 spaces but found 4. File: js-aofs-Sravani175/even_odd.js Line: 20\",\n+   \"There should be no space after this paren. File: js-aofs-Sravani175/even_odd.js Line: 20\",\n+   \"'mine' is never reassigned. Use 'const' instead. File: js-aofs-Sravani175/even_odd.js Line: 20\",\n+   \"Missing space before opening brace. File: js-aofs-Sravani175/even_odd.js Line: 20\",\n+   \"Expected indentation of 4 spaces but found 6. File: js-aofs-Sravani175/even_odd.js Line: 21\",\n+   \"There should be no space before this paren. File: js-aofs-Sravani175/even_odd.js Line: 21\",\n+   \"Missing space before opening brace. File: js-aofs-Sravani175/even_odd.js Line: 21\",\n+   \"Expected indentation of 6 spaces but found 4. File: js-aofs-Sravani175/even_odd.js Line: 22\",\n+   \"Closing curly brace does not appear on the same line as the subsequent block. File: js-aofs-Sravani175/even_odd.js Line: 23\",\n+   \"Expected indentation of 4 spaces but found 0. File: js-aofs-Sravani175/even_odd.js Line: 23\",\n+   \"Expected indentation of 4 spaces but found 5. File: js-aofs-Sravani175/even_odd.js Line: 24\",\n+   \"Expected indentation of 6 spaces but found 9. File: js-aofs-Sravani175/even_odd.js Line: 25\",\n+   \"Expected indentation of 4 spaces but found 6. File: js-aofs-Sravani175/even_odd.js Line: 26\",\n+   \"Expected indentation of 2 spaces but found 4. File: js-aofs-Sravani175/even_odd.js Line: 27\",\n+   \"Expected indentation of 2 spaces but found 6. File: js-aofs-Sravani175/even_odd.js Line: 28\",\n+   \"Expected indentation of 0 spaces but found 2. File: js-aofs-Sravani175/even_odd.js Line: 29\",\n+   \"Expected indentation of 0 spaces but found 4. File: js-aofs-Sravani175/even_odd.js Line: 30\",\n+   \"Trailing spaces not allowed. File: js-aofs-Sravani175/even_odd.js Line: 31\",\n+   \"Too many blank lines at the end of file. Max of 0 allowed. File: js-aofs-Sravani175/even_odd.js Line: 31\",\n+   \"Newline required at end of file but not found. File: js-aofs-Sravani175/even_odd.js Line: 31\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:79:30)"],"fullName":"js-aofs Sravani175 even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Sravani175","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sravani175 categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["js-aofs","Sravani175","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sravani175 categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["js-aofs","Sravani175","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sravani175 categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["js-aofs","Sravani175","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sravani175 categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["js-aofs","Sravani175","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sravani175 categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["js-aofs","Sravani175","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sravani175 categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["js-aofs","Sravani175","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sravani175 categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["js-aofs","Sravani175","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sravani175 categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["js-aofs","Sravani175","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sravani175 categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["js-aofs","Sravani175","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sravani175 categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["js-aofs","Sravani175","categorise"],"duration":35,"failureDetails":[{"matcherResult":{"actual":["Expected a function expression. File: js-aofs-Sravani175/categorise.js Line: 26","Function 'groupNumbers' has too many lines (16). Maximum allowed is 15. File: js-aofs-Sravani175/categorise.js Line: 26","Missing space before opening brace. File: js-aofs-Sravani175/categorise.js Line: 26","Expected indentation of 2 spaces but found 4. File: js-aofs-Sravani175/categorise.js Line: 28","'num' is never reassigned. Use 'const' instead. File: js-aofs-Sravani175/categorise.js Line: 28","Expected indentation of 4 spaces but found 6. File: js-aofs-Sravani175/categorise.js Line: 29","Unexpected whitespace before property num. File: js-aofs-Sravani175/categorise.js Line: 29","There should be no space before this paren. File: js-aofs-Sravani175/categorise.js Line: 29","Expected indentation of 6 spaces but found 2. File: js-aofs-Sravani175/categorise.js Line: 30","Unexpected whitespace before property num. File: js-aofs-Sravani175/categorise.js Line: 30","Expected indentation of 4 spaces but found 0. File: js-aofs-Sravani175/categorise.js Line: 31","Expected indentation of 4 spaces but found 3. File: js-aofs-Sravani175/categorise.js Line: 32","Unexpected whitespace before property num. File: js-aofs-Sravani175/categorise.js Line: 32","Expected indentation of 2 spaces but found 4. File: js-aofs-Sravani175/categorise.js Line: 33","Expected indentation of 2 spaces but found 0. File: js-aofs-Sravani175/categorise.js Line: 34","'arrays' is never reassigned. Use 'const' instead. File: js-aofs-Sravani175/categorise.js Line: 34","'keys' is never reassigned. Use 'const' instead. File: js-aofs-Sravani175/categorise.js Line: 35","Operator '=' must be spaced. File: js-aofs-Sravani175/categorise.js Line: 35","A space is required after ','. File: js-aofs-Sravani175/categorise.js Line: 35","Missing space before =>. File: js-aofs-Sravani175/categorise.js Line: 35","Missing space after =>. File: js-aofs-Sravani175/categorise.js Line: 35","Operator '-' must be spaced. File: js-aofs-Sravani175/categorise.js Line: 35","Expected indentation of 2 spaces but found 3. File: js-aofs-Sravani175/categorise.js Line: 36","Expected space(s) after \"for\". File: js-aofs-Sravani175/categorise.js Line: 36","'k' is never reassigned. Use 'const' instead. File: js-aofs-Sravani175/categorise.js Line: 36","Opening curly brace does not appear on the same line as controlling statement. File: js-aofs-Sravani175/categorise.js Line: 37","Expected indentation of 2 spaces but found 0. File: js-aofs-Sravani175/categorise.js Line: 37","Expected indentation of 2 spaces but found 0. File: js-aofs-Sravani175/categorise.js Line: 39","Expected indentation of 2 spaces but found 3. File: js-aofs-Sravani175/categorise.js Line: 40","Newline required at end of file but not found. File: js-aofs-Sravani175/categorise.js Line: 42"],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 32\n\n- Array []\n+ Array [\n+   \"Expected a function expression. File: js-aofs-Sravani175/categorise.js Line: 26\",\n+   \"Function 'groupNumbers' has too many lines (16). Maximum allowed is 15. File: js-aofs-Sravani175/categorise.js Line: 26\",\n+   \"Missing space before opening brace. File: js-aofs-Sravani175/categorise.js Line: 26\",\n+   \"Expected indentation of 2 spaces but found 4. File: js-aofs-Sravani175/categorise.js Line: 28\",\n+   \"'num' is never reassigned. Use 'const' instead. File: js-aofs-Sravani175/categorise.js Line: 28\",\n+   \"Expected indentation of 4 spaces but found 6. File: js-aofs-Sravani175/categorise.js Line: 29\",\n+   \"Unexpected whitespace before property num. File: js-aofs-Sravani175/categorise.js Line: 29\",\n+   \"There should be no space before this paren. File: js-aofs-Sravani175/categorise.js Line: 29\",\n+   \"Expected indentation of 6 spaces but found 2. File: js-aofs-Sravani175/categorise.js Line: 30\",\n+   \"Unexpected whitespace before property num. File: js-aofs-Sravani175/categorise.js Line: 30\",\n+   \"Expected indentation of 4 spaces but found 0. File: js-aofs-Sravani175/categorise.js Line: 31\",\n+   \"Expected indentation of 4 spaces but found 3. File: js-aofs-Sravani175/categorise.js Line: 32\",\n+   \"Unexpected whitespace before property num. File: js-aofs-Sravani175/categorise.js Line: 32\",\n+   \"Expected indentation of 2 spaces but found 4. File: js-aofs-Sravani175/categorise.js Line: 33\",\n+   \"Expected indentation of 2 spaces but found 0. File: js-aofs-Sravani175/categorise.js Line: 34\",\n+   \"'arrays' is never reassigned. Use 'const' instead. File: js-aofs-Sravani175/categorise.js Line: 34\",\n+   \"'keys' is never reassigned. Use 'const' instead. File: js-aofs-Sravani175/categorise.js Line: 35\",\n+   \"Operator '=' must be spaced. File: js-aofs-Sravani175/categorise.js Line: 35\",\n+   \"A space is required after ','. File: js-aofs-Sravani175/categorise.js Line: 35\",\n+   \"Missing space before =>. File: js-aofs-Sravani175/categorise.js Line: 35\",\n+   \"Missing space after =>. File: js-aofs-Sravani175/categorise.js Line: 35\",\n+   \"Operator '-' must be spaced. File: js-aofs-Sravani175/categorise.js Line: 35\",\n+   \"Expected indentation of 2 spaces but found 3. File: js-aofs-Sravani175/categorise.js Line: 36\",\n+   \"Expected space(s) after \\\"for\\\". File: js-aofs-Sravani175/categorise.js Line: 36\",\n+   \"'k' is never reassigned. Use 'const' instead. File: js-aofs-Sravani175/categorise.js Line: 36\",\n+   \"Opening curly brace does not appear on the same line as controlling statement. File: js-aofs-Sravani175/categorise.js Line: 37\",\n+   \"Expected indentation of 2 spaces but found 0. File: js-aofs-Sravani175/categorise.js Line: 37\",\n+   \"Expected indentation of 2 spaces but found 0. File: js-aofs-Sravani175/categorise.js Line: 39\",\n+   \"Expected indentation of 2 spaces but found 3. File: js-aofs-Sravani175/categorise.js Line: 40\",\n+   \"Newline required at end of file but not found. File: js-aofs-Sravani175/categorise.js Line: 42\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 32\n\n- Array []\n+ Array [\n+   \"Expected a function expression. File: js-aofs-Sravani175/categorise.js Line: 26\",\n+   \"Function 'groupNumbers' has too many lines (16). Maximum allowed is 15. File: js-aofs-Sravani175/categorise.js Line: 26\",\n+   \"Missing space before opening brace. File: js-aofs-Sravani175/categorise.js Line: 26\",\n+   \"Expected indentation of 2 spaces but found 4. File: js-aofs-Sravani175/categorise.js Line: 28\",\n+   \"'num' is never reassigned. Use 'const' instead. File: js-aofs-Sravani175/categorise.js Line: 28\",\n+   \"Expected indentation of 4 spaces but found 6. File: js-aofs-Sravani175/categorise.js Line: 29\",\n+   \"Unexpected whitespace before property num. File: js-aofs-Sravani175/categorise.js Line: 29\",\n+   \"There should be no space before this paren. File: js-aofs-Sravani175/categorise.js Line: 29\",\n+   \"Expected indentation of 6 spaces but found 2. File: js-aofs-Sravani175/categorise.js Line: 30\",\n+   \"Unexpected whitespace before property num. File: js-aofs-Sravani175/categorise.js Line: 30\",\n+   \"Expected indentation of 4 spaces but found 0. File: js-aofs-Sravani175/categorise.js Line: 31\",\n+   \"Expected indentation of 4 spaces but found 3. File: js-aofs-Sravani175/categorise.js Line: 32\",\n+   \"Unexpected whitespace before property num. File: js-aofs-Sravani175/categorise.js Line: 32\",\n+   \"Expected indentation of 2 spaces but found 4. File: js-aofs-Sravani175/categorise.js Line: 33\",\n+   \"Expected indentation of 2 spaces but found 0. File: js-aofs-Sravani175/categorise.js Line: 34\",\n+   \"'arrays' is never reassigned. Use 'const' instead. File: js-aofs-Sravani175/categorise.js Line: 34\",\n+   \"'keys' is never reassigned. Use 'const' instead. File: js-aofs-Sravani175/categorise.js Line: 35\",\n+   \"Operator '=' must be spaced. File: js-aofs-Sravani175/categorise.js Line: 35\",\n+   \"A space is required after ','. File: js-aofs-Sravani175/categorise.js Line: 35\",\n+   \"Missing space before =>. File: js-aofs-Sravani175/categorise.js Line: 35\",\n+   \"Missing space after =>. File: js-aofs-Sravani175/categorise.js Line: 35\",\n+   \"Operator '-' must be spaced. File: js-aofs-Sravani175/categorise.js Line: 35\",\n+   \"Expected indentation of 2 spaces but found 3. File: js-aofs-Sravani175/categorise.js Line: 36\",\n+   \"Expected space(s) after \\\"for\\\". File: js-aofs-Sravani175/categorise.js Line: 36\",\n+   \"'k' is never reassigned. Use 'const' instead. File: js-aofs-Sravani175/categorise.js Line: 36\",\n+   \"Opening curly brace does not appear on the same line as controlling statement. File: js-aofs-Sravani175/categorise.js Line: 37\",\n+   \"Expected indentation of 2 spaces but found 0. File: js-aofs-Sravani175/categorise.js Line: 37\",\n+   \"Expected indentation of 2 spaces but found 0. File: js-aofs-Sravani175/categorise.js Line: 39\",\n+   \"Expected indentation of 2 spaces but found 3. File: js-aofs-Sravani175/categorise.js Line: 40\",\n+   \"Newline required at end of file but not found. File: js-aofs-Sravani175/categorise.js Line: 42\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:79:30)"],"fullName":"js-aofs Sravani175 categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Sravani175","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sravani175 entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["js-aofs","Sravani175","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sravani175 entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["js-aofs","Sravani175","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sravani175 entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["js-aofs","Sravani175","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sravani175 entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["js-aofs","Sravani175","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sravani175 entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["js-aofs","Sravani175","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sravani175 entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["js-aofs","Sravani175","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sravani175 entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["js-aofs","Sravani175","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sravani175 entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["js-aofs","Sravani175","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sravani175 entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["js-aofs","Sravani175","entries"],"duration":31,"failureDetails":[{"matcherResult":{"actual":["A space is required after '{'. File: js-aofs-Sravani175/entries.js Line: 3","A space is required before '}'. File: js-aofs-Sravani175/entries.js Line: 3","Trailing spaces not allowed. File: js-aofs-Sravani175/entries.js Line: 6","Expected indentation of 0 spaces but found 1. File: js-aofs-Sravani175/entries.js Line: 22","Missing space before function parentheses. File: js-aofs-Sravani175/entries.js Line: 22","'OBJECT' is already declared in the upper scope on line 3 column 7. File: js-aofs-Sravani175/entries.js Line: 22","Expected indentation of 2 spaces but found 4. File: js-aofs-Sravani175/entries.js Line: 23","There should be no space after this paren. File: js-aofs-Sravani175/entries.js Line: 24","'mine' is never reassigned. Use 'const' instead. File: js-aofs-Sravani175/entries.js Line: 24","Expected indentation of 4 spaces but found 6. File: js-aofs-Sravani175/entries.js Line: 25","'index' is never reassigned. Use 'const' instead. File: js-aofs-Sravani175/entries.js Line: 25","Expected indentation of 4 spaces but found 8. File: js-aofs-Sravani175/entries.js Line: 26","Expected indentation of 4 spaces but found 5. File: js-aofs-Sravani175/entries.js Line: 27","Expected indentation of 4 spaces but found 3. File: js-aofs-Sravani175/entries.js Line: 28","Expected indentation of 2 spaces but found 4. File: js-aofs-Sravani175/entries.js Line: 30","Missing semicolon. File: js-aofs-Sravani175/entries.js Line: 31","Expected indentation of 0 spaces but found 4. File: js-aofs-Sravani175/entries.js Line: 32","Expected indentation of 0 spaces but found 2. File: js-aofs-Sravani175/entries.js Line: 33"],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 20\n\n- Array []\n+ Array [\n+   \"A space is required after '{'. File: js-aofs-Sravani175/entries.js Line: 3\",\n+   \"A space is required before '}'. File: js-aofs-Sravani175/entries.js Line: 3\",\n+   \"Trailing spaces not allowed. File: js-aofs-Sravani175/entries.js Line: 6\",\n+   \"Expected indentation of 0 spaces but found 1. File: js-aofs-Sravani175/entries.js Line: 22\",\n+   \"Missing space before function parentheses. File: js-aofs-Sravani175/entries.js Line: 22\",\n+   \"'OBJECT' is already declared in the upper scope on line 3 column 7. File: js-aofs-Sravani175/entries.js Line: 22\",\n+   \"Expected indentation of 2 spaces but found 4. File: js-aofs-Sravani175/entries.js Line: 23\",\n+   \"There should be no space after this paren. File: js-aofs-Sravani175/entries.js Line: 24\",\n+   \"'mine' is never reassigned. Use 'const' instead. File: js-aofs-Sravani175/entries.js Line: 24\",\n+   \"Expected indentation of 4 spaces but found 6. File: js-aofs-Sravani175/entries.js Line: 25\",\n+   \"'index' is never reassigned. Use 'const' instead. File: js-aofs-Sravani175/entries.js Line: 25\",\n+   \"Expected indentation of 4 spaces but found 8. File: js-aofs-Sravani175/entries.js Line: 26\",\n+   \"Expected indentation of 4 spaces but found 5. File: js-aofs-Sravani175/entries.js Line: 27\",\n+   \"Expected indentation of 4 spaces but found 3. File: js-aofs-Sravani175/entries.js Line: 28\",\n+   \"Expected indentation of 2 spaces but found 4. File: js-aofs-Sravani175/entries.js Line: 30\",\n+   \"Missing semicolon. File: js-aofs-Sravani175/entries.js Line: 31\",\n+   \"Expected indentation of 0 spaces but found 4. File: js-aofs-Sravani175/entries.js Line: 32\",\n+   \"Expected indentation of 0 spaces but found 2. File: js-aofs-Sravani175/entries.js Line: 33\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 20\n\n- Array []\n+ Array [\n+   \"A space is required after '{'. File: js-aofs-Sravani175/entries.js Line: 3\",\n+   \"A space is required before '}'. File: js-aofs-Sravani175/entries.js Line: 3\",\n+   \"Trailing spaces not allowed. File: js-aofs-Sravani175/entries.js Line: 6\",\n+   \"Expected indentation of 0 spaces but found 1. File: js-aofs-Sravani175/entries.js Line: 22\",\n+   \"Missing space before function parentheses. File: js-aofs-Sravani175/entries.js Line: 22\",\n+   \"'OBJECT' is already declared in the upper scope on line 3 column 7. File: js-aofs-Sravani175/entries.js Line: 22\",\n+   \"Expected indentation of 2 spaces but found 4. File: js-aofs-Sravani175/entries.js Line: 23\",\n+   \"There should be no space after this paren. File: js-aofs-Sravani175/entries.js Line: 24\",\n+   \"'mine' is never reassigned. Use 'const' instead. File: js-aofs-Sravani175/entries.js Line: 24\",\n+   \"Expected indentation of 4 spaces but found 6. File: js-aofs-Sravani175/entries.js Line: 25\",\n+   \"'index' is never reassigned. Use 'const' instead. File: js-aofs-Sravani175/entries.js Line: 25\",\n+   \"Expected indentation of 4 spaces but found 8. File: js-aofs-Sravani175/entries.js Line: 26\",\n+   \"Expected indentation of 4 spaces but found 5. File: js-aofs-Sravani175/entries.js Line: 27\",\n+   \"Expected indentation of 4 spaces but found 3. File: js-aofs-Sravani175/entries.js Line: 28\",\n+   \"Expected indentation of 2 spaces but found 4. File: js-aofs-Sravani175/entries.js Line: 30\",\n+   \"Missing semicolon. File: js-aofs-Sravani175/entries.js Line: 31\",\n+   \"Expected indentation of 0 spaces but found 4. File: js-aofs-Sravani175/entries.js Line: 32\",\n+   \"Expected indentation of 0 spaces but found 2. File: js-aofs-Sravani175/entries.js Line: 33\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:79:30)"],"fullName":"js-aofs Sravani175 entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Sravani175","remove_adjacent_spaces"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":["One extra space!!!"],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   \"One extra space!!!\",\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   \"One extra space!!!\",\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["js-aofs","Sravani175","remove_adjacent_spaces"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":["Multiple extra spaces!!!"],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   \"Multiple extra spaces!!!\",\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   \"Multiple extra spaces!!!\",\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["js-aofs","Sravani175","remove_adjacent_spaces"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[""],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   \"\",\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   \"\",\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["js-aofs","Sravani175","remove_adjacent_spaces"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[""],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   \"\",\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   \"\",\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["js-aofs","Sravani175","remove_adjacent_spaces"],"duration":0,"failureDetails":[{"matcherResult":{"actual":[],"expected":["SingleWord"],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   \"SingleWord\",\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   \"SingleWord\",\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["js-aofs","Sravani175","remove_adjacent_spaces"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":["a"],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   \"a\",\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   \"a\",\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["js-aofs","Sravani175","remove_adjacent_spaces"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":["ItsALongSentenceWithoutAnySpaces"],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   \"ItsALongSentenceWithoutAnySpaces\",\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   \"ItsALongSentenceWithoutAnySpaces\",\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["js-aofs","Sravani175","remove_adjacent_spaces"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":["Leading spaces!!!"],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   \"Leading spaces!!!\",\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   \"Leading spaces!!!\",\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["js-aofs","Sravani175","remove_adjacent_spaces"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":["Leading spaces!!! & Trailing Spaces!!!"],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   \"Leading spaces!!! & Trailing Spaces!!!\",\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   \"Leading spaces!!! & Trailing Spaces!!!\",\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["js-aofs","Sravani175","remove_adjacent_spaces"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":["Trailing Spaces!!!"],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   \"Trailing Spaces!!!\",\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   \"Trailing Spaces!!!\",\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["js-aofs","Sravani175","remove_adjacent_spaces"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":["String \t with \t spaces \t and \t tabs!!!"],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   \"String \t with \t spaces \t and \t tabs!!!\",\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   \"String \t with \t spaces \t and \t tabs!!!\",\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["js-aofs","Sravani175","remove_adjacent_spaces"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":["String \n with \n spaces \n and \n newlines!!!"],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 7\n+ Received  + 1\n\n- Array [\n-   \"String \n-  with \n-  spaces \n-  and \n-  newlines!!!\",\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 7\n+ Received  + 1\n\n- Array [\n-   \"String \n-  with \n-  spaces \n-  and \n-  newlines!!!\",\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["js-aofs","Sravani175","remove_adjacent_spaces"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":["123 456 789"],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   \"123 456 789\",\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   \"123 456 789\",\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["js-aofs","Sravani175","remove_adjacent_spaces"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":["こんにちは 世界"],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   \"こんにちは 世界\",\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   \"こんにちは 世界\",\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["js-aofs","Sravani175","remove_adjacent_spaces"],"duration":12,"failureDetails":[{"matcherResult":{"actual":["Strings must use singlequote. File: js-aofs-Sravani175/remove_adjacent_spaces.js Line: 3","Trailing spaces not allowed. File: js-aofs-Sravani175/remove_adjacent_spaces.js Line: 7"],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Strings must use singlequote. File: js-aofs-Sravani175/remove_adjacent_spaces.js Line: 3\",\n+   \"Trailing spaces not allowed. File: js-aofs-Sravani175/remove_adjacent_spaces.js Line: 7\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Strings must use singlequote. File: js-aofs-Sravani175/remove_adjacent_spaces.js Line: 3\",\n+   \"Trailing spaces not allowed. File: js-aofs-Sravani175/remove_adjacent_spaces.js Line: 7\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:79:30)"],"fullName":"js-aofs Sravani175 remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Sravani175","tribonacci"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[[0,0,1,1,2,4,7]],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 11\n+ Received  +  1\n\n- Array [\n-   Array [\n-     0,\n-     0,\n-     1,\n-     1,\n-     2,\n-     4,\n-     7,\n-   ],\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 11\n+ Received  +  1\n\n- Array [\n-   Array [\n-     0,\n-     0,\n-     1,\n-     1,\n-     2,\n-     4,\n-     7,\n-   ],\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["js-aofs","Sravani175","tribonacci"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[[0,0,1,1,2,4,7,13,24]],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 13\n+ Received  +  1\n\n- Array [\n-   Array [\n-     0,\n-     0,\n-     1,\n-     1,\n-     2,\n-     4,\n-     7,\n-     13,\n-     24,\n-   ],\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 13\n+ Received  +  1\n\n- Array [\n-   Array [\n-     0,\n-     0,\n-     1,\n-     1,\n-     2,\n-     4,\n-     7,\n-     13,\n-     24,\n-   ],\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["js-aofs","Sravani175","tribonacci"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[[0,0,1,1,2,4,7,13,24,44,81]],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 15\n+ Received  +  1\n\n- Array [\n-   Array [\n-     0,\n-     0,\n-     1,\n-     1,\n-     2,\n-     4,\n-     7,\n-     13,\n-     24,\n-     44,\n-     81,\n-   ],\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 15\n+ Received  +  1\n\n- Array [\n-   Array [\n-     0,\n-     0,\n-     1,\n-     1,\n-     2,\n-     4,\n-     7,\n-     13,\n-     24,\n-     44,\n-     81,\n-   ],\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["js-aofs","Sravani175","tribonacci"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[[0,0,1,1,2,4,7,13,24,44,81,149,274]],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 17\n+ Received  +  1\n\n- Array [\n-   Array [\n-     0,\n-     0,\n-     1,\n-     1,\n-     2,\n-     4,\n-     7,\n-     13,\n-     24,\n-     44,\n-     81,\n-     149,\n-     274,\n-   ],\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 17\n+ Received  +  1\n\n- Array [\n-   Array [\n-     0,\n-     0,\n-     1,\n-     1,\n-     2,\n-     4,\n-     7,\n-     13,\n-     24,\n-     44,\n-     81,\n-     149,\n-     274,\n-   ],\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["js-aofs","Sravani175","tribonacci"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[[0,0,1,1,2]],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 9\n+ Received  + 1\n\n- Array [\n-   Array [\n-     0,\n-     0,\n-     1,\n-     1,\n-     2,\n-   ],\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 9\n+ Received  + 1\n\n- Array [\n-   Array [\n-     0,\n-     0,\n-     1,\n-     1,\n-     2,\n-   ],\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["js-aofs","Sravani175","tribonacci"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[[0,0,1,1]],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 8\n+ Received  + 1\n\n- Array [\n-   Array [\n-     0,\n-     0,\n-     1,\n-     1,\n-   ],\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 8\n+ Received  + 1\n\n- Array [\n-   Array [\n-     0,\n-     0,\n-     1,\n-     1,\n-   ],\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["js-aofs","Sravani175","tribonacci"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[[0,0]],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 6\n+ Received  + 1\n\n- Array [\n-   Array [\n-     0,\n-     0,\n-   ],\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 6\n+ Received  + 1\n\n- Array [\n-   Array [\n-     0,\n-     0,\n-   ],\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["js-aofs","Sravani175","tribonacci"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[[]],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   Array [],\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   Array [],\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["js-aofs","Sravani175","tribonacci"],"duration":2,"failureDetails":[{"matcherResult":{"actual":[],"expected":[[]],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   Array [],\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   Array [],\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["js-aofs","Sravani175","tribonacci"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[[]],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   Array [],\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   Array [],\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["js-aofs","Sravani175","tribonacci"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[[0,0,1,1,2,4,7,13,24,44,81,149,274,504,927,1705,3136,5768]],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 22\n+ Received  +  1\n\n- Array [\n-   Array [\n-     0,\n-     0,\n-     1,\n-     1,\n-     2,\n-     4,\n-     7,\n-     13,\n-     24,\n-     44,\n-     81,\n-     149,\n-     274,\n-     504,\n-     927,\n-     1705,\n-     3136,\n-     5768,\n-   ],\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 22\n+ Received  +  1\n\n- Array [\n-   Array [\n-     0,\n-     0,\n-     1,\n-     1,\n-     2,\n-     4,\n-     7,\n-     13,\n-     24,\n-     44,\n-     81,\n-     149,\n-     274,\n-     504,\n-     927,\n-     1705,\n-     3136,\n-     5768,\n-   ],\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["js-aofs","Sravani175","tribonacci"],"duration":9,"failureDetails":[{"matcherResult":{"actual":["Trailing spaces not allowed. File: js-aofs-Sravani175/tribonacci.js Line: 7","Trailing spaces not allowed. File: js-aofs-Sravani175/tribonacci.js Line: 23","Too many blank lines at the end of file. Max of 0 allowed. File: js-aofs-Sravani175/tribonacci.js Line: 23","Newline required at end of file but not found. File: js-aofs-Sravani175/tribonacci.js Line: 23"],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Trailing spaces not allowed. File: js-aofs-Sravani175/tribonacci.js Line: 7\",\n+   \"Trailing spaces not allowed. File: js-aofs-Sravani175/tribonacci.js Line: 23\",\n+   \"Too many blank lines at the end of file. Max of 0 allowed. File: js-aofs-Sravani175/tribonacci.js Line: 23\",\n+   \"Newline required at end of file but not found. File: js-aofs-Sravani175/tribonacci.js Line: 23\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 6\n\n- Array []\n+ Array [\n+   \"Trailing spaces not allowed. File: js-aofs-Sravani175/tribonacci.js Line: 7\",\n+   \"Trailing spaces not allowed. File: js-aofs-Sravani175/tribonacci.js Line: 23\",\n+   \"Too many blank lines at the end of file. Max of 0 allowed. File: js-aofs-Sravani175/tribonacci.js Line: 23\",\n+   \"Newline required at end of file but not found. File: js-aofs-Sravani175/tribonacci.js Line: 23\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:79:30)"],"fullName":"js-aofs Sravani175 tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Sravani175","array_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[true],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Sravani175","array_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["js-aofs","Sravani175","array_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["js-aofs","Sravani175","array_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["js-aofs","Sravani175","array_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[true],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","Sravani175","array_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","Sravani175","array_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Sravani175","array_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[true],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["js-aofs","Sravani175","array_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[true],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","Sravani175","array_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["js-aofs","Sravani175","array_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","Sravani175","array_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[true],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","Sravani175","array_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","Sravani175","array_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","Sravani175","array_equals"],"duration":0,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","Sravani175","array_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["js-aofs","Sravani175","array_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["js-aofs","Sravani175","array_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Sravani175","array_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[true],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["js-aofs","Sravani175","array_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["js-aofs","Sravani175","array_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[true],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when given two arrays are null"},{"ancestorTitles":["js-aofs","Sravani175","array_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[true],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["js-aofs","Sravani175","array_equals"],"duration":0,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 array_equals should log false when ARRAY_1=undefined and ARRAY_2=null","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when ARRAY_1=undefined and ARRAY_2=null"},{"ancestorTitles":["js-aofs","Sravani175","array_equals"],"duration":0,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 array_equals should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Sravani175","array_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 array_equals should log false when ARRAY_1=[1] and ARRAY_2={0:1}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when ARRAY_1=[1] and ARRAY_2={0:1}"},{"ancestorTitles":["js-aofs","Sravani175","array_equals"],"duration":2,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 array_equals should log false when ARRAY_1={0:1} and ARRAY_2=[1]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when ARRAY_1={0:1} and ARRAY_2=[1]"},{"ancestorTitles":["js-aofs","Sravani175","array_equals"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sravani175 array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Sravani175","object_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[true],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Sravani175","object_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Sravani175","object_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Sravani175","object_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Sravani175","object_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[true],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Sravani175","object_equals"],"duration":0,"failureDetails":[{"matcherResult":{"actual":[],"expected":[true],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Sravani175","object_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Sravani175","object_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[true],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","Sravani175","object_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","Sravani175","object_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[true],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["js-aofs","Sravani175","object_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[true],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","Sravani175","object_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","Sravani175","object_equals"],"duration":0,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["js-aofs","Sravani175","object_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[true],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["js-aofs","Sravani175","object_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["js-aofs","Sravani175","object_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["js-aofs","Sravani175","object_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[true],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["js-aofs","Sravani175","object_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 object_equals should log false when OBJECT_1=undefined and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1=undefined and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Sravani175","object_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 object_equals should log false when OBJECT_1={} and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={} and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","Sravani175","object_equals"],"duration":0,"failureDetails":[{"matcherResult":{"actual":[],"expected":[true],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   true,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 object_equals should log true when OBJECT_1=undefined and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when OBJECT_1=undefined and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","Sravani175","object_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 object_equals should log false when OBJECT_1=[1] and OBJECT_2={0:1}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1=[1] and OBJECT_2={0:1}"},{"ancestorTitles":["js-aofs","Sravani175","object_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 3\n+ Received  + 1\n\n- Array [\n-   false,\n- ]\n+ Array []\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Sravani175 object_equals should log false when OBJECT_1={0:1} and OBJECT_2=[1]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={0:1} and OBJECT_2=[1]"},{"ancestorTitles":["js-aofs","Sravani175","object_equals"],"duration":19,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sravani175 object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Sreenayak","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["js-aofs","Sreenayak","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["js-aofs","Sreenayak","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["js-aofs","Sreenayak","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["js-aofs","Sreenayak","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["js-aofs","Sreenayak","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["js-aofs","Sreenayak","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["js-aofs","Sreenayak","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["js-aofs","Sreenayak","even_odd"],"duration":30,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Sreenayak","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["js-aofs","Sreenayak","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["js-aofs","Sreenayak","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["js-aofs","Sreenayak","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["js-aofs","Sreenayak","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["js-aofs","Sreenayak","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["js-aofs","Sreenayak","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["js-aofs","Sreenayak","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["js-aofs","Sreenayak","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["js-aofs","Sreenayak","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["js-aofs","Sreenayak","categorise"],"duration":60,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Sreenayak","entries"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["js-aofs","Sreenayak","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["js-aofs","Sreenayak","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["js-aofs","Sreenayak","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["js-aofs","Sreenayak","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["js-aofs","Sreenayak","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["js-aofs","Sreenayak","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["js-aofs","Sreenayak","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["js-aofs","Sreenayak","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["js-aofs","Sreenayak","entries"],"duration":34,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Sreenayak","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["js-aofs","Sreenayak","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["js-aofs","Sreenayak","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["js-aofs","Sreenayak","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["js-aofs","Sreenayak","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["js-aofs","Sreenayak","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["js-aofs","Sreenayak","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["js-aofs","Sreenayak","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["js-aofs","Sreenayak","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["js-aofs","Sreenayak","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["js-aofs","Sreenayak","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["js-aofs","Sreenayak","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["js-aofs","Sreenayak","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["js-aofs","Sreenayak","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["js-aofs","Sreenayak","remove_adjacent_spaces"],"duration":41,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Sreenayak","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["js-aofs","Sreenayak","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["js-aofs","Sreenayak","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["js-aofs","Sreenayak","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["js-aofs","Sreenayak","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["js-aofs","Sreenayak","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["js-aofs","Sreenayak","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["js-aofs","Sreenayak","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["js-aofs","Sreenayak","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["js-aofs","Sreenayak","tribonacci"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["js-aofs","Sreenayak","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["js-aofs","Sreenayak","tribonacci"],"duration":27,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Sreenayak","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Sreenayak","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["js-aofs","Sreenayak","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["js-aofs","Sreenayak","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["js-aofs","Sreenayak","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","Sreenayak","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","Sreenayak","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Sreenayak","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["js-aofs","Sreenayak","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","Sreenayak","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["js-aofs","Sreenayak","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","Sreenayak","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","Sreenayak","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","Sreenayak","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","Sreenayak","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","Sreenayak","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["js-aofs","Sreenayak","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["js-aofs","Sreenayak","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Sreenayak","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["js-aofs","Sreenayak","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["js-aofs","Sreenayak","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["js-aofs","Sreenayak","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["js-aofs","Sreenayak","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak array_equals should log false when ARRAY_1=undefined and ARRAY_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=null"},{"ancestorTitles":["js-aofs","Sreenayak","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak array_equals should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Sreenayak","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak array_equals should log false when ARRAY_1=[1] and ARRAY_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=[1] and ARRAY_2={0:1}"},{"ancestorTitles":["js-aofs","Sreenayak","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak array_equals should log false when ARRAY_1={0:1} and ARRAY_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1={0:1} and ARRAY_2=[1]"},{"ancestorTitles":["js-aofs","Sreenayak","array_equals"],"duration":51,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Sreenayak","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Sreenayak","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Sreenayak","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Sreenayak","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Sreenayak","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Sreenayak","object_equals"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Sreenayak","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Sreenayak","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","Sreenayak","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","Sreenayak","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["js-aofs","Sreenayak","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","Sreenayak","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","Sreenayak","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["js-aofs","Sreenayak","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["js-aofs","Sreenayak","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["js-aofs","Sreenayak","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["js-aofs","Sreenayak","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["js-aofs","Sreenayak","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak object_equals should log false when OBJECT_1=undefined and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=undefined and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Sreenayak","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak object_equals should log false when OBJECT_1={} and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={} and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","Sreenayak","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak object_equals should log true when OBJECT_1=undefined and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=undefined and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","Sreenayak","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak object_equals should log false when OBJECT_1=[1] and OBJECT_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=[1] and OBJECT_2={0:1}"},{"ancestorTitles":["js-aofs","Sreenayak","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak object_equals should log false when OBJECT_1={0:1} and OBJECT_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={0:1} and OBJECT_2=[1]"},{"ancestorTitles":["js-aofs","Sreenayak","object_equals"],"duration":65,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Sreenayak object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Triveni12062006","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["js-aofs","Triveni12062006","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["js-aofs","Triveni12062006","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["js-aofs","Triveni12062006","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["js-aofs","Triveni12062006","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["js-aofs","Triveni12062006","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["js-aofs","Triveni12062006","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["js-aofs","Triveni12062006","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["js-aofs","Triveni12062006","even_odd"],"duration":28,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Triveni12062006","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["js-aofs","Triveni12062006","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["js-aofs","Triveni12062006","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["js-aofs","Triveni12062006","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["js-aofs","Triveni12062006","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["js-aofs","Triveni12062006","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["js-aofs","Triveni12062006","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["js-aofs","Triveni12062006","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["js-aofs","Triveni12062006","categorise"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["js-aofs","Triveni12062006","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["js-aofs","Triveni12062006","categorise"],"duration":35,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Triveni12062006","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["js-aofs","Triveni12062006","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["js-aofs","Triveni12062006","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["js-aofs","Triveni12062006","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["js-aofs","Triveni12062006","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["js-aofs","Triveni12062006","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["js-aofs","Triveni12062006","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["js-aofs","Triveni12062006","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["js-aofs","Triveni12062006","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["js-aofs","Triveni12062006","entries"],"duration":21,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Triveni12062006","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["js-aofs","Triveni12062006","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["js-aofs","Triveni12062006","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["js-aofs","Triveni12062006","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["js-aofs","Triveni12062006","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["js-aofs","Triveni12062006","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["js-aofs","Triveni12062006","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["js-aofs","Triveni12062006","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["js-aofs","Triveni12062006","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["js-aofs","Triveni12062006","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["js-aofs","Triveni12062006","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["js-aofs","Triveni12062006","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["js-aofs","Triveni12062006","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["js-aofs","Triveni12062006","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["js-aofs","Triveni12062006","remove_adjacent_spaces"],"duration":48,"failureDetails":[{"matcherResult":{"actual":["Arrow function has too many lines (23). Maximum allowed is 15. File: js-aofs-Triveni12062006/remove_adjacent_spaces.js Line: 31"],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (23). Maximum allowed is 15. File: js-aofs-Triveni12062006/remove_adjacent_spaces.js Line: 31\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (23). Maximum allowed is 15. File: js-aofs-Triveni12062006/remove_adjacent_spaces.js Line: 31\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:79:30)"],"fullName":"js-aofs Triveni12062006 remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Triveni12062006","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["js-aofs","Triveni12062006","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["js-aofs","Triveni12062006","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["js-aofs","Triveni12062006","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["js-aofs","Triveni12062006","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["js-aofs","Triveni12062006","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["js-aofs","Triveni12062006","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["js-aofs","Triveni12062006","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["js-aofs","Triveni12062006","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["js-aofs","Triveni12062006","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["js-aofs","Triveni12062006","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["js-aofs","Triveni12062006","tribonacci"],"duration":29,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Triveni12062006","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Triveni12062006","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["js-aofs","Triveni12062006","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["js-aofs","Triveni12062006","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["js-aofs","Triveni12062006","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","Triveni12062006","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","Triveni12062006","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Triveni12062006","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["js-aofs","Triveni12062006","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","Triveni12062006","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["js-aofs","Triveni12062006","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","Triveni12062006","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","Triveni12062006","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","Triveni12062006","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","Triveni12062006","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","Triveni12062006","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["js-aofs","Triveni12062006","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["js-aofs","Triveni12062006","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Triveni12062006","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["js-aofs","Triveni12062006","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["js-aofs","Triveni12062006","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["js-aofs","Triveni12062006","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["js-aofs","Triveni12062006","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 array_equals should log false when ARRAY_1=undefined and ARRAY_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=null"},{"ancestorTitles":["js-aofs","Triveni12062006","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 array_equals should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Triveni12062006","array_equals"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 array_equals should log false when ARRAY_1=[1] and ARRAY_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=[1] and ARRAY_2={0:1}"},{"ancestorTitles":["js-aofs","Triveni12062006","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 array_equals should log false when ARRAY_1={0:1} and ARRAY_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1={0:1} and ARRAY_2=[1]"},{"ancestorTitles":["js-aofs","Triveni12062006","array_equals"],"duration":31,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Triveni12062006","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Triveni12062006","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Triveni12062006","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Triveni12062006","object_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[true],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Triveni12062006 object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Triveni12062006","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Triveni12062006","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Triveni12062006","object_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[true],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Triveni12062006 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Triveni12062006","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","Triveni12062006","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","Triveni12062006","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["js-aofs","Triveni12062006","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","Triveni12062006","object_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[true],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Triveni12062006 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","Triveni12062006","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["js-aofs","Triveni12062006","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["js-aofs","Triveni12062006","object_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[true],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Triveni12062006 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["js-aofs","Triveni12062006","object_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[true],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Triveni12062006 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["js-aofs","Triveni12062006","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["js-aofs","Triveni12062006","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 object_equals should log false when OBJECT_1=undefined and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=undefined and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Triveni12062006","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 object_equals should log false when OBJECT_1={} and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={} and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","Triveni12062006","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Triveni12062006 object_equals should log true when OBJECT_1=undefined and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=undefined and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","Triveni12062006","object_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[true],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Triveni12062006 object_equals should log false when OBJECT_1=[1] and OBJECT_2={0:1}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1=[1] and OBJECT_2={0:1}"},{"ancestorTitles":["js-aofs","Triveni12062006","object_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[true],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs Triveni12062006 object_equals should log false when OBJECT_1={0:1} and OBJECT_2=[1]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={0:1} and OBJECT_2=[1]"},{"ancestorTitles":["js-aofs","Triveni12062006","object_equals"],"duration":44,"failureDetails":[{"matcherResult":{"actual":["Arrow function has too many lines (19). Maximum allowed is 15. File: js-aofs-Triveni12062006/object_equals.js Line: 31","Expected indentation of 2 spaces but found 0. File: js-aofs-Triveni12062006/object_equals.js Line: 32","Expected indentation of 4 spaces but found 2. File: js-aofs-Triveni12062006/object_equals.js Line: 33","Expected indentation of 2 spaces but found 0. File: js-aofs-Triveni12062006/object_equals.js Line: 34","Expected space(s) after \"if\". File: js-aofs-Triveni12062006/object_equals.js Line: 35","Expected indentation of 2 spaces but found 0. File: js-aofs-Triveni12062006/object_equals.js Line: 35","Operator '||' must be spaced. File: js-aofs-Triveni12062006/object_equals.js Line: 35","Expected indentation of 4 spaces but found 2. File: js-aofs-Triveni12062006/object_equals.js Line: 36","Expected indentation of 2 spaces but found 0. File: js-aofs-Triveni12062006/object_equals.js Line: 37","Expected indentation of 2 spaces but found 0. File: js-aofs-Triveni12062006/object_equals.js Line: 38","Expected indentation of 2 spaces but found 0. File: js-aofs-Triveni12062006/object_equals.js Line: 39","Expected space(s) after \"if\". File: js-aofs-Triveni12062006/object_equals.js Line: 40","Expected indentation of 2 spaces but found 0. File: js-aofs-Triveni12062006/object_equals.js Line: 40","There should be no space after this paren. File: js-aofs-Triveni12062006/object_equals.js Line: 40","Expected indentation of 4 spaces but found 2. File: js-aofs-Triveni12062006/object_equals.js Line: 41","Expected indentation of 2 spaces but found 0. File: js-aofs-Triveni12062006/object_equals.js Line: 42","Expected indentation of 2 spaces but found 0. File: js-aofs-Triveni12062006/object_equals.js Line: 43","Expected indentation of 4 spaces but found 2. File: js-aofs-Triveni12062006/object_equals.js Line: 44","Expected indentation of 6 spaces but found 4. File: js-aofs-Triveni12062006/object_equals.js Line: 45","Expected indentation of 4 spaces but found 2. File: js-aofs-Triveni12062006/object_equals.js Line: 46","Expected indentation of 2 spaces but found 0. File: js-aofs-Triveni12062006/object_equals.js Line: 47","Expected indentation of 2 spaces but found 1. File: js-aofs-Triveni12062006/object_equals.js Line: 48"],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 24\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (19). Maximum allowed is 15. File: js-aofs-Triveni12062006/object_equals.js Line: 31\",\n+   \"Expected indentation of 2 spaces but found 0. File: js-aofs-Triveni12062006/object_equals.js Line: 32\",\n+   \"Expected indentation of 4 spaces but found 2. File: js-aofs-Triveni12062006/object_equals.js Line: 33\",\n+   \"Expected indentation of 2 spaces but found 0. File: js-aofs-Triveni12062006/object_equals.js Line: 34\",\n+   \"Expected space(s) after \\\"if\\\". File: js-aofs-Triveni12062006/object_equals.js Line: 35\",\n+   \"Expected indentation of 2 spaces but found 0. File: js-aofs-Triveni12062006/object_equals.js Line: 35\",\n+   \"Operator '||' must be spaced. File: js-aofs-Triveni12062006/object_equals.js Line: 35\",\n+   \"Expected indentation of 4 spaces but found 2. File: js-aofs-Triveni12062006/object_equals.js Line: 36\",\n+   \"Expected indentation of 2 spaces but found 0. File: js-aofs-Triveni12062006/object_equals.js Line: 37\",\n+   \"Expected indentation of 2 spaces but found 0. File: js-aofs-Triveni12062006/object_equals.js Line: 38\",\n+   \"Expected indentation of 2 spaces but found 0. File: js-aofs-Triveni12062006/object_equals.js Line: 39\",\n+   \"Expected space(s) after \\\"if\\\". File: js-aofs-Triveni12062006/object_equals.js Line: 40\",\n+   \"Expected indentation of 2 spaces but found 0. File: js-aofs-Triveni12062006/object_equals.js Line: 40\",\n+   \"There should be no space after this paren. File: js-aofs-Triveni12062006/object_equals.js Line: 40\",\n+   \"Expected indentation of 4 spaces but found 2. File: js-aofs-Triveni12062006/object_equals.js Line: 41\",\n+   \"Expected indentation of 2 spaces but found 0. File: js-aofs-Triveni12062006/object_equals.js Line: 42\",\n+   \"Expected indentation of 2 spaces but found 0. File: js-aofs-Triveni12062006/object_equals.js Line: 43\",\n+   \"Expected indentation of 4 spaces but found 2. File: js-aofs-Triveni12062006/object_equals.js Line: 44\",\n+   \"Expected indentation of 6 spaces but found 4. File: js-aofs-Triveni12062006/object_equals.js Line: 45\",\n+   \"Expected indentation of 4 spaces but found 2. File: js-aofs-Triveni12062006/object_equals.js Line: 46\",\n+   \"Expected indentation of 2 spaces but found 0. File: js-aofs-Triveni12062006/object_equals.js Line: 47\",\n+   \"Expected indentation of 2 spaces but found 1. File: js-aofs-Triveni12062006/object_equals.js Line: 48\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 24\n\n- Array []\n+ Array [\n+   \"Arrow function has too many lines (19). Maximum allowed is 15. File: js-aofs-Triveni12062006/object_equals.js Line: 31\",\n+   \"Expected indentation of 2 spaces but found 0. File: js-aofs-Triveni12062006/object_equals.js Line: 32\",\n+   \"Expected indentation of 4 spaces but found 2. File: js-aofs-Triveni12062006/object_equals.js Line: 33\",\n+   \"Expected indentation of 2 spaces but found 0. File: js-aofs-Triveni12062006/object_equals.js Line: 34\",\n+   \"Expected space(s) after \\\"if\\\". File: js-aofs-Triveni12062006/object_equals.js Line: 35\",\n+   \"Expected indentation of 2 spaces but found 0. File: js-aofs-Triveni12062006/object_equals.js Line: 35\",\n+   \"Operator '||' must be spaced. File: js-aofs-Triveni12062006/object_equals.js Line: 35\",\n+   \"Expected indentation of 4 spaces but found 2. File: js-aofs-Triveni12062006/object_equals.js Line: 36\",\n+   \"Expected indentation of 2 spaces but found 0. File: js-aofs-Triveni12062006/object_equals.js Line: 37\",\n+   \"Expected indentation of 2 spaces but found 0. File: js-aofs-Triveni12062006/object_equals.js Line: 38\",\n+   \"Expected indentation of 2 spaces but found 0. File: js-aofs-Triveni12062006/object_equals.js Line: 39\",\n+   \"Expected space(s) after \\\"if\\\". File: js-aofs-Triveni12062006/object_equals.js Line: 40\",\n+   \"Expected indentation of 2 spaces but found 0. File: js-aofs-Triveni12062006/object_equals.js Line: 40\",\n+   \"There should be no space after this paren. File: js-aofs-Triveni12062006/object_equals.js Line: 40\",\n+   \"Expected indentation of 4 spaces but found 2. File: js-aofs-Triveni12062006/object_equals.js Line: 41\",\n+   \"Expected indentation of 2 spaces but found 0. File: js-aofs-Triveni12062006/object_equals.js Line: 42\",\n+   \"Expected indentation of 2 spaces but found 0. File: js-aofs-Triveni12062006/object_equals.js Line: 43\",\n+   \"Expected indentation of 4 spaces but found 2. File: js-aofs-Triveni12062006/object_equals.js Line: 44\",\n+   \"Expected indentation of 6 spaces but found 4. File: js-aofs-Triveni12062006/object_equals.js Line: 45\",\n+   \"Expected indentation of 4 spaces but found 2. File: js-aofs-Triveni12062006/object_equals.js Line: 46\",\n+   \"Expected indentation of 2 spaces but found 0. File: js-aofs-Triveni12062006/object_equals.js Line: 47\",\n+   \"Expected indentation of 2 spaces but found 1. File: js-aofs-Triveni12062006/object_equals.js Line: 48\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:79:30)"],"fullName":"js-aofs Triveni12062006 object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","even_odd"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","even_odd"],"duration":31,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","categorise"],"duration":72,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","entries"],"duration":29,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","remove_adjacent_spaces"],"duration":53,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","tribonacci"],"duration":34,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH array_equals should log false when ARRAY_1=undefined and ARRAY_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=null"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH array_equals should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH array_equals should log false when ARRAY_1=[1] and ARRAY_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=[1] and ARRAY_2={0:1}"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH array_equals should log false when ARRAY_1={0:1} and ARRAY_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1={0:1} and ARRAY_2=[1]"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","array_equals"],"duration":56,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","object_equals"],"duration":6,"failureDetails":[{"matcherResult":{"actual":[true],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs VETR1-V1GNESH object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH object_equals should log false when OBJECT_1=undefined and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=undefined and OBJECT_2={}"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH object_equals should log false when OBJECT_1={} and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={} and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH object_equals should log true when OBJECT_1=undefined and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=undefined and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH object_equals should log false when OBJECT_1=[1] and OBJECT_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=[1] and OBJECT_2={0:1}"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH object_equals should log false when OBJECT_1={0:1} and OBJECT_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={0:1} and OBJECT_2=[1]"},{"ancestorTitles":["js-aofs","VETR1-V1GNESH","object_equals"],"duration":54,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VETR1-V1GNESH object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","even_odd"],"duration":34,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","categorise"],"duration":64,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","entries"],"duration":27,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","remove_adjacent_spaces"],"duration":55,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","tribonacci"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","tribonacci"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","tribonacci"],"duration":33,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP array_equals should log false when ARRAY_1=undefined and ARRAY_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=null"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP array_equals should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","array_equals"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP array_equals should log false when ARRAY_1=[1] and ARRAY_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=[1] and ARRAY_2={0:1}"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP array_equals should log false when ARRAY_1={0:1} and ARRAY_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1={0:1} and ARRAY_2=[1]"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","array_equals"],"duration":43,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP object_equals should log false when OBJECT_1=undefined and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=undefined and OBJECT_2={}"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP object_equals should log false when OBJECT_1={} and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={} and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP object_equals should log true when OBJECT_1=undefined and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=undefined and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP object_equals should log false when OBJECT_1=[1] and OBJECT_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=[1] and OBJECT_2={0:1}"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP object_equals should log false when OBJECT_1={0:1} and OBJECT_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={0:1} and OBJECT_2=[1]"},{"ancestorTitles":["js-aofs","VUPPUKULADEEP","object_equals"],"duration":58,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs VUPPUKULADEEP object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Venkat14424","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["js-aofs","Venkat14424","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["js-aofs","Venkat14424","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["js-aofs","Venkat14424","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["js-aofs","Venkat14424","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["js-aofs","Venkat14424","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["js-aofs","Venkat14424","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["js-aofs","Venkat14424","even_odd"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["js-aofs","Venkat14424","even_odd"],"duration":31,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Venkat14424","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["js-aofs","Venkat14424","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["js-aofs","Venkat14424","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["js-aofs","Venkat14424","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["js-aofs","Venkat14424","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["js-aofs","Venkat14424","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["js-aofs","Venkat14424","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["js-aofs","Venkat14424","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["js-aofs","Venkat14424","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["js-aofs","Venkat14424","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["js-aofs","Venkat14424","categorise"],"duration":65,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Venkat14424","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["js-aofs","Venkat14424","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["js-aofs","Venkat14424","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["js-aofs","Venkat14424","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["js-aofs","Venkat14424","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["js-aofs","Venkat14424","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["js-aofs","Venkat14424","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["js-aofs","Venkat14424","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["js-aofs","Venkat14424","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["js-aofs","Venkat14424","entries"],"duration":32,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Venkat14424","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["js-aofs","Venkat14424","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["js-aofs","Venkat14424","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["js-aofs","Venkat14424","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["js-aofs","Venkat14424","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["js-aofs","Venkat14424","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["js-aofs","Venkat14424","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["js-aofs","Venkat14424","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["js-aofs","Venkat14424","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["js-aofs","Venkat14424","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["js-aofs","Venkat14424","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["js-aofs","Venkat14424","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["js-aofs","Venkat14424","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["js-aofs","Venkat14424","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["js-aofs","Venkat14424","remove_adjacent_spaces"],"duration":34,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Venkat14424","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["js-aofs","Venkat14424","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["js-aofs","Venkat14424","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["js-aofs","Venkat14424","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["js-aofs","Venkat14424","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["js-aofs","Venkat14424","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["js-aofs","Venkat14424","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["js-aofs","Venkat14424","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["js-aofs","Venkat14424","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["js-aofs","Venkat14424","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["js-aofs","Venkat14424","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["js-aofs","Venkat14424","tribonacci"],"duration":30,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Venkat14424","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Venkat14424","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["js-aofs","Venkat14424","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["js-aofs","Venkat14424","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["js-aofs","Venkat14424","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","Venkat14424","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","Venkat14424","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Venkat14424","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["js-aofs","Venkat14424","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","Venkat14424","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["js-aofs","Venkat14424","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","Venkat14424","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","Venkat14424","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","Venkat14424","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","Venkat14424","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","Venkat14424","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["js-aofs","Venkat14424","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["js-aofs","Venkat14424","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Venkat14424","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["js-aofs","Venkat14424","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["js-aofs","Venkat14424","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["js-aofs","Venkat14424","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["js-aofs","Venkat14424","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 array_equals should log false when ARRAY_1=undefined and ARRAY_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=null"},{"ancestorTitles":["js-aofs","Venkat14424","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 array_equals should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","Venkat14424","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 array_equals should log false when ARRAY_1=[1] and ARRAY_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=[1] and ARRAY_2={0:1}"},{"ancestorTitles":["js-aofs","Venkat14424","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 array_equals should log false when ARRAY_1={0:1} and ARRAY_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1={0:1} and ARRAY_2=[1]"},{"ancestorTitles":["js-aofs","Venkat14424","array_equals"],"duration":58,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","Venkat14424","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Venkat14424","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Venkat14424","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Venkat14424","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Venkat14424","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","Venkat14424","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Venkat14424","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Venkat14424","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","Venkat14424","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","Venkat14424","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["js-aofs","Venkat14424","object_equals"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","Venkat14424","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","Venkat14424","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["js-aofs","Venkat14424","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["js-aofs","Venkat14424","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["js-aofs","Venkat14424","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["js-aofs","Venkat14424","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["js-aofs","Venkat14424","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 object_equals should log false when OBJECT_1=undefined and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=undefined and OBJECT_2={}"},{"ancestorTitles":["js-aofs","Venkat14424","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 object_equals should log false when OBJECT_1={} and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={} and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","Venkat14424","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 object_equals should log true when OBJECT_1=undefined and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=undefined and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","Venkat14424","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 object_equals should log false when OBJECT_1=[1] and OBJECT_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=[1] and OBJECT_2={0:1}"},{"ancestorTitles":["js-aofs","Venkat14424","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 object_equals should log false when OBJECT_1={0:1} and OBJECT_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={0:1} and OBJECT_2=[1]"},{"ancestorTitles":["js-aofs","Venkat14424","object_equals"],"duration":68,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs Venkat14424 object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","YMOURYA25","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["js-aofs","YMOURYA25","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["js-aofs","YMOURYA25","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["js-aofs","YMOURYA25","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["js-aofs","YMOURYA25","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["js-aofs","YMOURYA25","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["js-aofs","YMOURYA25","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["js-aofs","YMOURYA25","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["js-aofs","YMOURYA25","even_odd"],"duration":27,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","YMOURYA25","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["js-aofs","YMOURYA25","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["js-aofs","YMOURYA25","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["js-aofs","YMOURYA25","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["js-aofs","YMOURYA25","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["js-aofs","YMOURYA25","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["js-aofs","YMOURYA25","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["js-aofs","YMOURYA25","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["js-aofs","YMOURYA25","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["js-aofs","YMOURYA25","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["js-aofs","YMOURYA25","categorise"],"duration":64,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","YMOURYA25","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["js-aofs","YMOURYA25","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["js-aofs","YMOURYA25","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["js-aofs","YMOURYA25","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["js-aofs","YMOURYA25","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["js-aofs","YMOURYA25","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["js-aofs","YMOURYA25","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["js-aofs","YMOURYA25","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["js-aofs","YMOURYA25","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["js-aofs","YMOURYA25","entries"],"duration":30,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","YMOURYA25","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["js-aofs","YMOURYA25","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["js-aofs","YMOURYA25","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["js-aofs","YMOURYA25","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["js-aofs","YMOURYA25","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["js-aofs","YMOURYA25","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["js-aofs","YMOURYA25","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["js-aofs","YMOURYA25","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["js-aofs","YMOURYA25","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["js-aofs","YMOURYA25","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["js-aofs","YMOURYA25","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["js-aofs","YMOURYA25","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["js-aofs","YMOURYA25","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["js-aofs","YMOURYA25","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["js-aofs","YMOURYA25","remove_adjacent_spaces"],"duration":59,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","YMOURYA25","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["js-aofs","YMOURYA25","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["js-aofs","YMOURYA25","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["js-aofs","YMOURYA25","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["js-aofs","YMOURYA25","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["js-aofs","YMOURYA25","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["js-aofs","YMOURYA25","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["js-aofs","YMOURYA25","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["js-aofs","YMOURYA25","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["js-aofs","YMOURYA25","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["js-aofs","YMOURYA25","tribonacci"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["js-aofs","YMOURYA25","tribonacci"],"duration":29,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","YMOURYA25","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","YMOURYA25","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["js-aofs","YMOURYA25","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["js-aofs","YMOURYA25","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["js-aofs","YMOURYA25","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","YMOURYA25","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","YMOURYA25","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","YMOURYA25","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["js-aofs","YMOURYA25","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","YMOURYA25","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["js-aofs","YMOURYA25","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","YMOURYA25","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","YMOURYA25","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","YMOURYA25","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","YMOURYA25","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","YMOURYA25","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["js-aofs","YMOURYA25","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["js-aofs","YMOURYA25","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","YMOURYA25","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["js-aofs","YMOURYA25","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["js-aofs","YMOURYA25","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["js-aofs","YMOURYA25","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["js-aofs","YMOURYA25","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 array_equals should log false when ARRAY_1=undefined and ARRAY_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=null"},{"ancestorTitles":["js-aofs","YMOURYA25","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 array_equals should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","YMOURYA25","array_equals"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 array_equals should log false when ARRAY_1=[1] and ARRAY_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=[1] and ARRAY_2={0:1}"},{"ancestorTitles":["js-aofs","YMOURYA25","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 array_equals should log false when ARRAY_1={0:1} and ARRAY_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1={0:1} and ARRAY_2=[1]"},{"ancestorTitles":["js-aofs","YMOURYA25","array_equals"],"duration":40,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","YMOURYA25","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","YMOURYA25","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","YMOURYA25","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","YMOURYA25","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","YMOURYA25","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","YMOURYA25","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","YMOURYA25","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","YMOURYA25","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","YMOURYA25","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","YMOURYA25","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["js-aofs","YMOURYA25","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","YMOURYA25","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","YMOURYA25","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["js-aofs","YMOURYA25","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["js-aofs","YMOURYA25","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["js-aofs","YMOURYA25","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["js-aofs","YMOURYA25","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["js-aofs","YMOURYA25","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 object_equals should log false when OBJECT_1=undefined and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=undefined and OBJECT_2={}"},{"ancestorTitles":["js-aofs","YMOURYA25","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 object_equals should log false when OBJECT_1={} and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={} and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","YMOURYA25","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 object_equals should log true when OBJECT_1=undefined and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=undefined and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","YMOURYA25","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 object_equals should log false when OBJECT_1=[1] and OBJECT_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=[1] and OBJECT_2={0:1}"},{"ancestorTitles":["js-aofs","YMOURYA25","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 object_equals should log false when OBJECT_1={0:1} and OBJECT_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={0:1} and OBJECT_2=[1]"},{"ancestorTitles":["js-aofs","YMOURYA25","object_equals"],"duration":72,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs YMOURYA25 object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","balasatish1","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["js-aofs","balasatish1","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["js-aofs","balasatish1","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["js-aofs","balasatish1","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["js-aofs","balasatish1","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["js-aofs","balasatish1","even_odd"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["js-aofs","balasatish1","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["js-aofs","balasatish1","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["js-aofs","balasatish1","even_odd"],"duration":31,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","balasatish1","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["js-aofs","balasatish1","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["js-aofs","balasatish1","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["js-aofs","balasatish1","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["js-aofs","balasatish1","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["js-aofs","balasatish1","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["js-aofs","balasatish1","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["js-aofs","balasatish1","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["js-aofs","balasatish1","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["js-aofs","balasatish1","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["js-aofs","balasatish1","categorise"],"duration":66,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","balasatish1","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["js-aofs","balasatish1","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["js-aofs","balasatish1","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["js-aofs","balasatish1","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["js-aofs","balasatish1","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["js-aofs","balasatish1","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["js-aofs","balasatish1","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["js-aofs","balasatish1","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["js-aofs","balasatish1","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["js-aofs","balasatish1","entries"],"duration":30,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","balasatish1","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["js-aofs","balasatish1","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["js-aofs","balasatish1","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["js-aofs","balasatish1","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["js-aofs","balasatish1","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["js-aofs","balasatish1","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["js-aofs","balasatish1","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["js-aofs","balasatish1","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["js-aofs","balasatish1","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["js-aofs","balasatish1","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["js-aofs","balasatish1","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["js-aofs","balasatish1","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["js-aofs","balasatish1","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["js-aofs","balasatish1","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["js-aofs","balasatish1","remove_adjacent_spaces"],"duration":43,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","balasatish1","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["js-aofs","balasatish1","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["js-aofs","balasatish1","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["js-aofs","balasatish1","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["js-aofs","balasatish1","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["js-aofs","balasatish1","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["js-aofs","balasatish1","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["js-aofs","balasatish1","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["js-aofs","balasatish1","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["js-aofs","balasatish1","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["js-aofs","balasatish1","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["js-aofs","balasatish1","tribonacci"],"duration":43,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","balasatish1","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","balasatish1","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["js-aofs","balasatish1","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["js-aofs","balasatish1","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["js-aofs","balasatish1","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","balasatish1","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","balasatish1","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","balasatish1","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["js-aofs","balasatish1","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","balasatish1","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["js-aofs","balasatish1","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","balasatish1","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","balasatish1","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","balasatish1","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","balasatish1","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","balasatish1","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["js-aofs","balasatish1","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["js-aofs","balasatish1","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","balasatish1","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["js-aofs","balasatish1","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["js-aofs","balasatish1","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["js-aofs","balasatish1","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["js-aofs","balasatish1","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 array_equals should log false when ARRAY_1=undefined and ARRAY_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=null"},{"ancestorTitles":["js-aofs","balasatish1","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 array_equals should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","balasatish1","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 array_equals should log false when ARRAY_1=[1] and ARRAY_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=[1] and ARRAY_2={0:1}"},{"ancestorTitles":["js-aofs","balasatish1","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 array_equals should log false when ARRAY_1={0:1} and ARRAY_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1={0:1} and ARRAY_2=[1]"},{"ancestorTitles":["js-aofs","balasatish1","array_equals"],"duration":58,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","balasatish1","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","balasatish1","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","balasatish1","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","balasatish1","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","balasatish1","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","balasatish1","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","balasatish1","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","balasatish1","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","balasatish1","object_equals"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","balasatish1","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["js-aofs","balasatish1","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","balasatish1","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","balasatish1","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["js-aofs","balasatish1","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["js-aofs","balasatish1","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["js-aofs","balasatish1","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["js-aofs","balasatish1","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["js-aofs","balasatish1","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 object_equals should log false when OBJECT_1=undefined and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=undefined and OBJECT_2={}"},{"ancestorTitles":["js-aofs","balasatish1","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 object_equals should log false when OBJECT_1={} and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={} and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","balasatish1","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 object_equals should log true when OBJECT_1=undefined and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=undefined and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","balasatish1","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 object_equals should log false when OBJECT_1=[1] and OBJECT_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=[1] and OBJECT_2={0:1}"},{"ancestorTitles":["js-aofs","balasatish1","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 object_equals should log false when OBJECT_1={0:1} and OBJECT_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={0:1} and OBJECT_2=[1]"},{"ancestorTitles":["js-aofs","balasatish1","object_equals"],"duration":71,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs balasatish1 object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","harshavardhan-macha","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["js-aofs","harshavardhan-macha","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["js-aofs","harshavardhan-macha","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["js-aofs","harshavardhan-macha","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["js-aofs","harshavardhan-macha","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["js-aofs","harshavardhan-macha","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["js-aofs","harshavardhan-macha","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["js-aofs","harshavardhan-macha","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["js-aofs","harshavardhan-macha","even_odd"],"duration":42,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","harshavardhan-macha","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["js-aofs","harshavardhan-macha","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["js-aofs","harshavardhan-macha","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["js-aofs","harshavardhan-macha","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["js-aofs","harshavardhan-macha","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["js-aofs","harshavardhan-macha","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["js-aofs","harshavardhan-macha","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["js-aofs","harshavardhan-macha","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["js-aofs","harshavardhan-macha","categorise"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["js-aofs","harshavardhan-macha","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["js-aofs","harshavardhan-macha","categorise"],"duration":80,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","harshavardhan-macha","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["js-aofs","harshavardhan-macha","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["js-aofs","harshavardhan-macha","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["js-aofs","harshavardhan-macha","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["js-aofs","harshavardhan-macha","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["js-aofs","harshavardhan-macha","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["js-aofs","harshavardhan-macha","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["js-aofs","harshavardhan-macha","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["js-aofs","harshavardhan-macha","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["js-aofs","harshavardhan-macha","entries"],"duration":27,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","harshavardhan-macha","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["js-aofs","harshavardhan-macha","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["js-aofs","harshavardhan-macha","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["js-aofs","harshavardhan-macha","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["js-aofs","harshavardhan-macha","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["js-aofs","harshavardhan-macha","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["js-aofs","harshavardhan-macha","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["js-aofs","harshavardhan-macha","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["js-aofs","harshavardhan-macha","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["js-aofs","harshavardhan-macha","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["js-aofs","harshavardhan-macha","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["js-aofs","harshavardhan-macha","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["js-aofs","harshavardhan-macha","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["js-aofs","harshavardhan-macha","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["js-aofs","harshavardhan-macha","remove_adjacent_spaces"],"duration":61,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","harshavardhan-macha","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["js-aofs","harshavardhan-macha","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["js-aofs","harshavardhan-macha","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["js-aofs","harshavardhan-macha","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["js-aofs","harshavardhan-macha","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["js-aofs","harshavardhan-macha","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["js-aofs","harshavardhan-macha","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["js-aofs","harshavardhan-macha","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["js-aofs","harshavardhan-macha","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["js-aofs","harshavardhan-macha","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["js-aofs","harshavardhan-macha","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["js-aofs","harshavardhan-macha","tribonacci"],"duration":26,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","harshavardhan-macha","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","harshavardhan-macha","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["js-aofs","harshavardhan-macha","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["js-aofs","harshavardhan-macha","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["js-aofs","harshavardhan-macha","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","harshavardhan-macha","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","harshavardhan-macha","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","harshavardhan-macha","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["js-aofs","harshavardhan-macha","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","harshavardhan-macha","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["js-aofs","harshavardhan-macha","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","harshavardhan-macha","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","harshavardhan-macha","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","harshavardhan-macha","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","harshavardhan-macha","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","harshavardhan-macha","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["js-aofs","harshavardhan-macha","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["js-aofs","harshavardhan-macha","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","harshavardhan-macha","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["js-aofs","harshavardhan-macha","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["js-aofs","harshavardhan-macha","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["js-aofs","harshavardhan-macha","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["js-aofs","harshavardhan-macha","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha array_equals should log false when ARRAY_1=undefined and ARRAY_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=null"},{"ancestorTitles":["js-aofs","harshavardhan-macha","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha array_equals should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","harshavardhan-macha","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha array_equals should log false when ARRAY_1=[1] and ARRAY_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=[1] and ARRAY_2={0:1}"},{"ancestorTitles":["js-aofs","harshavardhan-macha","array_equals"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha array_equals should log false when ARRAY_1={0:1} and ARRAY_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1={0:1} and ARRAY_2=[1]"},{"ancestorTitles":["js-aofs","harshavardhan-macha","array_equals"],"duration":70,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","harshavardhan-macha","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","harshavardhan-macha","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","harshavardhan-macha","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","harshavardhan-macha","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","harshavardhan-macha","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","harshavardhan-macha","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","harshavardhan-macha","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","harshavardhan-macha","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","harshavardhan-macha","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","harshavardhan-macha","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["js-aofs","harshavardhan-macha","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","harshavardhan-macha","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","harshavardhan-macha","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["js-aofs","harshavardhan-macha","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["js-aofs","harshavardhan-macha","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["js-aofs","harshavardhan-macha","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["js-aofs","harshavardhan-macha","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["js-aofs","harshavardhan-macha","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha object_equals should log false when OBJECT_1=undefined and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=undefined and OBJECT_2={}"},{"ancestorTitles":["js-aofs","harshavardhan-macha","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha object_equals should log false when OBJECT_1={} and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={} and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","harshavardhan-macha","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha object_equals should log true when OBJECT_1=undefined and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=undefined and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","harshavardhan-macha","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha object_equals should log false when OBJECT_1=[1] and OBJECT_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=[1] and OBJECT_2={0:1}"},{"ancestorTitles":["js-aofs","harshavardhan-macha","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha object_equals should log false when OBJECT_1={0:1} and OBJECT_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={0:1} and OBJECT_2=[1]"},{"ancestorTitles":["js-aofs","harshavardhan-macha","object_equals"],"duration":69,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs harshavardhan-macha object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","hemeswar9849","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["js-aofs","hemeswar9849","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["js-aofs","hemeswar9849","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["js-aofs","hemeswar9849","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["js-aofs","hemeswar9849","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["js-aofs","hemeswar9849","even_odd"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["js-aofs","hemeswar9849","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["js-aofs","hemeswar9849","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["js-aofs","hemeswar9849","even_odd"],"duration":37,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","hemeswar9849","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["js-aofs","hemeswar9849","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["js-aofs","hemeswar9849","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["js-aofs","hemeswar9849","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["js-aofs","hemeswar9849","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["js-aofs","hemeswar9849","categorise"],"duration":21,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["js-aofs","hemeswar9849","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["js-aofs","hemeswar9849","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["js-aofs","hemeswar9849","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["js-aofs","hemeswar9849","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["js-aofs","hemeswar9849","categorise"],"duration":65,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","hemeswar9849","entries"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["js-aofs","hemeswar9849","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["js-aofs","hemeswar9849","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["js-aofs","hemeswar9849","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["js-aofs","hemeswar9849","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["js-aofs","hemeswar9849","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["js-aofs","hemeswar9849","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["js-aofs","hemeswar9849","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["js-aofs","hemeswar9849","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["js-aofs","hemeswar9849","entries"],"duration":35,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","hemeswar9849","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["js-aofs","hemeswar9849","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["js-aofs","hemeswar9849","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["js-aofs","hemeswar9849","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["js-aofs","hemeswar9849","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["js-aofs","hemeswar9849","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["js-aofs","hemeswar9849","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["js-aofs","hemeswar9849","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["js-aofs","hemeswar9849","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["js-aofs","hemeswar9849","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["js-aofs","hemeswar9849","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["js-aofs","hemeswar9849","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["js-aofs","hemeswar9849","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["js-aofs","hemeswar9849","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["js-aofs","hemeswar9849","remove_adjacent_spaces"],"duration":36,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","hemeswar9849","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["js-aofs","hemeswar9849","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["js-aofs","hemeswar9849","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["js-aofs","hemeswar9849","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["js-aofs","hemeswar9849","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["js-aofs","hemeswar9849","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["js-aofs","hemeswar9849","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["js-aofs","hemeswar9849","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["js-aofs","hemeswar9849","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["js-aofs","hemeswar9849","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["js-aofs","hemeswar9849","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["js-aofs","hemeswar9849","tribonacci"],"duration":34,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","hemeswar9849","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","hemeswar9849","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["js-aofs","hemeswar9849","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["js-aofs","hemeswar9849","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["js-aofs","hemeswar9849","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","hemeswar9849","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","hemeswar9849","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","hemeswar9849","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["js-aofs","hemeswar9849","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","hemeswar9849","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["js-aofs","hemeswar9849","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","hemeswar9849","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","hemeswar9849","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","hemeswar9849","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","hemeswar9849","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","hemeswar9849","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["js-aofs","hemeswar9849","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["js-aofs","hemeswar9849","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","hemeswar9849","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["js-aofs","hemeswar9849","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["js-aofs","hemeswar9849","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["js-aofs","hemeswar9849","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["js-aofs","hemeswar9849","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 array_equals should log false when ARRAY_1=undefined and ARRAY_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=null"},{"ancestorTitles":["js-aofs","hemeswar9849","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 array_equals should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","hemeswar9849","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 array_equals should log false when ARRAY_1=[1] and ARRAY_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=[1] and ARRAY_2={0:1}"},{"ancestorTitles":["js-aofs","hemeswar9849","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 array_equals should log false when ARRAY_1={0:1} and ARRAY_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1={0:1} and ARRAY_2=[1]"},{"ancestorTitles":["js-aofs","hemeswar9849","array_equals"],"duration":71,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","hemeswar9849","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","hemeswar9849","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","hemeswar9849","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","hemeswar9849","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","hemeswar9849","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","hemeswar9849","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","hemeswar9849","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","hemeswar9849","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","hemeswar9849","object_equals"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","hemeswar9849","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["js-aofs","hemeswar9849","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","hemeswar9849","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","hemeswar9849","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["js-aofs","hemeswar9849","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["js-aofs","hemeswar9849","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["js-aofs","hemeswar9849","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["js-aofs","hemeswar9849","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["js-aofs","hemeswar9849","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 object_equals should log false when OBJECT_1=undefined and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=undefined and OBJECT_2={}"},{"ancestorTitles":["js-aofs","hemeswar9849","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 object_equals should log false when OBJECT_1={} and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={} and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","hemeswar9849","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 object_equals should log true when OBJECT_1=undefined and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=undefined and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","hemeswar9849","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 object_equals should log false when OBJECT_1=[1] and OBJECT_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=[1] and OBJECT_2={0:1}"},{"ancestorTitles":["js-aofs","hemeswar9849","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 object_equals should log false when OBJECT_1={0:1} and OBJECT_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={0:1} and OBJECT_2=[1]"},{"ancestorTitles":["js-aofs","hemeswar9849","object_equals"],"duration":95,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs hemeswar9849 object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","jayanth-14","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["js-aofs","jayanth-14","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["js-aofs","jayanth-14","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["js-aofs","jayanth-14","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["js-aofs","jayanth-14","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["js-aofs","jayanth-14","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["js-aofs","jayanth-14","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["js-aofs","jayanth-14","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["js-aofs","jayanth-14","even_odd"],"duration":34,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","jayanth-14","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["js-aofs","jayanth-14","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["js-aofs","jayanth-14","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["js-aofs","jayanth-14","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["js-aofs","jayanth-14","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["js-aofs","jayanth-14","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["js-aofs","jayanth-14","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["js-aofs","jayanth-14","categorise"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["js-aofs","jayanth-14","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["js-aofs","jayanth-14","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["js-aofs","jayanth-14","categorise"],"duration":52,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","jayanth-14","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["js-aofs","jayanth-14","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["js-aofs","jayanth-14","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["js-aofs","jayanth-14","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["js-aofs","jayanth-14","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["js-aofs","jayanth-14","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["js-aofs","jayanth-14","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["js-aofs","jayanth-14","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["js-aofs","jayanth-14","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["js-aofs","jayanth-14","entries"],"duration":39,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","jayanth-14","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["js-aofs","jayanth-14","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["js-aofs","jayanth-14","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["js-aofs","jayanth-14","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["js-aofs","jayanth-14","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["js-aofs","jayanth-14","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["js-aofs","jayanth-14","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["js-aofs","jayanth-14","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["js-aofs","jayanth-14","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["js-aofs","jayanth-14","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["js-aofs","jayanth-14","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["js-aofs","jayanth-14","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["js-aofs","jayanth-14","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["js-aofs","jayanth-14","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["js-aofs","jayanth-14","remove_adjacent_spaces"],"duration":63,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","jayanth-14","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["js-aofs","jayanth-14","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["js-aofs","jayanth-14","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["js-aofs","jayanth-14","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["js-aofs","jayanth-14","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["js-aofs","jayanth-14","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["js-aofs","jayanth-14","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["js-aofs","jayanth-14","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["js-aofs","jayanth-14","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["js-aofs","jayanth-14","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["js-aofs","jayanth-14","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["js-aofs","jayanth-14","tribonacci"],"duration":35,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","jayanth-14","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","jayanth-14","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["js-aofs","jayanth-14","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["js-aofs","jayanth-14","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["js-aofs","jayanth-14","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","jayanth-14","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","jayanth-14","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","jayanth-14","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["js-aofs","jayanth-14","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","jayanth-14","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["js-aofs","jayanth-14","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","jayanth-14","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","jayanth-14","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","jayanth-14","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","jayanth-14","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","jayanth-14","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["js-aofs","jayanth-14","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["js-aofs","jayanth-14","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","jayanth-14","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["js-aofs","jayanth-14","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["js-aofs","jayanth-14","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["js-aofs","jayanth-14","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["js-aofs","jayanth-14","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 array_equals should log false when ARRAY_1=undefined and ARRAY_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=null"},{"ancestorTitles":["js-aofs","jayanth-14","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 array_equals should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","jayanth-14","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 array_equals should log false when ARRAY_1=[1] and ARRAY_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=[1] and ARRAY_2={0:1}"},{"ancestorTitles":["js-aofs","jayanth-14","array_equals"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 array_equals should log false when ARRAY_1={0:1} and ARRAY_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1={0:1} and ARRAY_2=[1]"},{"ancestorTitles":["js-aofs","jayanth-14","array_equals"],"duration":88,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","jayanth-14","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","jayanth-14","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","jayanth-14","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","jayanth-14","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","jayanth-14","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","jayanth-14","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","jayanth-14","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","jayanth-14","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","jayanth-14","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","jayanth-14","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["js-aofs","jayanth-14","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","jayanth-14","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","jayanth-14","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["js-aofs","jayanth-14","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["js-aofs","jayanth-14","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["js-aofs","jayanth-14","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["js-aofs","jayanth-14","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["js-aofs","jayanth-14","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 object_equals should log false when OBJECT_1=undefined and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=undefined and OBJECT_2={}"},{"ancestorTitles":["js-aofs","jayanth-14","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 object_equals should log false when OBJECT_1={} and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={} and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","jayanth-14","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 object_equals should log true when OBJECT_1=undefined and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=undefined and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","jayanth-14","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 object_equals should log false when OBJECT_1=[1] and OBJECT_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=[1] and OBJECT_2={0:1}"},{"ancestorTitles":["js-aofs","jayanth-14","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 object_equals should log false when OBJECT_1={0:1} and OBJECT_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={0:1} and OBJECT_2=[1]"},{"ancestorTitles":["js-aofs","jayanth-14","object_equals"],"duration":109,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs jayanth-14 object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","kumarnandeesh","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["js-aofs","kumarnandeesh","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["js-aofs","kumarnandeesh","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["js-aofs","kumarnandeesh","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["js-aofs","kumarnandeesh","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["js-aofs","kumarnandeesh","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["js-aofs","kumarnandeesh","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["js-aofs","kumarnandeesh","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["js-aofs","kumarnandeesh","even_odd"],"duration":37,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","kumarnandeesh","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["js-aofs","kumarnandeesh","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["js-aofs","kumarnandeesh","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["js-aofs","kumarnandeesh","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["js-aofs","kumarnandeesh","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["js-aofs","kumarnandeesh","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["js-aofs","kumarnandeesh","categorise"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["js-aofs","kumarnandeesh","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["js-aofs","kumarnandeesh","categorise"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["js-aofs","kumarnandeesh","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["js-aofs","kumarnandeesh","categorise"],"duration":69,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","kumarnandeesh","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["js-aofs","kumarnandeesh","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["js-aofs","kumarnandeesh","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["js-aofs","kumarnandeesh","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["js-aofs","kumarnandeesh","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["js-aofs","kumarnandeesh","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["js-aofs","kumarnandeesh","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["js-aofs","kumarnandeesh","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["js-aofs","kumarnandeesh","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["js-aofs","kumarnandeesh","entries"],"duration":33,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","kumarnandeesh","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["js-aofs","kumarnandeesh","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["js-aofs","kumarnandeesh","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["js-aofs","kumarnandeesh","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["js-aofs","kumarnandeesh","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["js-aofs","kumarnandeesh","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["js-aofs","kumarnandeesh","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["js-aofs","kumarnandeesh","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["js-aofs","kumarnandeesh","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["js-aofs","kumarnandeesh","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["js-aofs","kumarnandeesh","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["js-aofs","kumarnandeesh","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["js-aofs","kumarnandeesh","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["js-aofs","kumarnandeesh","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["js-aofs","kumarnandeesh","remove_adjacent_spaces"],"duration":61,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","kumarnandeesh","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["js-aofs","kumarnandeesh","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["js-aofs","kumarnandeesh","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["js-aofs","kumarnandeesh","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["js-aofs","kumarnandeesh","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["js-aofs","kumarnandeesh","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["js-aofs","kumarnandeesh","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["js-aofs","kumarnandeesh","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["js-aofs","kumarnandeesh","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["js-aofs","kumarnandeesh","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["js-aofs","kumarnandeesh","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["js-aofs","kumarnandeesh","tribonacci"],"duration":43,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","kumarnandeesh","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","kumarnandeesh","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["js-aofs","kumarnandeesh","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["js-aofs","kumarnandeesh","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["js-aofs","kumarnandeesh","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","kumarnandeesh","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","kumarnandeesh","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","kumarnandeesh","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["js-aofs","kumarnandeesh","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","kumarnandeesh","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["js-aofs","kumarnandeesh","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","kumarnandeesh","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","kumarnandeesh","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","kumarnandeesh","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","kumarnandeesh","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","kumarnandeesh","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["js-aofs","kumarnandeesh","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["js-aofs","kumarnandeesh","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","kumarnandeesh","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["js-aofs","kumarnandeesh","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["js-aofs","kumarnandeesh","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["js-aofs","kumarnandeesh","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["js-aofs","kumarnandeesh","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh array_equals should log false when ARRAY_1=undefined and ARRAY_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=null"},{"ancestorTitles":["js-aofs","kumarnandeesh","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh array_equals should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","kumarnandeesh","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh array_equals should log false when ARRAY_1=[1] and ARRAY_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=[1] and ARRAY_2={0:1}"},{"ancestorTitles":["js-aofs","kumarnandeesh","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh array_equals should log false when ARRAY_1={0:1} and ARRAY_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1={0:1} and ARRAY_2=[1]"},{"ancestorTitles":["js-aofs","kumarnandeesh","array_equals"],"duration":72,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","kumarnandeesh","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","kumarnandeesh","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","kumarnandeesh","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","kumarnandeesh","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","kumarnandeesh","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","kumarnandeesh","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","kumarnandeesh","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","kumarnandeesh","object_equals"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","kumarnandeesh","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","kumarnandeesh","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["js-aofs","kumarnandeesh","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","kumarnandeesh","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","kumarnandeesh","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["js-aofs","kumarnandeesh","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["js-aofs","kumarnandeesh","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["js-aofs","kumarnandeesh","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["js-aofs","kumarnandeesh","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["js-aofs","kumarnandeesh","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh object_equals should log false when OBJECT_1=undefined and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=undefined and OBJECT_2={}"},{"ancestorTitles":["js-aofs","kumarnandeesh","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh object_equals should log false when OBJECT_1={} and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={} and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","kumarnandeesh","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh object_equals should log true when OBJECT_1=undefined and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=undefined and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","kumarnandeesh","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh object_equals should log false when OBJECT_1=[1] and OBJECT_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=[1] and OBJECT_2={0:1}"},{"ancestorTitles":["js-aofs","kumarnandeesh","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs kumarnandeesh object_equals should log false when OBJECT_1={0:1} and OBJECT_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={0:1} and OBJECT_2=[1]"},{"ancestorTitles":["js-aofs","kumarnandeesh","object_equals"],"duration":75,"failureDetails":[{"matcherResult":{"actual":["'functionForObjEqual' was used before it was defined. File: js-aofs-kumarnandeesh/object_equals.js Line: 43"],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"'functionForObjEqual' was used before it was defined. File: js-aofs-kumarnandeesh/object_equals.js Line: 43\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"'functionForObjEqual' was used before it was defined. File: js-aofs-kumarnandeesh/object_equals.js Line: 43\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:79:30)"],"fullName":"js-aofs kumarnandeesh object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","mr-mouli03","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["js-aofs","mr-mouli03","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["js-aofs","mr-mouli03","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["js-aofs","mr-mouli03","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["js-aofs","mr-mouli03","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["js-aofs","mr-mouli03","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["js-aofs","mr-mouli03","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["js-aofs","mr-mouli03","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["js-aofs","mr-mouli03","even_odd"],"duration":44,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","mr-mouli03","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["js-aofs","mr-mouli03","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["js-aofs","mr-mouli03","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["js-aofs","mr-mouli03","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["js-aofs","mr-mouli03","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["js-aofs","mr-mouli03","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["js-aofs","mr-mouli03","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["js-aofs","mr-mouli03","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["js-aofs","mr-mouli03","categorise"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["js-aofs","mr-mouli03","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["js-aofs","mr-mouli03","categorise"],"duration":90,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","mr-mouli03","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["js-aofs","mr-mouli03","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["js-aofs","mr-mouli03","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["js-aofs","mr-mouli03","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["js-aofs","mr-mouli03","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["js-aofs","mr-mouli03","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["js-aofs","mr-mouli03","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["js-aofs","mr-mouli03","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["js-aofs","mr-mouli03","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["js-aofs","mr-mouli03","entries"],"duration":29,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","mr-mouli03","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["js-aofs","mr-mouli03","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["js-aofs","mr-mouli03","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["js-aofs","mr-mouli03","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["js-aofs","mr-mouli03","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["js-aofs","mr-mouli03","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["js-aofs","mr-mouli03","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["js-aofs","mr-mouli03","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["js-aofs","mr-mouli03","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["js-aofs","mr-mouli03","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["js-aofs","mr-mouli03","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["js-aofs","mr-mouli03","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["js-aofs","mr-mouli03","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["js-aofs","mr-mouli03","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["js-aofs","mr-mouli03","remove_adjacent_spaces"],"duration":50,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","mr-mouli03","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["js-aofs","mr-mouli03","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["js-aofs","mr-mouli03","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["js-aofs","mr-mouli03","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["js-aofs","mr-mouli03","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["js-aofs","mr-mouli03","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["js-aofs","mr-mouli03","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["js-aofs","mr-mouli03","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["js-aofs","mr-mouli03","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["js-aofs","mr-mouli03","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["js-aofs","mr-mouli03","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["js-aofs","mr-mouli03","tribonacci"],"duration":27,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","mr-mouli03","array_equals"],"duration":2,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:43\n  if (arrayChecker(arrayOne, arrayTwo) !== undefined) {\n  ^\n\nReferenceError: arrayChecker is not defined\n    at isArrayEqual (evalmachine.<anonymous>:43:3)\n    at evalmachine.<anonymous>:57:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)"],"fullName":"js-aofs mr-mouli03 array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","mr-mouli03","array_equals"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:43\n  if (arrayChecker(arrayOne, arrayTwo) !== undefined) {\n  ^\n\nReferenceError: arrayChecker is not defined\n    at isArrayEqual (evalmachine.<anonymous>:43:3)\n    at evalmachine.<anonymous>:57:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)"],"fullName":"js-aofs mr-mouli03 array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["js-aofs","mr-mouli03","array_equals"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:43\n  if (arrayChecker(arrayOne, arrayTwo) !== undefined) {\n  ^\n\nReferenceError: arrayChecker is not defined\n    at isArrayEqual (evalmachine.<anonymous>:43:3)\n    at evalmachine.<anonymous>:57:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)"],"fullName":"js-aofs mr-mouli03 array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["js-aofs","mr-mouli03","array_equals"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:43\n  if (arrayChecker(arrayOne, arrayTwo) !== undefined) {\n  ^\n\nReferenceError: arrayChecker is not defined\n    at isArrayEqual (evalmachine.<anonymous>:43:3)\n    at evalmachine.<anonymous>:57:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)"],"fullName":"js-aofs mr-mouli03 array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["js-aofs","mr-mouli03","array_equals"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:43\n  if (arrayChecker(arrayOne, arrayTwo) !== undefined) {\n  ^\n\nReferenceError: arrayChecker is not defined\n    at isArrayEqual (evalmachine.<anonymous>:43:3)\n    at evalmachine.<anonymous>:57:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)"],"fullName":"js-aofs mr-mouli03 array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","mr-mouli03","array_equals"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:43\n  if (arrayChecker(arrayOne, arrayTwo) !== undefined) {\n  ^\n\nReferenceError: arrayChecker is not defined\n    at isArrayEqual (evalmachine.<anonymous>:43:3)\n    at evalmachine.<anonymous>:57:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)"],"fullName":"js-aofs mr-mouli03 array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","mr-mouli03","array_equals"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:43\n  if (arrayChecker(arrayOne, arrayTwo) !== undefined) {\n  ^\n\nReferenceError: arrayChecker is not defined\n    at isArrayEqual (evalmachine.<anonymous>:43:3)\n    at evalmachine.<anonymous>:57:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)"],"fullName":"js-aofs mr-mouli03 array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","mr-mouli03","array_equals"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:43\n  if (arrayChecker(arrayOne, arrayTwo) !== undefined) {\n  ^\n\nReferenceError: arrayChecker is not defined\n    at isArrayEqual (evalmachine.<anonymous>:43:3)\n    at evalmachine.<anonymous>:57:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)"],"fullName":"js-aofs mr-mouli03 array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["js-aofs","mr-mouli03","array_equals"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:43\n  if (arrayChecker(arrayOne, arrayTwo) !== undefined) {\n  ^\n\nReferenceError: arrayChecker is not defined\n    at isArrayEqual (evalmachine.<anonymous>:43:3)\n    at evalmachine.<anonymous>:57:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)"],"fullName":"js-aofs mr-mouli03 array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","mr-mouli03","array_equals"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:43\n  if (arrayChecker(arrayOne, arrayTwo) !== undefined) {\n  ^\n\nReferenceError: arrayChecker is not defined\n    at isArrayEqual (evalmachine.<anonymous>:43:3)\n    at evalmachine.<anonymous>:57:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)"],"fullName":"js-aofs mr-mouli03 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["js-aofs","mr-mouli03","array_equals"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:43\n  if (arrayChecker(arrayOne, arrayTwo) !== undefined) {\n  ^\n\nReferenceError: arrayChecker is not defined\n    at isArrayEqual (evalmachine.<anonymous>:43:3)\n    at evalmachine.<anonymous>:57:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)"],"fullName":"js-aofs mr-mouli03 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","mr-mouli03","array_equals"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:43\n  if (arrayChecker(arrayOne, arrayTwo) !== undefined) {\n  ^\n\nReferenceError: arrayChecker is not defined\n    at isArrayEqual (evalmachine.<anonymous>:43:3)\n    at evalmachine.<anonymous>:57:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)"],"fullName":"js-aofs mr-mouli03 array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","mr-mouli03","array_equals"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:43\n  if (arrayChecker(arrayOne, arrayTwo) !== undefined) {\n  ^\n\nReferenceError: arrayChecker is not defined\n    at isArrayEqual (evalmachine.<anonymous>:43:3)\n    at evalmachine.<anonymous>:57:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)"],"fullName":"js-aofs mr-mouli03 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","mr-mouli03","array_equals"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:43\n  if (arrayChecker(arrayOne, arrayTwo) !== undefined) {\n  ^\n\nReferenceError: arrayChecker is not defined\n    at isArrayEqual (evalmachine.<anonymous>:43:3)\n    at evalmachine.<anonymous>:57:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)"],"fullName":"js-aofs mr-mouli03 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","mr-mouli03","array_equals"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:43\n  if (arrayChecker(arrayOne, arrayTwo) !== undefined) {\n  ^\n\nReferenceError: arrayChecker is not defined\n    at isArrayEqual (evalmachine.<anonymous>:43:3)\n    at evalmachine.<anonymous>:57:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)"],"fullName":"js-aofs mr-mouli03 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","mr-mouli03","array_equals"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:43\n  if (arrayChecker(arrayOne, arrayTwo) !== undefined) {\n  ^\n\nReferenceError: arrayChecker is not defined\n    at isArrayEqual (evalmachine.<anonymous>:43:3)\n    at evalmachine.<anonymous>:57:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)"],"fullName":"js-aofs mr-mouli03 array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["js-aofs","mr-mouli03","array_equals"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:43\n  if (arrayChecker(arrayOne, arrayTwo) !== undefined) {\n  ^\n\nReferenceError: arrayChecker is not defined\n    at isArrayEqual (evalmachine.<anonymous>:43:3)\n    at evalmachine.<anonymous>:57:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)"],"fullName":"js-aofs mr-mouli03 array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["js-aofs","mr-mouli03","array_equals"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:43\n  if (arrayChecker(arrayOne, arrayTwo) !== undefined) {\n  ^\n\nReferenceError: arrayChecker is not defined\n    at isArrayEqual (evalmachine.<anonymous>:43:3)\n    at evalmachine.<anonymous>:57:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)"],"fullName":"js-aofs mr-mouli03 array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","mr-mouli03","array_equals"],"duration":2,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:43\n  if (arrayChecker(arrayOne, arrayTwo) !== undefined) {\n  ^\n\nReferenceError: arrayChecker is not defined\n    at isArrayEqual (evalmachine.<anonymous>:43:3)\n    at evalmachine.<anonymous>:57:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)"],"fullName":"js-aofs mr-mouli03 array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["js-aofs","mr-mouli03","array_equals"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:43\n  if (arrayChecker(arrayOne, arrayTwo) !== undefined) {\n  ^\n\nReferenceError: arrayChecker is not defined\n    at isArrayEqual (evalmachine.<anonymous>:43:3)\n    at evalmachine.<anonymous>:57:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)"],"fullName":"js-aofs mr-mouli03 array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["js-aofs","mr-mouli03","array_equals"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:43\n  if (arrayChecker(arrayOne, arrayTwo) !== undefined) {\n  ^\n\nReferenceError: arrayChecker is not defined\n    at isArrayEqual (evalmachine.<anonymous>:43:3)\n    at evalmachine.<anonymous>:57:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)"],"fullName":"js-aofs mr-mouli03 array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when given two arrays are null"},{"ancestorTitles":["js-aofs","mr-mouli03","array_equals"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:43\n  if (arrayChecker(arrayOne, arrayTwo) !== undefined) {\n  ^\n\nReferenceError: arrayChecker is not defined\n    at isArrayEqual (evalmachine.<anonymous>:43:3)\n    at evalmachine.<anonymous>:57:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)"],"fullName":"js-aofs mr-mouli03 array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["js-aofs","mr-mouli03","array_equals"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:43\n  if (arrayChecker(arrayOne, arrayTwo) !== undefined) {\n  ^\n\nReferenceError: arrayChecker is not defined\n    at isArrayEqual (evalmachine.<anonymous>:43:3)\n    at evalmachine.<anonymous>:57:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)"],"fullName":"js-aofs mr-mouli03 array_equals should log false when ARRAY_1=undefined and ARRAY_2=null","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when ARRAY_1=undefined and ARRAY_2=null"},{"ancestorTitles":["js-aofs","mr-mouli03","array_equals"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:43\n  if (arrayChecker(arrayOne, arrayTwo) !== undefined) {\n  ^\n\nReferenceError: arrayChecker is not defined\n    at isArrayEqual (evalmachine.<anonymous>:43:3)\n    at evalmachine.<anonymous>:57:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)"],"fullName":"js-aofs mr-mouli03 array_equals should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","mr-mouli03","array_equals"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:43\n  if (arrayChecker(arrayOne, arrayTwo) !== undefined) {\n  ^\n\nReferenceError: arrayChecker is not defined\n    at isArrayEqual (evalmachine.<anonymous>:43:3)\n    at evalmachine.<anonymous>:57:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)"],"fullName":"js-aofs mr-mouli03 array_equals should log false when ARRAY_1=[1] and ARRAY_2={0:1}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when ARRAY_1=[1] and ARRAY_2={0:1}"},{"ancestorTitles":["js-aofs","mr-mouli03","array_equals"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:43\n  if (arrayChecker(arrayOne, arrayTwo) !== undefined) {\n  ^\n\nReferenceError: arrayChecker is not defined\n    at isArrayEqual (evalmachine.<anonymous>:43:3)\n    at evalmachine.<anonymous>:57:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)"],"fullName":"js-aofs mr-mouli03 array_equals should log false when ARRAY_1={0:1} and ARRAY_2=[1]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when ARRAY_1={0:1} and ARRAY_2=[1]"},{"ancestorTitles":["js-aofs","mr-mouli03","array_equals"],"duration":73,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","mr-mouli03","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","mr-mouli03","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","mr-mouli03","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","mr-mouli03","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","mr-mouli03","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","mr-mouli03","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","mr-mouli03","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","mr-mouli03","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","mr-mouli03","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","mr-mouli03","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["js-aofs","mr-mouli03","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","mr-mouli03","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","mr-mouli03","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["js-aofs","mr-mouli03","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["js-aofs","mr-mouli03","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["js-aofs","mr-mouli03","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["js-aofs","mr-mouli03","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["js-aofs","mr-mouli03","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 object_equals should log false when OBJECT_1=undefined and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=undefined and OBJECT_2={}"},{"ancestorTitles":["js-aofs","mr-mouli03","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 object_equals should log false when OBJECT_1={} and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={} and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","mr-mouli03","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 object_equals should log true when OBJECT_1=undefined and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=undefined and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","mr-mouli03","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 object_equals should log false when OBJECT_1=[1] and OBJECT_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=[1] and OBJECT_2={0:1}"},{"ancestorTitles":["js-aofs","mr-mouli03","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 object_equals should log false when OBJECT_1={0:1} and OBJECT_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={0:1} and OBJECT_2=[1]"},{"ancestorTitles":["js-aofs","mr-mouli03","object_equals"],"duration":78,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs mr-mouli03 object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","even_odd"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","even_odd"],"duration":30,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","categorise"],"duration":36,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","entries"],"duration":33,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","remove_adjacent_spaces"],"duration":26,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","tribonacci"],"duration":36,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla array_equals should log false when ARRAY_1=undefined and ARRAY_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=null"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla array_equals should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla array_equals should log false when ARRAY_1=[1] and ARRAY_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=[1] and ARRAY_2={0:1}"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla array_equals should log false when ARRAY_1={0:1} and ARRAY_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1={0:1} and ARRAY_2=[1]"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","array_equals"],"duration":52,"failureDetails":[{"matcherResult":{"actual":["This line has a length of 92. Maximum allowed is 80. File: js-aofs-naveen-kumar-vadla/array_equals.js Line: 37"],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"This line has a length of 92. Maximum allowed is 80. File: js-aofs-naveen-kumar-vadla/array_equals.js Line: 37\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 3\n\n- Array []\n+ Array [\n+   \"This line has a length of 92. Maximum allowed is 80. File: js-aofs-naveen-kumar-vadla/array_equals.js Line: 37\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:79:30)"],"fullName":"js-aofs naveen-kumar-vadla array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla object_equals should log false when OBJECT_1=undefined and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=undefined and OBJECT_2={}"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","object_equals"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:39\n  const object2Keys = Object.keys(object2);\n                             ^\n\nTypeError: Cannot convert undefined or null to object\n    at Function.keys (<anonymous>)\n    at areObjectsEqual (evalmachine.<anonymous>:39:30)\n    at evalmachine.<anonymous>:70:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)"],"fullName":"js-aofs naveen-kumar-vadla object_equals should log false when OBJECT_1={} and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={} and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla object_equals should log true when OBJECT_1=undefined and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=undefined and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","object_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[true],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs naveen-kumar-vadla object_equals should log false when OBJECT_1=[1] and OBJECT_2={0:1}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1=[1] and OBJECT_2={0:1}"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","object_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[true],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs naveen-kumar-vadla object_equals should log false when OBJECT_1={0:1} and OBJECT_2=[1]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={0:1} and OBJECT_2=[1]"},{"ancestorTitles":["js-aofs","naveen-kumar-vadla","object_equals"],"duration":77,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs naveen-kumar-vadla object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","nithindenkada","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["js-aofs","nithindenkada","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["js-aofs","nithindenkada","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["js-aofs","nithindenkada","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["js-aofs","nithindenkada","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["js-aofs","nithindenkada","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["js-aofs","nithindenkada","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["js-aofs","nithindenkada","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["js-aofs","nithindenkada","even_odd"],"duration":43,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","nithindenkada","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["js-aofs","nithindenkada","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["js-aofs","nithindenkada","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["js-aofs","nithindenkada","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["js-aofs","nithindenkada","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["js-aofs","nithindenkada","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["js-aofs","nithindenkada","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["js-aofs","nithindenkada","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["js-aofs","nithindenkada","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["js-aofs","nithindenkada","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["js-aofs","nithindenkada","categorise"],"duration":81,"failureDetails":[{"matcherResult":{"actual":["'sorting' was used before it was defined. File: js-aofs-nithindenkada/categorise.js Line: 31","Expected space(s) after \"while\". File: js-aofs-nithindenkada/categorise.js Line: 32","Expected space(s) after \"while\". File: js-aofs-nithindenkada/categorise.js Line: 34","Multiple spaces found before 'index'. File: js-aofs-nithindenkada/categorise.js Line: 35","This line has 2 statements. Maximum allowed is 1. File: js-aofs-nithindenkada/categorise.js Line: 35","'copyOfNumbers' is already declared in the upper scope on line 27 column 7. File: js-aofs-nithindenkada/categorise.js Line: 44","Missing whitespace after semicolon. File: js-aofs-nithindenkada/categorise.js Line: 45","Operator '<' must be spaced. File: js-aofs-nithindenkada/categorise.js Line: 45","Missing space before opening brace. File: js-aofs-nithindenkada/categorise.js Line: 45","This line has a length of 88. Maximum allowed is 80. File: js-aofs-nithindenkada/categorise.js Line: 46","Operator '+' must be spaced. File: js-aofs-nithindenkada/categorise.js Line: 46","Operator '<' must be spaced. File: js-aofs-nithindenkada/categorise.js Line: 46","Missing space before opening brace. File: js-aofs-nithindenkada/categorise.js Line: 46","'temporary' is never reassigned. Use 'const' instead. File: js-aofs-nithindenkada/categorise.js Line: 48"],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 16\n\n- Array []\n+ Array [\n+   \"'sorting' was used before it was defined. File: js-aofs-nithindenkada/categorise.js Line: 31\",\n+   \"Expected space(s) after \\\"while\\\". File: js-aofs-nithindenkada/categorise.js Line: 32\",\n+   \"Expected space(s) after \\\"while\\\". File: js-aofs-nithindenkada/categorise.js Line: 34\",\n+   \"Multiple spaces found before 'index'. File: js-aofs-nithindenkada/categorise.js Line: 35\",\n+   \"This line has 2 statements. Maximum allowed is 1. File: js-aofs-nithindenkada/categorise.js Line: 35\",\n+   \"'copyOfNumbers' is already declared in the upper scope on line 27 column 7. File: js-aofs-nithindenkada/categorise.js Line: 44\",\n+   \"Missing whitespace after semicolon. File: js-aofs-nithindenkada/categorise.js Line: 45\",\n+   \"Operator '<' must be spaced. File: js-aofs-nithindenkada/categorise.js Line: 45\",\n+   \"Missing space before opening brace. File: js-aofs-nithindenkada/categorise.js Line: 45\",\n+   \"This line has a length of 88. Maximum allowed is 80. File: js-aofs-nithindenkada/categorise.js Line: 46\",\n+   \"Operator '+' must be spaced. File: js-aofs-nithindenkada/categorise.js Line: 46\",\n+   \"Operator '<' must be spaced. File: js-aofs-nithindenkada/categorise.js Line: 46\",\n+   \"Missing space before opening brace. File: js-aofs-nithindenkada/categorise.js Line: 46\",\n+   \"'temporary' is never reassigned. Use 'const' instead. File: js-aofs-nithindenkada/categorise.js Line: 48\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 16\n\n- Array []\n+ Array [\n+   \"'sorting' was used before it was defined. File: js-aofs-nithindenkada/categorise.js Line: 31\",\n+   \"Expected space(s) after \\\"while\\\". File: js-aofs-nithindenkada/categorise.js Line: 32\",\n+   \"Expected space(s) after \\\"while\\\". File: js-aofs-nithindenkada/categorise.js Line: 34\",\n+   \"Multiple spaces found before 'index'. File: js-aofs-nithindenkada/categorise.js Line: 35\",\n+   \"This line has 2 statements. Maximum allowed is 1. File: js-aofs-nithindenkada/categorise.js Line: 35\",\n+   \"'copyOfNumbers' is already declared in the upper scope on line 27 column 7. File: js-aofs-nithindenkada/categorise.js Line: 44\",\n+   \"Missing whitespace after semicolon. File: js-aofs-nithindenkada/categorise.js Line: 45\",\n+   \"Operator '<' must be spaced. File: js-aofs-nithindenkada/categorise.js Line: 45\",\n+   \"Missing space before opening brace. File: js-aofs-nithindenkada/categorise.js Line: 45\",\n+   \"This line has a length of 88. Maximum allowed is 80. File: js-aofs-nithindenkada/categorise.js Line: 46\",\n+   \"Operator '+' must be spaced. File: js-aofs-nithindenkada/categorise.js Line: 46\",\n+   \"Operator '<' must be spaced. File: js-aofs-nithindenkada/categorise.js Line: 46\",\n+   \"Missing space before opening brace. File: js-aofs-nithindenkada/categorise.js Line: 46\",\n+   \"'temporary' is never reassigned. Use 'const' instead. File: js-aofs-nithindenkada/categorise.js Line: 48\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:79:30)"],"fullName":"js-aofs nithindenkada categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","nithindenkada","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["js-aofs","nithindenkada","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["js-aofs","nithindenkada","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["js-aofs","nithindenkada","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["js-aofs","nithindenkada","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["js-aofs","nithindenkada","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["js-aofs","nithindenkada","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["js-aofs","nithindenkada","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["js-aofs","nithindenkada","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["js-aofs","nithindenkada","entries"],"duration":34,"failureDetails":[{"matcherResult":{"actual":["Trailing spaces not allowed. File: js-aofs-nithindenkada/entries.js Line: 6","Expected space(s) after \"for\". File: js-aofs-nithindenkada/entries.js Line: 26"],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Trailing spaces not allowed. File: js-aofs-nithindenkada/entries.js Line: 6\",\n+   \"Expected space(s) after \\\"for\\\". File: js-aofs-nithindenkada/entries.js Line: 26\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 4\n\n- Array []\n+ Array [\n+   \"Trailing spaces not allowed. File: js-aofs-nithindenkada/entries.js Line: 6\",\n+   \"Expected space(s) after \\\"for\\\". File: js-aofs-nithindenkada/entries.js Line: 26\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:79:30)"],"fullName":"js-aofs nithindenkada entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","nithindenkada","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["js-aofs","nithindenkada","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["js-aofs","nithindenkada","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["js-aofs","nithindenkada","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["js-aofs","nithindenkada","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["js-aofs","nithindenkada","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["js-aofs","nithindenkada","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["js-aofs","nithindenkada","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["js-aofs","nithindenkada","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["js-aofs","nithindenkada","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["js-aofs","nithindenkada","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["js-aofs","nithindenkada","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["js-aofs","nithindenkada","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["js-aofs","nithindenkada","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["js-aofs","nithindenkada","remove_adjacent_spaces"],"duration":76,"failureDetails":[{"matcherResult":{"actual":["Trailing spaces not allowed. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 3","Trailing spaces not allowed. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 5","More than 1 blank line not allowed. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 30","Function has too many lines (26). Maximum allowed is 15. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 31","Unexpected whitespace before semicolon. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 35","There should be no space after this paren. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 36","There should be no space after this paren. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 39","Expected indentation of 6 spaces but found 8. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 40","Expected indentation of 6 spaces but found 8. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 41","Expected space(s) after \"if\". File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 46","Operator '-' must be spaced. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 49","Operator '-' must be spaced. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 50","There should be no space after this paren. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 52","Expected indentation of 0 spaces but found 1. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 56","Expected indentation of 0 spaces but found 1. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 57"],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 17\n\n- Array []\n+ Array [\n+   \"Trailing spaces not allowed. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 3\",\n+   \"Trailing spaces not allowed. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 5\",\n+   \"More than 1 blank line not allowed. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 30\",\n+   \"Function has too many lines (26). Maximum allowed is 15. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 31\",\n+   \"Unexpected whitespace before semicolon. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 35\",\n+   \"There should be no space after this paren. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 36\",\n+   \"There should be no space after this paren. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 39\",\n+   \"Expected indentation of 6 spaces but found 8. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 40\",\n+   \"Expected indentation of 6 spaces but found 8. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 41\",\n+   \"Expected space(s) after \\\"if\\\". File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 46\",\n+   \"Operator '-' must be spaced. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 49\",\n+   \"Operator '-' must be spaced. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 50\",\n+   \"There should be no space after this paren. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 52\",\n+   \"Expected indentation of 0 spaces but found 1. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 56\",\n+   \"Expected indentation of 0 spaces but found 1. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 57\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 17\n\n- Array []\n+ Array [\n+   \"Trailing spaces not allowed. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 3\",\n+   \"Trailing spaces not allowed. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 5\",\n+   \"More than 1 blank line not allowed. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 30\",\n+   \"Function has too many lines (26). Maximum allowed is 15. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 31\",\n+   \"Unexpected whitespace before semicolon. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 35\",\n+   \"There should be no space after this paren. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 36\",\n+   \"There should be no space after this paren. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 39\",\n+   \"Expected indentation of 6 spaces but found 8. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 40\",\n+   \"Expected indentation of 6 spaces but found 8. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 41\",\n+   \"Expected space(s) after \\\"if\\\". File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 46\",\n+   \"Operator '-' must be spaced. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 49\",\n+   \"Operator '-' must be spaced. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 50\",\n+   \"There should be no space after this paren. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 52\",\n+   \"Expected indentation of 0 spaces but found 1. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 56\",\n+   \"Expected indentation of 0 spaces but found 1. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 57\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:79:30)"],"fullName":"js-aofs nithindenkada remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","nithindenkada","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["js-aofs","nithindenkada","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["js-aofs","nithindenkada","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["js-aofs","nithindenkada","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["js-aofs","nithindenkada","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["js-aofs","nithindenkada","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["js-aofs","nithindenkada","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["js-aofs","nithindenkada","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["js-aofs","nithindenkada","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["js-aofs","nithindenkada","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["js-aofs","nithindenkada","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["js-aofs","nithindenkada","tribonacci"],"duration":50,"failureDetails":[{"matcherResult":{"actual":["Trailing spaces not allowed. File: js-aofs-nithindenkada/tribonacci.js Line: 6","'number' is never reassigned. Use 'const' instead. File: js-aofs-nithindenkada/tribonacci.js Line: 22","Identifier 'number_1' is not in camel case. File: js-aofs-nithindenkada/tribonacci.js Line: 23","Identifier 'number_2' is not in camel case. File: js-aofs-nithindenkada/tribonacci.js Line: 24","Identifier 'number_3' is not in camel case. File: js-aofs-nithindenkada/tribonacci.js Line: 25","Identifier 'number_4' is not in camel case. File: js-aofs-nithindenkada/tribonacci.js Line: 26","Identifier 'number_1' is not in camel case. File: js-aofs-nithindenkada/tribonacci.js Line: 26","Identifier 'number_2' is not in camel case. File: js-aofs-nithindenkada/tribonacci.js Line: 26","Identifier 'number_3' is not in camel case. File: js-aofs-nithindenkada/tribonacci.js Line: 26","Assignment to function parameter 'number1'. File: js-aofs-nithindenkada/tribonacci.js Line: 34","Assignment to function parameter 'number2'. File: js-aofs-nithindenkada/tribonacci.js Line: 35","Assignment to function parameter 'number3'. File: js-aofs-nithindenkada/tribonacci.js Line: 36","Assignment to function parameter 'number4'. File: js-aofs-nithindenkada/tribonacci.js Line: 37","A space is required after ','. File: js-aofs-nithindenkada/tribonacci.js Line: 38","A space is required after ','. File: js-aofs-nithindenkada/tribonacci.js Line: 38","A space is required after ','. File: js-aofs-nithindenkada/tribonacci.js Line: 38","Expected indentation of 2 spaces but found 4. File: js-aofs-nithindenkada/tribonacci.js Line: 39","Unnecessary 'else' after 'return'. File: js-aofs-nithindenkada/tribonacci.js Line: 39","Expected indentation of 4 spaces but found 6. File: js-aofs-nithindenkada/tribonacci.js Line: 40","Expected indentation of 2 spaces but found 4. File: js-aofs-nithindenkada/tribonacci.js Line: 41","Expected indentation of 0 spaces but found 2. File: js-aofs-nithindenkada/tribonacci.js Line: 42"],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 23\n\n- Array []\n+ Array [\n+   \"Trailing spaces not allowed. File: js-aofs-nithindenkada/tribonacci.js Line: 6\",\n+   \"'number' is never reassigned. Use 'const' instead. File: js-aofs-nithindenkada/tribonacci.js Line: 22\",\n+   \"Identifier 'number_1' is not in camel case. File: js-aofs-nithindenkada/tribonacci.js Line: 23\",\n+   \"Identifier 'number_2' is not in camel case. File: js-aofs-nithindenkada/tribonacci.js Line: 24\",\n+   \"Identifier 'number_3' is not in camel case. File: js-aofs-nithindenkada/tribonacci.js Line: 25\",\n+   \"Identifier 'number_4' is not in camel case. File: js-aofs-nithindenkada/tribonacci.js Line: 26\",\n+   \"Identifier 'number_1' is not in camel case. File: js-aofs-nithindenkada/tribonacci.js Line: 26\",\n+   \"Identifier 'number_2' is not in camel case. File: js-aofs-nithindenkada/tribonacci.js Line: 26\",\n+   \"Identifier 'number_3' is not in camel case. File: js-aofs-nithindenkada/tribonacci.js Line: 26\",\n+   \"Assignment to function parameter 'number1'. File: js-aofs-nithindenkada/tribonacci.js Line: 34\",\n+   \"Assignment to function parameter 'number2'. File: js-aofs-nithindenkada/tribonacci.js Line: 35\",\n+   \"Assignment to function parameter 'number3'. File: js-aofs-nithindenkada/tribonacci.js Line: 36\",\n+   \"Assignment to function parameter 'number4'. File: js-aofs-nithindenkada/tribonacci.js Line: 37\",\n+   \"A space is required after ','. File: js-aofs-nithindenkada/tribonacci.js Line: 38\",\n+   \"A space is required after ','. File: js-aofs-nithindenkada/tribonacci.js Line: 38\",\n+   \"A space is required after ','. File: js-aofs-nithindenkada/tribonacci.js Line: 38\",\n+   \"Expected indentation of 2 spaces but found 4. File: js-aofs-nithindenkada/tribonacci.js Line: 39\",\n+   \"Unnecessary 'else' after 'return'. File: js-aofs-nithindenkada/tribonacci.js Line: 39\",\n+   \"Expected indentation of 4 spaces but found 6. File: js-aofs-nithindenkada/tribonacci.js Line: 40\",\n+   \"Expected indentation of 2 spaces but found 4. File: js-aofs-nithindenkada/tribonacci.js Line: 41\",\n+   \"Expected indentation of 0 spaces but found 2. File: js-aofs-nithindenkada/tribonacci.js Line: 42\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 23\n\n- Array []\n+ Array [\n+   \"Trailing spaces not allowed. File: js-aofs-nithindenkada/tribonacci.js Line: 6\",\n+   \"'number' is never reassigned. Use 'const' instead. File: js-aofs-nithindenkada/tribonacci.js Line: 22\",\n+   \"Identifier 'number_1' is not in camel case. File: js-aofs-nithindenkada/tribonacci.js Line: 23\",\n+   \"Identifier 'number_2' is not in camel case. File: js-aofs-nithindenkada/tribonacci.js Line: 24\",\n+   \"Identifier 'number_3' is not in camel case. File: js-aofs-nithindenkada/tribonacci.js Line: 25\",\n+   \"Identifier 'number_4' is not in camel case. File: js-aofs-nithindenkada/tribonacci.js Line: 26\",\n+   \"Identifier 'number_1' is not in camel case. File: js-aofs-nithindenkada/tribonacci.js Line: 26\",\n+   \"Identifier 'number_2' is not in camel case. File: js-aofs-nithindenkada/tribonacci.js Line: 26\",\n+   \"Identifier 'number_3' is not in camel case. File: js-aofs-nithindenkada/tribonacci.js Line: 26\",\n+   \"Assignment to function parameter 'number1'. File: js-aofs-nithindenkada/tribonacci.js Line: 34\",\n+   \"Assignment to function parameter 'number2'. File: js-aofs-nithindenkada/tribonacci.js Line: 35\",\n+   \"Assignment to function parameter 'number3'. File: js-aofs-nithindenkada/tribonacci.js Line: 36\",\n+   \"Assignment to function parameter 'number4'. File: js-aofs-nithindenkada/tribonacci.js Line: 37\",\n+   \"A space is required after ','. File: js-aofs-nithindenkada/tribonacci.js Line: 38\",\n+   \"A space is required after ','. File: js-aofs-nithindenkada/tribonacci.js Line: 38\",\n+   \"A space is required after ','. File: js-aofs-nithindenkada/tribonacci.js Line: 38\",\n+   \"Expected indentation of 2 spaces but found 4. File: js-aofs-nithindenkada/tribonacci.js Line: 39\",\n+   \"Unnecessary 'else' after 'return'. File: js-aofs-nithindenkada/tribonacci.js Line: 39\",\n+   \"Expected indentation of 4 spaces but found 6. File: js-aofs-nithindenkada/tribonacci.js Line: 40\",\n+   \"Expected indentation of 2 spaces but found 4. File: js-aofs-nithindenkada/tribonacci.js Line: 41\",\n+   \"Expected indentation of 0 spaces but found 2. File: js-aofs-nithindenkada/tribonacci.js Line: 42\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:79:30)"],"fullName":"js-aofs nithindenkada tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","nithindenkada","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","nithindenkada","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["js-aofs","nithindenkada","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["js-aofs","nithindenkada","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["js-aofs","nithindenkada","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","nithindenkada","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","nithindenkada","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","nithindenkada","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["js-aofs","nithindenkada","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","nithindenkada","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["js-aofs","nithindenkada","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","nithindenkada","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","nithindenkada","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","nithindenkada","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","nithindenkada","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","nithindenkada","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["js-aofs","nithindenkada","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["js-aofs","nithindenkada","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","nithindenkada","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["js-aofs","nithindenkada","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["js-aofs","nithindenkada","array_equals"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["js-aofs","nithindenkada","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["js-aofs","nithindenkada","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada array_equals should log false when ARRAY_1=undefined and ARRAY_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=null"},{"ancestorTitles":["js-aofs","nithindenkada","array_equals"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:34\n  if (array1.length != array2.length) {\n             ^\n\nTypeError: Cannot read properties of undefined (reading 'length')\n    at arrayEqualOrNot (evalmachine.<anonymous>:34:14)\n    at evalmachine.<anonymous>:48:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)"],"fullName":"js-aofs nithindenkada array_equals should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","nithindenkada","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada array_equals should log false when ARRAY_1=[1] and ARRAY_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=[1] and ARRAY_2={0:1}"},{"ancestorTitles":["js-aofs","nithindenkada","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada array_equals should log false when ARRAY_1={0:1} and ARRAY_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1={0:1} and ARRAY_2=[1]"},{"ancestorTitles":["js-aofs","nithindenkada","array_equals"],"duration":59,"failureDetails":[{"matcherResult":{"actual":["Trailing spaces not allowed. File: js-aofs-nithindenkada/array_equals.js Line: 10","Function has too many lines (18). Maximum allowed is 15. File: js-aofs-nithindenkada/array_equals.js Line: 30","A space is required after ','. File: js-aofs-nithindenkada/array_equals.js Line: 30","Operator '||' must be spaced. File: js-aofs-nithindenkada/array_equals.js Line: 31","Operator '===' must be spaced. File: js-aofs-nithindenkada/array_equals.js Line: 32","Expected '!==' and instead saw '!='. File: js-aofs-nithindenkada/array_equals.js Line: 34","There should be no space before this paren. File: js-aofs-nithindenkada/array_equals.js Line: 37","Unary word operator 'typeof' must be followed by whitespace. File: js-aofs-nithindenkada/array_equals.js Line: 38","Unary word operator 'typeof' must be followed by whitespace. File: js-aofs-nithindenkada/array_equals.js Line: 38","A space is required after ','. File: js-aofs-nithindenkada/array_equals.js Line: 39","Expected '!==' and instead saw '!='. File: js-aofs-nithindenkada/array_equals.js Line: 39","Expected indentation of 6 spaces but found 8. File: js-aofs-nithindenkada/array_equals.js Line: 43","Expected indentation of 4 spaces but found 6. File: js-aofs-nithindenkada/array_equals.js Line: 44","Trailing spaces not allowed. File: js-aofs-nithindenkada/array_equals.js Line: 44","Expected indentation of 2 spaces but found 4. File: js-aofs-nithindenkada/array_equals.js Line: 45","Expected indentation of 0 spaces but found 1. File: js-aofs-nithindenkada/array_equals.js Line: 47","A space is required after ','. File: js-aofs-nithindenkada/array_equals.js Line: 48"],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 19\n\n- Array []\n+ Array [\n+   \"Trailing spaces not allowed. File: js-aofs-nithindenkada/array_equals.js Line: 10\",\n+   \"Function has too many lines (18). Maximum allowed is 15. File: js-aofs-nithindenkada/array_equals.js Line: 30\",\n+   \"A space is required after ','. File: js-aofs-nithindenkada/array_equals.js Line: 30\",\n+   \"Operator '||' must be spaced. File: js-aofs-nithindenkada/array_equals.js Line: 31\",\n+   \"Operator '===' must be spaced. File: js-aofs-nithindenkada/array_equals.js Line: 32\",\n+   \"Expected '!==' and instead saw '!='. File: js-aofs-nithindenkada/array_equals.js Line: 34\",\n+   \"There should be no space before this paren. File: js-aofs-nithindenkada/array_equals.js Line: 37\",\n+   \"Unary word operator 'typeof' must be followed by whitespace. File: js-aofs-nithindenkada/array_equals.js Line: 38\",\n+   \"Unary word operator 'typeof' must be followed by whitespace. File: js-aofs-nithindenkada/array_equals.js Line: 38\",\n+   \"A space is required after ','. File: js-aofs-nithindenkada/array_equals.js Line: 39\",\n+   \"Expected '!==' and instead saw '!='. File: js-aofs-nithindenkada/array_equals.js Line: 39\",\n+   \"Expected indentation of 6 spaces but found 8. File: js-aofs-nithindenkada/array_equals.js Line: 43\",\n+   \"Expected indentation of 4 spaces but found 6. File: js-aofs-nithindenkada/array_equals.js Line: 44\",\n+   \"Trailing spaces not allowed. File: js-aofs-nithindenkada/array_equals.js Line: 44\",\n+   \"Expected indentation of 2 spaces but found 4. File: js-aofs-nithindenkada/array_equals.js Line: 45\",\n+   \"Expected indentation of 0 spaces but found 1. File: js-aofs-nithindenkada/array_equals.js Line: 47\",\n+   \"A space is required after ','. File: js-aofs-nithindenkada/array_equals.js Line: 48\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 19\n\n- Array []\n+ Array [\n+   \"Trailing spaces not allowed. File: js-aofs-nithindenkada/array_equals.js Line: 10\",\n+   \"Function has too many lines (18). Maximum allowed is 15. File: js-aofs-nithindenkada/array_equals.js Line: 30\",\n+   \"A space is required after ','. File: js-aofs-nithindenkada/array_equals.js Line: 30\",\n+   \"Operator '||' must be spaced. File: js-aofs-nithindenkada/array_equals.js Line: 31\",\n+   \"Operator '===' must be spaced. File: js-aofs-nithindenkada/array_equals.js Line: 32\",\n+   \"Expected '!==' and instead saw '!='. File: js-aofs-nithindenkada/array_equals.js Line: 34\",\n+   \"There should be no space before this paren. File: js-aofs-nithindenkada/array_equals.js Line: 37\",\n+   \"Unary word operator 'typeof' must be followed by whitespace. File: js-aofs-nithindenkada/array_equals.js Line: 38\",\n+   \"Unary word operator 'typeof' must be followed by whitespace. File: js-aofs-nithindenkada/array_equals.js Line: 38\",\n+   \"A space is required after ','. File: js-aofs-nithindenkada/array_equals.js Line: 39\",\n+   \"Expected '!==' and instead saw '!='. File: js-aofs-nithindenkada/array_equals.js Line: 39\",\n+   \"Expected indentation of 6 spaces but found 8. File: js-aofs-nithindenkada/array_equals.js Line: 43\",\n+   \"Expected indentation of 4 spaces but found 6. File: js-aofs-nithindenkada/array_equals.js Line: 44\",\n+   \"Trailing spaces not allowed. File: js-aofs-nithindenkada/array_equals.js Line: 44\",\n+   \"Expected indentation of 2 spaces but found 4. File: js-aofs-nithindenkada/array_equals.js Line: 45\",\n+   \"Expected indentation of 0 spaces but found 1. File: js-aofs-nithindenkada/array_equals.js Line: 47\",\n+   \"A space is required after ','. File: js-aofs-nithindenkada/array_equals.js Line: 48\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:79:30)"],"fullName":"js-aofs nithindenkada array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","nithindenkada","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","nithindenkada","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","nithindenkada","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","nithindenkada","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","nithindenkada","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","nithindenkada","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","nithindenkada","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","nithindenkada","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","nithindenkada","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","nithindenkada","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["js-aofs","nithindenkada","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","nithindenkada","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","nithindenkada","object_equals"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:38\n  let array_1 = Object.keys(obj1);\n                       ^\n\nTypeError: Cannot convert undefined or null to object\n    at Function.keys (<anonymous>)\n    at objectEqual (evalmachine.<anonymous>:38:24)\n    at objectEqual (evalmachine.<anonymous>:51:18)\n    at evalmachine.<anonymous>:34:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)"],"fullName":"js-aofs nithindenkada object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["js-aofs","nithindenkada","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["js-aofs","nithindenkada","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["js-aofs","nithindenkada","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithindenkada object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["js-aofs","nithindenkada","object_equals"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:38\n  let array_1 = Object.keys(obj1);\n                       ^\n\nTypeError: Cannot convert undefined or null to object\n    at Function.keys (<anonymous>)\n    at objectEqual (evalmachine.<anonymous>:38:24)\n    at evalmachine.<anonymous>:34:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)"],"fullName":"js-aofs nithindenkada object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["js-aofs","nithindenkada","object_equals"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:38\n  let array_1 = Object.keys(obj1);\n                       ^\n\nTypeError: Cannot convert undefined or null to object\n    at Function.keys (<anonymous>)\n    at objectEqual (evalmachine.<anonymous>:38:24)\n    at evalmachine.<anonymous>:34:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)"],"fullName":"js-aofs nithindenkada object_equals should log false when OBJECT_1=undefined and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1=undefined and OBJECT_2={}"},{"ancestorTitles":["js-aofs","nithindenkada","object_equals"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:39\n  let array_2 = Object.keys(obj2);\n                       ^\n\nTypeError: Cannot convert undefined or null to object\n    at Function.keys (<anonymous>)\n    at objectEqual (evalmachine.<anonymous>:39:24)\n    at evalmachine.<anonymous>:34:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)"],"fullName":"js-aofs nithindenkada object_equals should log false when OBJECT_1={} and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={} and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","nithindenkada","object_equals"],"duration":1,"failureDetails":[{}],"failureMessages":["evalmachine.<anonymous>:38\n  let array_1 = Object.keys(obj1);\n                       ^\n\nTypeError: Cannot convert undefined or null to object\n    at Function.keys (<anonymous>)\n    at objectEqual (evalmachine.<anonymous>:38:24)\n    at evalmachine.<anonymous>:34:13\n    at Script.runInContext (node:vm:133:12)\n    at Object.runInContext (/home/runner/work/test-suite/test-suite/test/test.js:38:33)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)"],"fullName":"js-aofs nithindenkada object_equals should log true when OBJECT_1=undefined and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log true when OBJECT_1=undefined and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","nithindenkada","object_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[true],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs nithindenkada object_equals should log false when OBJECT_1=[1] and OBJECT_2={0:1}","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1=[1] and OBJECT_2={0:1}"},{"ancestorTitles":["js-aofs","nithindenkada","object_equals"],"duration":1,"failureDetails":[{"matcherResult":{"actual":[true],"expected":[false],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Array [\n-   false,\n+   true,\n  ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:39:32)\n    at Promise.then.completed (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/runner/work/test-suite/test-suite/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/runner/work/test-suite/test-suite/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"js-aofs nithindenkada object_equals should log false when OBJECT_1={0:1} and OBJECT_2=[1]","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should log false when OBJECT_1={0:1} and OBJECT_2=[1]"},{"ancestorTitles":["js-aofs","nithindenkada","object_equals"],"duration":94,"failureDetails":[{"matcherResult":{"actual":["There should be no space before ','. File: js-aofs-nithindenkada/object_equals.js Line: 3","A space is required after ','. File: js-aofs-nithindenkada/object_equals.js Line: 3","Missing space before value for key 'd'. File: js-aofs-nithindenkada/object_equals.js Line: 3","A space is required after '{'. File: js-aofs-nithindenkada/object_equals.js Line: 3","Missing space before value for key 'b'. File: js-aofs-nithindenkada/object_equals.js Line: 3","A space is required after ','. File: js-aofs-nithindenkada/object_equals.js Line: 3","Missing space before value for key 'a'. File: js-aofs-nithindenkada/object_equals.js Line: 3","A space is required before '}'. File: js-aofs-nithindenkada/object_equals.js Line: 3","A space is required before '}'. File: js-aofs-nithindenkada/object_equals.js Line: 3","Missing space before value for key 'd'. File: js-aofs-nithindenkada/object_equals.js Line: 4","A space is required after '{'. File: js-aofs-nithindenkada/object_equals.js Line: 4","Missing space before value for key 'a'. File: js-aofs-nithindenkada/object_equals.js Line: 4","A space is required after ','. File: js-aofs-nithindenkada/object_equals.js Line: 4","Missing space before value for key 'b'. File: js-aofs-nithindenkada/object_equals.js Line: 4","A space is required before '}'. File: js-aofs-nithindenkada/object_equals.js Line: 4","A space is required before '}'. File: js-aofs-nithindenkada/object_equals.js Line: 4","Trailing spaces not allowed. File: js-aofs-nithindenkada/object_equals.js Line: 5","More than 1 blank line not allowed. File: js-aofs-nithindenkada/object_equals.js Line: 32","'objectEqual' was used before it was defined. File: js-aofs-nithindenkada/object_equals.js Line: 33","A space is required after ','. File: js-aofs-nithindenkada/object_equals.js Line: 33","Missing semicolon. File: js-aofs-nithindenkada/object_equals.js Line: 33","Expected a function expression. File: js-aofs-nithindenkada/object_equals.js Line: 35","Function 'objectEqual' has too many lines (25). Maximum allowed is 15. File: js-aofs-nithindenkada/object_equals.js Line: 35","A space is required after ','. File: js-aofs-nithindenkada/object_equals.js Line: 35","Block must not be padded by blank lines. File: js-aofs-nithindenkada/object_equals.js Line: 35","Trailing spaces not allowed. File: js-aofs-nithindenkada/object_equals.js Line: 36","Identifier 'array_1' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 37","'array_1' is never reassigned. Use 'const' instead. File: js-aofs-nithindenkada/object_equals.js Line: 37","Identifier 'array_2' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 38","'array_2' is never reassigned. Use 'const' instead. File: js-aofs-nithindenkada/object_equals.js Line: 38","Identifier 'array_1' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 39","Expected '!==' and instead saw '!='. File: js-aofs-nithindenkada/object_equals.js Line: 39","Identifier 'array_2' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 39","Expected indentation of 4 spaces but found 3. File: js-aofs-nithindenkada/object_equals.js Line: 40","Identifier 'array_1' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 42","Unexpected whitespace before semicolon. File: js-aofs-nithindenkada/object_equals.js Line: 42","Missing space before opening brace. File: js-aofs-nithindenkada/object_equals.js Line: 42","Expected indentation of 4 spaces but found 5. File: js-aofs-nithindenkada/object_equals.js Line: 43","Operator '<' must be spaced. File: js-aofs-nithindenkada/object_equals.js Line: 44","Identifier 'array_2' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 44","Identifier 'array_1' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 45","Identifier 'array_2' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 45","Identifier 'array_1' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 46","Identifier 'array_2' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 46","Closing curly brace does not appear on the same line as the subsequent block. File: js-aofs-nithindenkada/object_equals.js Line: 48","Expected indentation of 8 spaces but found 0. File: js-aofs-nithindenkada/object_equals.js Line: 48","Unary word operator 'typeof' must be followed by whitespace. File: js-aofs-nithindenkada/object_equals.js Line: 49","Identifier 'array_1' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 49","Operator '&&' must be spaced. File: js-aofs-nithindenkada/object_equals.js Line: 49","Unary word operator 'typeof' must be followed by whitespace. File: js-aofs-nithindenkada/object_equals.js Line: 49","Identifier 'array_2' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 49","Operator '===' must be spaced. File: js-aofs-nithindenkada/object_equals.js Line: 49","Identifier 'array_1' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 50","Identifier 'array_2' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 50","Missing semicolon. File: js-aofs-nithindenkada/object_equals.js Line: 50","Expected space(s) after \"if\". File: js-aofs-nithindenkada/object_equals.js Line: 54","Expected '===' and instead saw '=='. File: js-aofs-nithindenkada/object_equals.js Line: 54"],"expected":[],"message":"expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 59\n\n- Array []\n+ Array [\n+   \"There should be no space before ','. File: js-aofs-nithindenkada/object_equals.js Line: 3\",\n+   \"A space is required after ','. File: js-aofs-nithindenkada/object_equals.js Line: 3\",\n+   \"Missing space before value for key 'd'. File: js-aofs-nithindenkada/object_equals.js Line: 3\",\n+   \"A space is required after '{'. File: js-aofs-nithindenkada/object_equals.js Line: 3\",\n+   \"Missing space before value for key 'b'. File: js-aofs-nithindenkada/object_equals.js Line: 3\",\n+   \"A space is required after ','. File: js-aofs-nithindenkada/object_equals.js Line: 3\",\n+   \"Missing space before value for key 'a'. File: js-aofs-nithindenkada/object_equals.js Line: 3\",\n+   \"A space is required before '}'. File: js-aofs-nithindenkada/object_equals.js Line: 3\",\n+   \"A space is required before '}'. File: js-aofs-nithindenkada/object_equals.js Line: 3\",\n+   \"Missing space before value for key 'd'. File: js-aofs-nithindenkada/object_equals.js Line: 4\",\n+   \"A space is required after '{'. File: js-aofs-nithindenkada/object_equals.js Line: 4\",\n+   \"Missing space before value for key 'a'. File: js-aofs-nithindenkada/object_equals.js Line: 4\",\n+   \"A space is required after ','. File: js-aofs-nithindenkada/object_equals.js Line: 4\",\n+   \"Missing space before value for key 'b'. File: js-aofs-nithindenkada/object_equals.js Line: 4\",\n+   \"A space is required before '}'. File: js-aofs-nithindenkada/object_equals.js Line: 4\",\n+   \"A space is required before '}'. File: js-aofs-nithindenkada/object_equals.js Line: 4\",\n+   \"Trailing spaces not allowed. File: js-aofs-nithindenkada/object_equals.js Line: 5\",\n+   \"More than 1 blank line not allowed. File: js-aofs-nithindenkada/object_equals.js Line: 32\",\n+   \"'objectEqual' was used before it was defined. File: js-aofs-nithindenkada/object_equals.js Line: 33\",\n+   \"A space is required after ','. File: js-aofs-nithindenkada/object_equals.js Line: 33\",\n+   \"Missing semicolon. File: js-aofs-nithindenkada/object_equals.js Line: 33\",\n+   \"Expected a function expression. File: js-aofs-nithindenkada/object_equals.js Line: 35\",\n+   \"Function 'objectEqual' has too many lines (25). Maximum allowed is 15. File: js-aofs-nithindenkada/object_equals.js Line: 35\",\n+   \"A space is required after ','. File: js-aofs-nithindenkada/object_equals.js Line: 35\",\n+   \"Block must not be padded by blank lines. File: js-aofs-nithindenkada/object_equals.js Line: 35\",\n+   \"Trailing spaces not allowed. File: js-aofs-nithindenkada/object_equals.js Line: 36\",\n+   \"Identifier 'array_1' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 37\",\n+   \"'array_1' is never reassigned. Use 'const' instead. File: js-aofs-nithindenkada/object_equals.js Line: 37\",\n+   \"Identifier 'array_2' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 38\",\n+   \"'array_2' is never reassigned. Use 'const' instead. File: js-aofs-nithindenkada/object_equals.js Line: 38\",\n+   \"Identifier 'array_1' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 39\",\n+   \"Expected '!==' and instead saw '!='. File: js-aofs-nithindenkada/object_equals.js Line: 39\",\n+   \"Identifier 'array_2' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 39\",\n+   \"Expected indentation of 4 spaces but found 3. File: js-aofs-nithindenkada/object_equals.js Line: 40\",\n+   \"Identifier 'array_1' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 42\",\n+   \"Unexpected whitespace before semicolon. File: js-aofs-nithindenkada/object_equals.js Line: 42\",\n+   \"Missing space before opening brace. File: js-aofs-nithindenkada/object_equals.js Line: 42\",\n+   \"Expected indentation of 4 spaces but found 5. File: js-aofs-nithindenkada/object_equals.js Line: 43\",\n+   \"Operator '<' must be spaced. File: js-aofs-nithindenkada/object_equals.js Line: 44\",\n+   \"Identifier 'array_2' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 44\",\n+   \"Identifier 'array_1' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 45\",\n+   \"Identifier 'array_2' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 45\",\n+   \"Identifier 'array_1' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 46\",\n+   \"Identifier 'array_2' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 46\",\n+   \"Closing curly brace does not appear on the same line as the subsequent block. File: js-aofs-nithindenkada/object_equals.js Line: 48\",\n+   \"Expected indentation of 8 spaces but found 0. File: js-aofs-nithindenkada/object_equals.js Line: 48\",\n+   \"Unary word operator 'typeof' must be followed by whitespace. File: js-aofs-nithindenkada/object_equals.js Line: 49\",\n+   \"Identifier 'array_1' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 49\",\n+   \"Operator '&&' must be spaced. File: js-aofs-nithindenkada/object_equals.js Line: 49\",\n+   \"Unary word operator 'typeof' must be followed by whitespace. File: js-aofs-nithindenkada/object_equals.js Line: 49\",\n+   \"Identifier 'array_2' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 49\",\n+   \"Operator '===' must be spaced. File: js-aofs-nithindenkada/object_equals.js Line: 49\",\n+   \"Identifier 'array_1' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 50\",\n+   \"Identifier 'array_2' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 50\",\n+   \"Missing semicolon. File: js-aofs-nithindenkada/object_equals.js Line: 50\",\n+   \"Expected space(s) after \\\"if\\\". File: js-aofs-nithindenkada/object_equals.js Line: 54\",\n+   \"Expected '===' and instead saw '=='. File: js-aofs-nithindenkada/object_equals.js Line: 54\",\n+ ]","name":"toEqual","pass":false}}],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  -  1\n+ Received  + 59\n\n- Array []\n+ Array [\n+   \"There should be no space before ','. File: js-aofs-nithindenkada/object_equals.js Line: 3\",\n+   \"A space is required after ','. File: js-aofs-nithindenkada/object_equals.js Line: 3\",\n+   \"Missing space before value for key 'd'. File: js-aofs-nithindenkada/object_equals.js Line: 3\",\n+   \"A space is required after '{'. File: js-aofs-nithindenkada/object_equals.js Line: 3\",\n+   \"Missing space before value for key 'b'. File: js-aofs-nithindenkada/object_equals.js Line: 3\",\n+   \"A space is required after ','. File: js-aofs-nithindenkada/object_equals.js Line: 3\",\n+   \"Missing space before value for key 'a'. File: js-aofs-nithindenkada/object_equals.js Line: 3\",\n+   \"A space is required before '}'. File: js-aofs-nithindenkada/object_equals.js Line: 3\",\n+   \"A space is required before '}'. File: js-aofs-nithindenkada/object_equals.js Line: 3\",\n+   \"Missing space before value for key 'd'. File: js-aofs-nithindenkada/object_equals.js Line: 4\",\n+   \"A space is required after '{'. File: js-aofs-nithindenkada/object_equals.js Line: 4\",\n+   \"Missing space before value for key 'a'. File: js-aofs-nithindenkada/object_equals.js Line: 4\",\n+   \"A space is required after ','. File: js-aofs-nithindenkada/object_equals.js Line: 4\",\n+   \"Missing space before value for key 'b'. File: js-aofs-nithindenkada/object_equals.js Line: 4\",\n+   \"A space is required before '}'. File: js-aofs-nithindenkada/object_equals.js Line: 4\",\n+   \"A space is required before '}'. File: js-aofs-nithindenkada/object_equals.js Line: 4\",\n+   \"Trailing spaces not allowed. File: js-aofs-nithindenkada/object_equals.js Line: 5\",\n+   \"More than 1 blank line not allowed. File: js-aofs-nithindenkada/object_equals.js Line: 32\",\n+   \"'objectEqual' was used before it was defined. File: js-aofs-nithindenkada/object_equals.js Line: 33\",\n+   \"A space is required after ','. File: js-aofs-nithindenkada/object_equals.js Line: 33\",\n+   \"Missing semicolon. File: js-aofs-nithindenkada/object_equals.js Line: 33\",\n+   \"Expected a function expression. File: js-aofs-nithindenkada/object_equals.js Line: 35\",\n+   \"Function 'objectEqual' has too many lines (25). Maximum allowed is 15. File: js-aofs-nithindenkada/object_equals.js Line: 35\",\n+   \"A space is required after ','. File: js-aofs-nithindenkada/object_equals.js Line: 35\",\n+   \"Block must not be padded by blank lines. File: js-aofs-nithindenkada/object_equals.js Line: 35\",\n+   \"Trailing spaces not allowed. File: js-aofs-nithindenkada/object_equals.js Line: 36\",\n+   \"Identifier 'array_1' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 37\",\n+   \"'array_1' is never reassigned. Use 'const' instead. File: js-aofs-nithindenkada/object_equals.js Line: 37\",\n+   \"Identifier 'array_2' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 38\",\n+   \"'array_2' is never reassigned. Use 'const' instead. File: js-aofs-nithindenkada/object_equals.js Line: 38\",\n+   \"Identifier 'array_1' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 39\",\n+   \"Expected '!==' and instead saw '!='. File: js-aofs-nithindenkada/object_equals.js Line: 39\",\n+   \"Identifier 'array_2' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 39\",\n+   \"Expected indentation of 4 spaces but found 3. File: js-aofs-nithindenkada/object_equals.js Line: 40\",\n+   \"Identifier 'array_1' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 42\",\n+   \"Unexpected whitespace before semicolon. File: js-aofs-nithindenkada/object_equals.js Line: 42\",\n+   \"Missing space before opening brace. File: js-aofs-nithindenkada/object_equals.js Line: 42\",\n+   \"Expected indentation of 4 spaces but found 5. File: js-aofs-nithindenkada/object_equals.js Line: 43\",\n+   \"Operator '<' must be spaced. File: js-aofs-nithindenkada/object_equals.js Line: 44\",\n+   \"Identifier 'array_2' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 44\",\n+   \"Identifier 'array_1' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 45\",\n+   \"Identifier 'array_2' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 45\",\n+   \"Identifier 'array_1' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 46\",\n+   \"Identifier 'array_2' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 46\",\n+   \"Closing curly brace does not appear on the same line as the subsequent block. File: js-aofs-nithindenkada/object_equals.js Line: 48\",\n+   \"Expected indentation of 8 spaces but found 0. File: js-aofs-nithindenkada/object_equals.js Line: 48\",\n+   \"Unary word operator 'typeof' must be followed by whitespace. File: js-aofs-nithindenkada/object_equals.js Line: 49\",\n+   \"Identifier 'array_1' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 49\",\n+   \"Operator '&&' must be spaced. File: js-aofs-nithindenkada/object_equals.js Line: 49\",\n+   \"Unary word operator 'typeof' must be followed by whitespace. File: js-aofs-nithindenkada/object_equals.js Line: 49\",\n+   \"Identifier 'array_2' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 49\",\n+   \"Operator '===' must be spaced. File: js-aofs-nithindenkada/object_equals.js Line: 49\",\n+   \"Identifier 'array_1' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 50\",\n+   \"Identifier 'array_2' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 50\",\n+   \"Missing semicolon. File: js-aofs-nithindenkada/object_equals.js Line: 50\",\n+   \"Expected space(s) after \\\"if\\\". File: js-aofs-nithindenkada/object_equals.js Line: 54\",\n+   \"Expected '===' and instead saw '=='. File: js-aofs-nithindenkada/object_equals.js Line: 54\",\n+ ]\n    at Object.toEqual (/home/runner/work/test-suite/test-suite/test/test.js:79:30)"],"fullName":"js-aofs nithindenkada object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","nithish-29","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["js-aofs","nithish-29","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["js-aofs","nithish-29","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["js-aofs","nithish-29","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["js-aofs","nithish-29","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["js-aofs","nithish-29","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["js-aofs","nithish-29","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["js-aofs","nithish-29","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["js-aofs","nithish-29","even_odd"],"duration":43,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","nithish-29","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["js-aofs","nithish-29","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["js-aofs","nithish-29","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["js-aofs","nithish-29","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["js-aofs","nithish-29","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["js-aofs","nithish-29","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["js-aofs","nithish-29","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["js-aofs","nithish-29","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["js-aofs","nithish-29","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["js-aofs","nithish-29","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["js-aofs","nithish-29","categorise"],"duration":74,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","nithish-29","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["js-aofs","nithish-29","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["js-aofs","nithish-29","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["js-aofs","nithish-29","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["js-aofs","nithish-29","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["js-aofs","nithish-29","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["js-aofs","nithish-29","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["js-aofs","nithish-29","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["js-aofs","nithish-29","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["js-aofs","nithish-29","entries"],"duration":43,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","nithish-29","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["js-aofs","nithish-29","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["js-aofs","nithish-29","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["js-aofs","nithish-29","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["js-aofs","nithish-29","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["js-aofs","nithish-29","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["js-aofs","nithish-29","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["js-aofs","nithish-29","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["js-aofs","nithish-29","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["js-aofs","nithish-29","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["js-aofs","nithish-29","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["js-aofs","nithish-29","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["js-aofs","nithish-29","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["js-aofs","nithish-29","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["js-aofs","nithish-29","remove_adjacent_spaces"],"duration":55,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","nithish-29","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["js-aofs","nithish-29","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["js-aofs","nithish-29","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["js-aofs","nithish-29","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["js-aofs","nithish-29","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["js-aofs","nithish-29","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["js-aofs","nithish-29","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["js-aofs","nithish-29","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["js-aofs","nithish-29","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["js-aofs","nithish-29","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["js-aofs","nithish-29","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["js-aofs","nithish-29","tribonacci"],"duration":47,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","nithish-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","nithish-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["js-aofs","nithish-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["js-aofs","nithish-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["js-aofs","nithish-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","nithish-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","nithish-29","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","nithish-29","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["js-aofs","nithish-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","nithish-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["js-aofs","nithish-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","nithish-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","nithish-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","nithish-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","nithish-29","array_equals"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","nithish-29","array_equals"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["js-aofs","nithish-29","array_equals"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["js-aofs","nithish-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","nithish-29","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["js-aofs","nithish-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["js-aofs","nithish-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["js-aofs","nithish-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["js-aofs","nithish-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 array_equals should log false when ARRAY_1=undefined and ARRAY_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=null"},{"ancestorTitles":["js-aofs","nithish-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 array_equals should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","nithish-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 array_equals should log false when ARRAY_1=[1] and ARRAY_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=[1] and ARRAY_2={0:1}"},{"ancestorTitles":["js-aofs","nithish-29","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 array_equals should log false when ARRAY_1={0:1} and ARRAY_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1={0:1} and ARRAY_2=[1]"},{"ancestorTitles":["js-aofs","nithish-29","array_equals"],"duration":74,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","nithish-29","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","nithish-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","nithish-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","nithish-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","nithish-29","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","nithish-29","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","nithish-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","nithish-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","nithish-29","object_equals"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","nithish-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["js-aofs","nithish-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","nithish-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","nithish-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["js-aofs","nithish-29","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["js-aofs","nithish-29","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["js-aofs","nithish-29","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["js-aofs","nithish-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["js-aofs","nithish-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 object_equals should log false when OBJECT_1=undefined and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=undefined and OBJECT_2={}"},{"ancestorTitles":["js-aofs","nithish-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 object_equals should log false when OBJECT_1={} and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={} and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","nithish-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 object_equals should log true when OBJECT_1=undefined and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=undefined and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","nithish-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 object_equals should log false when OBJECT_1=[1] and OBJECT_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=[1] and OBJECT_2={0:1}"},{"ancestorTitles":["js-aofs","nithish-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 object_equals should log false when OBJECT_1={0:1} and OBJECT_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={0:1} and OBJECT_2=[1]"},{"ancestorTitles":["js-aofs","nithish-29","object_equals"],"duration":83,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs nithish-29 object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","omkardalu","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["js-aofs","omkardalu","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["js-aofs","omkardalu","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["js-aofs","omkardalu","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["js-aofs","omkardalu","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["js-aofs","omkardalu","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["js-aofs","omkardalu","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["js-aofs","omkardalu","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["js-aofs","omkardalu","even_odd"],"duration":50,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","omkardalu","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["js-aofs","omkardalu","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["js-aofs","omkardalu","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["js-aofs","omkardalu","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["js-aofs","omkardalu","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["js-aofs","omkardalu","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["js-aofs","omkardalu","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["js-aofs","omkardalu","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["js-aofs","omkardalu","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["js-aofs","omkardalu","categorise"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["js-aofs","omkardalu","categorise"],"duration":91,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","omkardalu","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["js-aofs","omkardalu","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["js-aofs","omkardalu","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["js-aofs","omkardalu","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["js-aofs","omkardalu","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["js-aofs","omkardalu","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["js-aofs","omkardalu","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["js-aofs","omkardalu","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["js-aofs","omkardalu","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["js-aofs","omkardalu","entries"],"duration":34,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","omkardalu","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["js-aofs","omkardalu","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["js-aofs","omkardalu","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["js-aofs","omkardalu","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["js-aofs","omkardalu","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["js-aofs","omkardalu","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["js-aofs","omkardalu","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["js-aofs","omkardalu","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["js-aofs","omkardalu","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["js-aofs","omkardalu","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["js-aofs","omkardalu","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["js-aofs","omkardalu","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["js-aofs","omkardalu","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["js-aofs","omkardalu","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["js-aofs","omkardalu","remove_adjacent_spaces"],"duration":66,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","omkardalu","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["js-aofs","omkardalu","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["js-aofs","omkardalu","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["js-aofs","omkardalu","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["js-aofs","omkardalu","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["js-aofs","omkardalu","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["js-aofs","omkardalu","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["js-aofs","omkardalu","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["js-aofs","omkardalu","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["js-aofs","omkardalu","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["js-aofs","omkardalu","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["js-aofs","omkardalu","tribonacci"],"duration":51,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","omkardalu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","omkardalu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["js-aofs","omkardalu","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["js-aofs","omkardalu","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["js-aofs","omkardalu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","omkardalu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","omkardalu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","omkardalu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["js-aofs","omkardalu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","omkardalu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["js-aofs","omkardalu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","omkardalu","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","omkardalu","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","omkardalu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","omkardalu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","omkardalu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["js-aofs","omkardalu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["js-aofs","omkardalu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","omkardalu","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["js-aofs","omkardalu","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["js-aofs","omkardalu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["js-aofs","omkardalu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["js-aofs","omkardalu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu array_equals should log false when ARRAY_1=undefined and ARRAY_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=null"},{"ancestorTitles":["js-aofs","omkardalu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu array_equals should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","omkardalu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu array_equals should log false when ARRAY_1=[1] and ARRAY_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=[1] and ARRAY_2={0:1}"},{"ancestorTitles":["js-aofs","omkardalu","array_equals"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu array_equals should log false when ARRAY_1={0:1} and ARRAY_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1={0:1} and ARRAY_2=[1]"},{"ancestorTitles":["js-aofs","omkardalu","array_equals"],"duration":64,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","omkardalu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","omkardalu","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","omkardalu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","omkardalu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","omkardalu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","omkardalu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","omkardalu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","omkardalu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","omkardalu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","omkardalu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["js-aofs","omkardalu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","omkardalu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","omkardalu","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["js-aofs","omkardalu","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["js-aofs","omkardalu","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["js-aofs","omkardalu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["js-aofs","omkardalu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["js-aofs","omkardalu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu object_equals should log false when OBJECT_1=undefined and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=undefined and OBJECT_2={}"},{"ancestorTitles":["js-aofs","omkardalu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu object_equals should log false when OBJECT_1={} and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={} and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","omkardalu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu object_equals should log true when OBJECT_1=undefined and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=undefined and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","omkardalu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu object_equals should log false when OBJECT_1=[1] and OBJECT_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=[1] and OBJECT_2={0:1}"},{"ancestorTitles":["js-aofs","omkardalu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu object_equals should log false when OBJECT_1={0:1} and OBJECT_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={0:1} and OBJECT_2=[1]"},{"ancestorTitles":["js-aofs","omkardalu","object_equals"],"duration":84,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs omkardalu object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","even_odd"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","even_odd"],"duration":49,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","categorise"],"duration":78,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","entries"],"duration":41,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","remove_adjacent_spaces"],"duration":59,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","tribonacci"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","tribonacci"],"duration":50,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 array_equals should log false when ARRAY_1=undefined and ARRAY_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=null"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 array_equals should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 array_equals should log false when ARRAY_1=[1] and ARRAY_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=[1] and ARRAY_2={0:1}"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 array_equals should log false when ARRAY_1={0:1} and ARRAY_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1={0:1} and ARRAY_2=[1]"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","array_equals"],"duration":71,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","object_equals"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 object_equals should log false when OBJECT_1=undefined and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=undefined and OBJECT_2={}"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 object_equals should log false when OBJECT_1={} and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={} and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 object_equals should log true when OBJECT_1=undefined and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=undefined and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 object_equals should log false when OBJECT_1=[1] and OBJECT_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=[1] and OBJECT_2={0:1}"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 object_equals should log false when OBJECT_1={0:1} and OBJECT_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={0:1} and OBJECT_2=[1]"},{"ancestorTitles":["js-aofs","sampathkumarreddy123","object_equals"],"duration":86,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sampathkumarreddy123 object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","siriBaratam","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["js-aofs","siriBaratam","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["js-aofs","siriBaratam","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["js-aofs","siriBaratam","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["js-aofs","siriBaratam","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["js-aofs","siriBaratam","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["js-aofs","siriBaratam","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["js-aofs","siriBaratam","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["js-aofs","siriBaratam","even_odd"],"duration":49,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","siriBaratam","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["js-aofs","siriBaratam","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["js-aofs","siriBaratam","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["js-aofs","siriBaratam","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["js-aofs","siriBaratam","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["js-aofs","siriBaratam","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["js-aofs","siriBaratam","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["js-aofs","siriBaratam","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["js-aofs","siriBaratam","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["js-aofs","siriBaratam","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["js-aofs","siriBaratam","categorise"],"duration":65,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","siriBaratam","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["js-aofs","siriBaratam","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["js-aofs","siriBaratam","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["js-aofs","siriBaratam","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["js-aofs","siriBaratam","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["js-aofs","siriBaratam","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["js-aofs","siriBaratam","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["js-aofs","siriBaratam","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["js-aofs","siriBaratam","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["js-aofs","siriBaratam","entries"],"duration":31,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","siriBaratam","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["js-aofs","siriBaratam","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["js-aofs","siriBaratam","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["js-aofs","siriBaratam","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["js-aofs","siriBaratam","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["js-aofs","siriBaratam","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["js-aofs","siriBaratam","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["js-aofs","siriBaratam","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["js-aofs","siriBaratam","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["js-aofs","siriBaratam","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["js-aofs","siriBaratam","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["js-aofs","siriBaratam","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["js-aofs","siriBaratam","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["js-aofs","siriBaratam","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["js-aofs","siriBaratam","remove_adjacent_spaces"],"duration":56,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","siriBaratam","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["js-aofs","siriBaratam","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["js-aofs","siriBaratam","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["js-aofs","siriBaratam","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["js-aofs","siriBaratam","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["js-aofs","siriBaratam","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["js-aofs","siriBaratam","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["js-aofs","siriBaratam","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["js-aofs","siriBaratam","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["js-aofs","siriBaratam","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["js-aofs","siriBaratam","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["js-aofs","siriBaratam","tribonacci"],"duration":48,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","siriBaratam","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","siriBaratam","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["js-aofs","siriBaratam","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["js-aofs","siriBaratam","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["js-aofs","siriBaratam","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","siriBaratam","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","siriBaratam","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","siriBaratam","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["js-aofs","siriBaratam","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","siriBaratam","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["js-aofs","siriBaratam","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","siriBaratam","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","siriBaratam","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","siriBaratam","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","siriBaratam","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","siriBaratam","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["js-aofs","siriBaratam","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["js-aofs","siriBaratam","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","siriBaratam","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["js-aofs","siriBaratam","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["js-aofs","siriBaratam","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["js-aofs","siriBaratam","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["js-aofs","siriBaratam","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam array_equals should log false when ARRAY_1=undefined and ARRAY_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=null"},{"ancestorTitles":["js-aofs","siriBaratam","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam array_equals should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","siriBaratam","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam array_equals should log false when ARRAY_1=[1] and ARRAY_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=[1] and ARRAY_2={0:1}"},{"ancestorTitles":["js-aofs","siriBaratam","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam array_equals should log false when ARRAY_1={0:1} and ARRAY_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1={0:1} and ARRAY_2=[1]"},{"ancestorTitles":["js-aofs","siriBaratam","array_equals"],"duration":83,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","siriBaratam","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","siriBaratam","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","siriBaratam","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","siriBaratam","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","siriBaratam","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","siriBaratam","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","siriBaratam","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","siriBaratam","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","siriBaratam","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","siriBaratam","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["js-aofs","siriBaratam","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","siriBaratam","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","siriBaratam","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["js-aofs","siriBaratam","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["js-aofs","siriBaratam","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["js-aofs","siriBaratam","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["js-aofs","siriBaratam","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["js-aofs","siriBaratam","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam object_equals should log false when OBJECT_1=undefined and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=undefined and OBJECT_2={}"},{"ancestorTitles":["js-aofs","siriBaratam","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam object_equals should log false when OBJECT_1={} and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={} and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","siriBaratam","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam object_equals should log true when OBJECT_1=undefined and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=undefined and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","siriBaratam","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam object_equals should log false when OBJECT_1=[1] and OBJECT_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=[1] and OBJECT_2={0:1}"},{"ancestorTitles":["js-aofs","siriBaratam","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam object_equals should log false when OBJECT_1={0:1} and OBJECT_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={0:1} and OBJECT_2=[1]"},{"ancestorTitles":["js-aofs","siriBaratam","object_equals"],"duration":82,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs siriBaratam object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","sohan-29","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["js-aofs","sohan-29","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["js-aofs","sohan-29","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["js-aofs","sohan-29","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["js-aofs","sohan-29","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["js-aofs","sohan-29","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["js-aofs","sohan-29","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["js-aofs","sohan-29","even_odd"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["js-aofs","sohan-29","even_odd"],"duration":43,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","sohan-29","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["js-aofs","sohan-29","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["js-aofs","sohan-29","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["js-aofs","sohan-29","categorise"],"duration":17,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["js-aofs","sohan-29","categorise"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["js-aofs","sohan-29","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["js-aofs","sohan-29","categorise"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["js-aofs","sohan-29","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["js-aofs","sohan-29","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["js-aofs","sohan-29","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["js-aofs","sohan-29","categorise"],"duration":86,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","sohan-29","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["js-aofs","sohan-29","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["js-aofs","sohan-29","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["js-aofs","sohan-29","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["js-aofs","sohan-29","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["js-aofs","sohan-29","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["js-aofs","sohan-29","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["js-aofs","sohan-29","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["js-aofs","sohan-29","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["js-aofs","sohan-29","entries"],"duration":38,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","sohan-29","remove_adjacent_spaces"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["js-aofs","sohan-29","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["js-aofs","sohan-29","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["js-aofs","sohan-29","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["js-aofs","sohan-29","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["js-aofs","sohan-29","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["js-aofs","sohan-29","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["js-aofs","sohan-29","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["js-aofs","sohan-29","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["js-aofs","sohan-29","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["js-aofs","sohan-29","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["js-aofs","sohan-29","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["js-aofs","sohan-29","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["js-aofs","sohan-29","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["js-aofs","sohan-29","remove_adjacent_spaces"],"duration":84,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","sohan-29","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["js-aofs","sohan-29","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["js-aofs","sohan-29","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["js-aofs","sohan-29","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["js-aofs","sohan-29","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["js-aofs","sohan-29","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["js-aofs","sohan-29","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["js-aofs","sohan-29","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["js-aofs","sohan-29","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["js-aofs","sohan-29","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["js-aofs","sohan-29","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["js-aofs","sohan-29","tribonacci"],"duration":43,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","sohan-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","sohan-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["js-aofs","sohan-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["js-aofs","sohan-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["js-aofs","sohan-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","sohan-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","sohan-29","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","sohan-29","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["js-aofs","sohan-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","sohan-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["js-aofs","sohan-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","sohan-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","sohan-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","sohan-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","sohan-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","sohan-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["js-aofs","sohan-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["js-aofs","sohan-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","sohan-29","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["js-aofs","sohan-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["js-aofs","sohan-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["js-aofs","sohan-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["js-aofs","sohan-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 array_equals should log false when ARRAY_1=undefined and ARRAY_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=null"},{"ancestorTitles":["js-aofs","sohan-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 array_equals should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","sohan-29","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 array_equals should log false when ARRAY_1=[1] and ARRAY_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=[1] and ARRAY_2={0:1}"},{"ancestorTitles":["js-aofs","sohan-29","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 array_equals should log false when ARRAY_1={0:1} and ARRAY_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1={0:1} and ARRAY_2=[1]"},{"ancestorTitles":["js-aofs","sohan-29","array_equals"],"duration":89,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","sohan-29","object_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","sohan-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","sohan-29","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","sohan-29","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","sohan-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","sohan-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","sohan-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","sohan-29","object_equals"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","sohan-29","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","sohan-29","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["js-aofs","sohan-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","sohan-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","sohan-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["js-aofs","sohan-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["js-aofs","sohan-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["js-aofs","sohan-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["js-aofs","sohan-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["js-aofs","sohan-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 object_equals should log false when OBJECT_1=undefined and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=undefined and OBJECT_2={}"},{"ancestorTitles":["js-aofs","sohan-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 object_equals should log false when OBJECT_1={} and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={} and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","sohan-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 object_equals should log true when OBJECT_1=undefined and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=undefined and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","sohan-29","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 object_equals should log false when OBJECT_1=[1] and OBJECT_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=[1] and OBJECT_2={0:1}"},{"ancestorTitles":["js-aofs","sohan-29","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 object_equals should log false when OBJECT_1={0:1} and OBJECT_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={0:1} and OBJECT_2=[1]"},{"ancestorTitles":["js-aofs","sohan-29","object_equals"],"duration":90,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs sohan-29 object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","suneethalokarapu","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["js-aofs","suneethalokarapu","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["js-aofs","suneethalokarapu","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["js-aofs","suneethalokarapu","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["js-aofs","suneethalokarapu","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["js-aofs","suneethalokarapu","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["js-aofs","suneethalokarapu","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["js-aofs","suneethalokarapu","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["js-aofs","suneethalokarapu","even_odd"],"duration":39,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","suneethalokarapu","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["js-aofs","suneethalokarapu","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["js-aofs","suneethalokarapu","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["js-aofs","suneethalokarapu","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["js-aofs","suneethalokarapu","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["js-aofs","suneethalokarapu","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["js-aofs","suneethalokarapu","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["js-aofs","suneethalokarapu","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["js-aofs","suneethalokarapu","categorise"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["js-aofs","suneethalokarapu","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["js-aofs","suneethalokarapu","categorise"],"duration":66,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","suneethalokarapu","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["js-aofs","suneethalokarapu","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["js-aofs","suneethalokarapu","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["js-aofs","suneethalokarapu","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["js-aofs","suneethalokarapu","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["js-aofs","suneethalokarapu","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["js-aofs","suneethalokarapu","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["js-aofs","suneethalokarapu","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["js-aofs","suneethalokarapu","entries"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["js-aofs","suneethalokarapu","entries"],"duration":35,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","suneethalokarapu","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["js-aofs","suneethalokarapu","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["js-aofs","suneethalokarapu","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["js-aofs","suneethalokarapu","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["js-aofs","suneethalokarapu","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["js-aofs","suneethalokarapu","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["js-aofs","suneethalokarapu","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["js-aofs","suneethalokarapu","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["js-aofs","suneethalokarapu","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["js-aofs","suneethalokarapu","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["js-aofs","suneethalokarapu","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["js-aofs","suneethalokarapu","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["js-aofs","suneethalokarapu","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["js-aofs","suneethalokarapu","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["js-aofs","suneethalokarapu","remove_adjacent_spaces"],"duration":59,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","suneethalokarapu","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["js-aofs","suneethalokarapu","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["js-aofs","suneethalokarapu","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["js-aofs","suneethalokarapu","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["js-aofs","suneethalokarapu","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["js-aofs","suneethalokarapu","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["js-aofs","suneethalokarapu","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["js-aofs","suneethalokarapu","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["js-aofs","suneethalokarapu","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["js-aofs","suneethalokarapu","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["js-aofs","suneethalokarapu","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["js-aofs","suneethalokarapu","tribonacci"],"duration":31,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","suneethalokarapu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","suneethalokarapu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["js-aofs","suneethalokarapu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["js-aofs","suneethalokarapu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["js-aofs","suneethalokarapu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","suneethalokarapu","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","suneethalokarapu","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","suneethalokarapu","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["js-aofs","suneethalokarapu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","suneethalokarapu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["js-aofs","suneethalokarapu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","suneethalokarapu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","suneethalokarapu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","suneethalokarapu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","suneethalokarapu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","suneethalokarapu","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["js-aofs","suneethalokarapu","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["js-aofs","suneethalokarapu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","suneethalokarapu","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["js-aofs","suneethalokarapu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["js-aofs","suneethalokarapu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["js-aofs","suneethalokarapu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["js-aofs","suneethalokarapu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu array_equals should log false when ARRAY_1=undefined and ARRAY_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=null"},{"ancestorTitles":["js-aofs","suneethalokarapu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu array_equals should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","suneethalokarapu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu array_equals should log false when ARRAY_1=[1] and ARRAY_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=[1] and ARRAY_2={0:1}"},{"ancestorTitles":["js-aofs","suneethalokarapu","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu array_equals should log false when ARRAY_1={0:1} and ARRAY_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1={0:1} and ARRAY_2=[1]"},{"ancestorTitles":["js-aofs","suneethalokarapu","array_equals"],"duration":57,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","suneethalokarapu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","suneethalokarapu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","suneethalokarapu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","suneethalokarapu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","suneethalokarapu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","suneethalokarapu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","suneethalokarapu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","suneethalokarapu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","suneethalokarapu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","suneethalokarapu","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["js-aofs","suneethalokarapu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","suneethalokarapu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","suneethalokarapu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["js-aofs","suneethalokarapu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["js-aofs","suneethalokarapu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["js-aofs","suneethalokarapu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["js-aofs","suneethalokarapu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["js-aofs","suneethalokarapu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu object_equals should log false when OBJECT_1=undefined and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=undefined and OBJECT_2={}"},{"ancestorTitles":["js-aofs","suneethalokarapu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu object_equals should log false when OBJECT_1={} and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={} and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","suneethalokarapu","object_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu object_equals should log true when OBJECT_1=undefined and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=undefined and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","suneethalokarapu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu object_equals should log false when OBJECT_1=[1] and OBJECT_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=[1] and OBJECT_2={0:1}"},{"ancestorTitles":["js-aofs","suneethalokarapu","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu object_equals should log false when OBJECT_1={0:1} and OBJECT_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={0:1} and OBJECT_2=[1]"},{"ancestorTitles":["js-aofs","suneethalokarapu","object_equals"],"duration":63,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs suneethalokarapu object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","umarfarook07","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 even_odd should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [0, 1, 2, 3, 4, 5]"},{"ancestorTitles":["js-aofs","umarfarook07","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 even_odd should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = [-5, -4, -3, -2, -1, 0]"},{"ancestorTitles":["js-aofs","umarfarook07","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 even_odd should print object with even, odd numbers when NUMBERS = []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS = []"},{"ancestorTitles":["js-aofs","umarfarook07","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 even_odd should print object with even, odd numbers when NUMBERS contains only even numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only even numbers"},{"ancestorTitles":["js-aofs","umarfarook07","even_odd"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 even_odd should print object with even, odd numbers when NUMBERS contains only odd numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains only odd numbers"},{"ancestorTitles":["js-aofs","umarfarook07","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 even_odd should print object with even, odd numbers when NUMBERS contains single even number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single even number"},{"ancestorTitles":["js-aofs","umarfarook07","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 even_odd should print object with even, odd numbers when NUMBERS contains single odd number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains single odd number"},{"ancestorTitles":["js-aofs","umarfarook07","even_odd"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 even_odd should print object with even, odd numbers when NUMBERS contains duplicates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print object with even, odd numbers when NUMBERS contains duplicates"},{"ancestorTitles":["js-aofs","umarfarook07","even_odd"],"duration":50,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 even_odd should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","umarfarook07","categorise"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 categorise should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS = [1, 2, 1, 2, 3, 1, 2]"},{"ancestorTitles":["js-aofs","umarfarook07","categorise"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 categorise should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all unique values [5, 4, 3, 2, 1]"},{"ancestorTitles":["js-aofs","umarfarook07","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 categorise should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with all identical values [7, 7, 7, 7]"},{"ancestorTitles":["js-aofs","umarfarook07","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 categorise should group by value NUMBERS is an empty array []","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an empty array []"},{"ancestorTitles":["js-aofs","umarfarook07","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 categorise should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with mixed positive an negative numbers [1, -1, 2, -2, 1, -1]"},{"ancestorTitles":["js-aofs","umarfarook07","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 categorise should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with zeros [0, 1, 0, 2, 0]"},{"ancestorTitles":["js-aofs","umarfarook07","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 categorise should group by value NUMBERS is an array with large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large numbers"},{"ancestorTitles":["js-aofs","umarfarook07","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 categorise should group by value NUMBERS is an array with single element [7]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with single element [7]"},{"ancestorTitles":["js-aofs","umarfarook07","categorise"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 categorise should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with consecutive repetitive number [2, 2, 2, 3, 4, 4, 4]"},{"ancestorTitles":["js-aofs","umarfarook07","categorise"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 categorise should group by value NUMBERS is an array with large no.of elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should group by value NUMBERS is an array with large no.of elements"},{"ancestorTitles":["js-aofs","umarfarook07","categorise"],"duration":101,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 categorise should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","umarfarook07","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 entries should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT={name: 'Raju', occupation: 'Developer'}"},{"ancestorTitles":["js-aofs","umarfarook07","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 entries should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT contains numeric keys OBJECT={1: 'a', 2: 'b', 3: 'c'}"},{"ancestorTitles":["js-aofs","umarfarook07","entries"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 entries should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has boolean values OBJECT={isActive: true, isVerified: false}"},{"ancestorTitles":["js-aofs","umarfarook07","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 entries should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has nested objects OBJECT={user: {name: 'Raju', age: 30}, role: 'Developer'}"},{"ancestorTitles":["js-aofs","umarfarook07","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 entries should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has array values OBJECT={topics: ['HTML', 'CSS', 'JavaScript'], title: 'Web Design'}"},{"ancestorTitles":["js-aofs","umarfarook07","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 entries should provide entries for when OBJECT is empty OBJECT={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is empty OBJECT={}"},{"ancestorTitles":["js-aofs","umarfarook07","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 entries should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has undefined values OBJECT={name: 'Raju', age: undefined}"},{"ancestorTitles":["js-aofs","umarfarook07","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 entries should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT has null values OBJECT={name: 'Raju', age: null}"},{"ancestorTitles":["js-aofs","umarfarook07","entries"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 entries should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide entries for when OBJECT is an object with special characters in keys OBJECT={first-name: 'Raju', 'last name': 'Singh'}"},{"ancestorTitles":["js-aofs","umarfarook07","entries"],"duration":38,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 entries should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","umarfarook07","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 remove_adjacent_spaces should remove extra spaces when TEXT contains only 1 extra space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only 1 extra space"},{"ancestorTitles":["js-aofs","umarfarook07","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 remove_adjacent_spaces should remove extra spaces when TEXT contains multiple extra spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains multiple extra spaces"},{"ancestorTitles":["js-aofs","umarfarook07","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 remove_adjacent_spaces should remove extra spaces when TEXT contains only space","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT contains only space"},{"ancestorTitles":["js-aofs","umarfarook07","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 remove_adjacent_spaces should remove extra spaces when TEXT is empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is empty string"},{"ancestorTitles":["js-aofs","umarfarook07","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 remove_adjacent_spaces should remove extra spaces when TEXT is a single word","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single word"},{"ancestorTitles":["js-aofs","umarfarook07","remove_adjacent_spaces"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 remove_adjacent_spaces should remove extra spaces when TEXT is a single character","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is a single character"},{"ancestorTitles":["js-aofs","umarfarook07","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 remove_adjacent_spaces should remove extra spaces when TEXT has no spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has no spaces"},{"ancestorTitles":["js-aofs","umarfarook07","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 remove_adjacent_spaces should remove extra spaces when TEXT has leading spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has leading spaces"},{"ancestorTitles":["js-aofs","umarfarook07","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 remove_adjacent_spaces should remove extra spaces when TEXT  has leading & trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT  has leading & trailing spaces"},{"ancestorTitles":["js-aofs","umarfarook07","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 remove_adjacent_spaces should remove extra spaces when TEXT has trailing spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has trailing spaces"},{"ancestorTitles":["js-aofs","umarfarook07","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & tabs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & tabs"},{"ancestorTitles":["js-aofs","umarfarook07","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 remove_adjacent_spaces should remove extra spaces when TEXT has mixed spaces & newlines","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT has mixed spaces & newlines"},{"ancestorTitles":["js-aofs","umarfarook07","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 remove_adjacent_spaces should remove extra spaces when TEXT is numeric string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is numeric string with spaces"},{"ancestorTitles":["js-aofs","umarfarook07","remove_adjacent_spaces"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 remove_adjacent_spaces should remove extra spaces when TEXT is multi lingual string with spaces","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should remove extra spaces when TEXT is multi lingual string with spaces"},{"ancestorTitles":["js-aofs","umarfarook07","remove_adjacent_spaces"],"duration":68,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 remove_adjacent_spaces should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","umarfarook07","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 tribonacci should print the sequence for ENDING_RANGE=7","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=7"},{"ancestorTitles":["js-aofs","umarfarook07","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 tribonacci should print the sequence for ENDING_RANGE=24","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=24"},{"ancestorTitles":["js-aofs","umarfarook07","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 tribonacci should print the sequence for ENDING_RANGE=100","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=100"},{"ancestorTitles":["js-aofs","umarfarook07","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 tribonacci should print the sequence for ENDING_RANGE=300","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=300"},{"ancestorTitles":["js-aofs","umarfarook07","tribonacci"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 tribonacci should print the sequence for ENDING_RANGE=2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=2"},{"ancestorTitles":["js-aofs","umarfarook07","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 tribonacci should print the sequence for ENDING_RANGE=1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=1"},{"ancestorTitles":["js-aofs","umarfarook07","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 tribonacci should print the sequence for ENDING_RANGE=0","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=0"},{"ancestorTitles":["js-aofs","umarfarook07","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 tribonacci should print the sequence for ENDING_RANGE=-1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-1"},{"ancestorTitles":["js-aofs","umarfarook07","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 tribonacci should print the sequence for ENDING_RANGE=-2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-2"},{"ancestorTitles":["js-aofs","umarfarook07","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 tribonacci should print the sequence for ENDING_RANGE=-10","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence for ENDING_RANGE=-10"},{"ancestorTitles":["js-aofs","umarfarook07","tribonacci"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 tribonacci should print the sequence when ENDING_RANGE is a larger number","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should print the sequence when ENDING_RANGE is a larger number"},{"ancestorTitles":["js-aofs","umarfarook07","tribonacci"],"duration":38,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 tribonacci should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","umarfarook07","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 array_equals should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","umarfarook07","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 array_equals should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]"},{"ancestorTitles":["js-aofs","umarfarook07","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 array_equals should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]"},{"ancestorTitles":["js-aofs","umarfarook07","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 array_equals should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]"},{"ancestorTitles":["js-aofs","umarfarook07","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 array_equals should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","umarfarook07","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 array_equals should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]"},{"ancestorTitles":["js-aofs","umarfarook07","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 array_equals should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","umarfarook07","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 array_equals should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]"},{"ancestorTitles":["js-aofs","umarfarook07","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 array_equals should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","umarfarook07","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]"},{"ancestorTitles":["js-aofs","umarfarook07","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 array_equals should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]"},{"ancestorTitles":["js-aofs","umarfarook07","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 array_equals should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","umarfarook07","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","umarfarook07","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]"},{"ancestorTitles":["js-aofs","umarfarook07","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 array_equals should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]"},{"ancestorTitles":["js-aofs","umarfarook07","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 array_equals should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]"},{"ancestorTitles":["js-aofs","umarfarook07","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 array_equals should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]"},{"ancestorTitles":["js-aofs","umarfarook07","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 array_equals should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","umarfarook07","array_equals"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 array_equals should log true when given two very large arrays with same data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two very large arrays with same data"},{"ancestorTitles":["js-aofs","umarfarook07","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 array_equals should log false when given two very large arrays with different data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when given two very large arrays with different data"},{"ancestorTitles":["js-aofs","umarfarook07","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 array_equals should log true when given two arrays are null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two arrays are null"},{"ancestorTitles":["js-aofs","umarfarook07","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 array_equals should log true when given two deep arrays are equal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when given two deep arrays are equal"},{"ancestorTitles":["js-aofs","umarfarook07","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 array_equals should log false when ARRAY_1=undefined and ARRAY_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=null"},{"ancestorTitles":["js-aofs","umarfarook07","array_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 array_equals should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]"},{"ancestorTitles":["js-aofs","umarfarook07","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 array_equals should log false when ARRAY_1=[1] and ARRAY_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1=[1] and ARRAY_2={0:1}"},{"ancestorTitles":["js-aofs","umarfarook07","array_equals"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 array_equals should log false when ARRAY_1={0:1} and ARRAY_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when ARRAY_1={0:1} and ARRAY_2=[1]"},{"ancestorTitles":["js-aofs","umarfarook07","array_equals"],"duration":55,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 array_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"},{"ancestorTitles":["js-aofs","umarfarook07","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 object_equals should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","umarfarook07","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 object_equals should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","umarfarook07","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 object_equals should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","umarfarook07","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 object_equals should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","umarfarook07","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 object_equals should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}"},{"ancestorTitles":["js-aofs","umarfarook07","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 object_equals should log true when OBJECT_1={} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","umarfarook07","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}"},{"ancestorTitles":["js-aofs","umarfarook07","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 object_equals should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","umarfarook07","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 object_equals should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}"},{"ancestorTitles":["js-aofs","umarfarook07","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 object_equals should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}"},{"ancestorTitles":["js-aofs","umarfarook07","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 object_equals should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","umarfarook07","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 object_equals should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}"},{"ancestorTitles":["js-aofs","umarfarook07","object_equals"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 object_equals should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}"},{"ancestorTitles":["js-aofs","umarfarook07","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 object_equals should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}"},{"ancestorTitles":["js-aofs","umarfarook07","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}"},{"ancestorTitles":["js-aofs","umarfarook07","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 object_equals should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}"},{"ancestorTitles":["js-aofs","umarfarook07","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 object_equals should log true when OBJECT_1=null and OBJECT_2=null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=null and OBJECT_2=null"},{"ancestorTitles":["js-aofs","umarfarook07","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 object_equals should log false when OBJECT_1=undefined and OBJECT_2={}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=undefined and OBJECT_2={}"},{"ancestorTitles":["js-aofs","umarfarook07","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 object_equals should log false when OBJECT_1={} and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={} and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","umarfarook07","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 object_equals should log true when OBJECT_1=undefined and OBJECT_2=undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log true when OBJECT_1=undefined and OBJECT_2=undefined"},{"ancestorTitles":["js-aofs","umarfarook07","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 object_equals should log false when OBJECT_1=[1] and OBJECT_2={0:1}","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1=[1] and OBJECT_2={0:1}"},{"ancestorTitles":["js-aofs","umarfarook07","object_equals"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 object_equals should log false when OBJECT_1={0:1} and OBJECT_2=[1]","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log false when OBJECT_1={0:1} and OBJECT_2=[1]"},{"ancestorTitles":["js-aofs","umarfarook07","object_equals"],"duration":79,"failureDetails":[],"failureMessages":[],"fullName":"js-aofs umarfarook07 object_equals should follow coding conventions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should follow coding conventions"}],"endTime":1727189117192,"message":"  ● js-aofs › Amarendra7062 › categorise › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 5\n\n    - Array []\n    + Array [\n    +   \"Expected indentation of 0 spaces but found 2. File: js-aofs-Amarendra7062/categorise.js Line: 25\",\n    +   \"'sorting' was used before it was defined. File: js-aofs-Amarendra7062/categorise.js Line: 27\",\n    +   \"Trailing spaces not allowed. File: js-aofs-Amarendra7062/categorise.js Line: 48\",\n    + ]\n\n    \u001b[0m \u001b[90m 77 |\u001b[39m               )\n     \u001b[90m 78 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 79 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 80 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 81 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 82 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:79:30)\n\n  ● js-aofs › Amarendra7062 › remove_adjacent_spaces › should remove extra spaces when TEXT contains only 1 extra space\n\n    evalmachine.<anonymous>:36\n           empty.push(char);\n                 ^\n\n    TypeError: empty.push is not a function\n\n      at spacecheck (evalmachine.<anonymous>:36:14)\n      at removeextraSpaces (evalmachine.<anonymous>:45:5)\n      at evalmachine.<anonymous>:51:15\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › Amarendra7062 › remove_adjacent_spaces › should remove extra spaces when TEXT contains multiple extra spaces\n\n    evalmachine.<anonymous>:36\n           empty.push(char);\n                 ^\n\n    TypeError: empty.push is not a function\n\n      at spacecheck (evalmachine.<anonymous>:36:14)\n      at removeextraSpaces (evalmachine.<anonymous>:45:5)\n      at evalmachine.<anonymous>:51:15\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › Amarendra7062 › remove_adjacent_spaces › should remove extra spaces when TEXT contains only space\n\n    evalmachine.<anonymous>:36\n           empty.push(char);\n                 ^\n\n    TypeError: empty.push is not a function\n\n      at spacecheck (evalmachine.<anonymous>:36:14)\n      at removeextraSpaces (evalmachine.<anonymous>:45:5)\n      at evalmachine.<anonymous>:51:15\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › Amarendra7062 › remove_adjacent_spaces › should remove extra spaces when TEXT is empty string\n\n    evalmachine.<anonymous>:36\n           empty.push(char);\n                 ^\n\n    TypeError: empty.push is not a function\n\n      at spacecheck (evalmachine.<anonymous>:36:14)\n      at removeextraSpaces (evalmachine.<anonymous>:45:5)\n      at evalmachine.<anonymous>:51:15\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › Amarendra7062 › remove_adjacent_spaces › should remove extra spaces when TEXT is a single word\n\n    evalmachine.<anonymous>:36\n           empty.push(char);\n                 ^\n\n    TypeError: empty.push is not a function\n\n      at spacecheck (evalmachine.<anonymous>:36:14)\n      at removeextraSpaces (evalmachine.<anonymous>:45:5)\n      at evalmachine.<anonymous>:51:15\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › Amarendra7062 › remove_adjacent_spaces › should remove extra spaces when TEXT is a single character\n\n    evalmachine.<anonymous>:36\n           empty.push(char);\n                 ^\n\n    TypeError: empty.push is not a function\n\n      at spacecheck (evalmachine.<anonymous>:36:14)\n      at removeextraSpaces (evalmachine.<anonymous>:45:5)\n      at evalmachine.<anonymous>:51:15\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › Amarendra7062 › remove_adjacent_spaces › should remove extra spaces when TEXT has no spaces\n\n    evalmachine.<anonymous>:36\n           empty.push(char);\n                 ^\n\n    TypeError: empty.push is not a function\n\n      at spacecheck (evalmachine.<anonymous>:36:14)\n      at removeextraSpaces (evalmachine.<anonymous>:45:5)\n      at evalmachine.<anonymous>:51:15\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › Amarendra7062 › remove_adjacent_spaces › should remove extra spaces when TEXT has leading spaces\n\n    evalmachine.<anonymous>:36\n           empty.push(char);\n                 ^\n\n    TypeError: empty.push is not a function\n\n      at spacecheck (evalmachine.<anonymous>:36:14)\n      at removeextraSpaces (evalmachine.<anonymous>:45:5)\n      at evalmachine.<anonymous>:51:15\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › Amarendra7062 › remove_adjacent_spaces › should remove extra spaces when TEXT  has leading & trailing spaces\n\n    evalmachine.<anonymous>:36\n           empty.push(char);\n                 ^\n\n    TypeError: empty.push is not a function\n\n      at spacecheck (evalmachine.<anonymous>:36:14)\n      at removeextraSpaces (evalmachine.<anonymous>:45:5)\n      at evalmachine.<anonymous>:51:15\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › Amarendra7062 › remove_adjacent_spaces › should remove extra spaces when TEXT has trailing spaces\n\n    evalmachine.<anonymous>:36\n           empty.push(char);\n                 ^\n\n    TypeError: empty.push is not a function\n\n      at spacecheck (evalmachine.<anonymous>:36:14)\n      at removeextraSpaces (evalmachine.<anonymous>:45:5)\n      at evalmachine.<anonymous>:51:15\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › Amarendra7062 › remove_adjacent_spaces › should remove extra spaces when TEXT has mixed spaces & tabs\n\n    evalmachine.<anonymous>:36\n           empty.push(char);\n                 ^\n\n    TypeError: empty.push is not a function\n\n      at spacecheck (evalmachine.<anonymous>:36:14)\n      at removeextraSpaces (evalmachine.<anonymous>:45:5)\n      at evalmachine.<anonymous>:51:15\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › Amarendra7062 › remove_adjacent_spaces › should remove extra spaces when TEXT has mixed spaces & newlines\n\n    evalmachine.<anonymous>:60\n           empty.push(char);\n                 ^\n\n    TypeError: empty.push is not a function\n\n      at spacecheck (evalmachine.<anonymous>:60:14)\n      at removeextraSpaces (evalmachine.<anonymous>:69:5)\n      at evalmachine.<anonymous>:75:15\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › Amarendra7062 › remove_adjacent_spaces › should remove extra spaces when TEXT is numeric string with spaces\n\n    evalmachine.<anonymous>:36\n           empty.push(char);\n                 ^\n\n    TypeError: empty.push is not a function\n\n      at spacecheck (evalmachine.<anonymous>:36:14)\n      at removeextraSpaces (evalmachine.<anonymous>:45:5)\n      at evalmachine.<anonymous>:51:15\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › Amarendra7062 › remove_adjacent_spaces › should remove extra spaces when TEXT is multi lingual string with spaces\n\n    evalmachine.<anonymous>:36\n           empty.push(char);\n                 ^\n\n    TypeError: empty.push is not a function\n\n      at spacecheck (evalmachine.<anonymous>:36:14)\n      at removeextraSpaces (evalmachine.<anonymous>:45:5)\n      at evalmachine.<anonymous>:51:15\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › Amarendra7062 › remove_adjacent_spaces › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  -  1\n    + Received  + 31\n\n    - Array []\n    + Array [\n    +   \"Expected indentation of 0 spaces but found 1. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 2\",\n    +   \"Strings must use singlequote. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 2\",\n    +   \"Expected indentation of 0 spaces but found 1. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 3\",\n    +   \"Trailing spaces not allowed. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 5\",\n    +   \"Expected indentation of 0 spaces but found 1. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 29\",\n    +   \"Expected indentation of 0 spaces but found 1. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 30\",\n    +   \"Expected indentation of 0 spaces but found 1. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 31\",\n    +   \"Expected indentation of 2 spaces but found 4. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 32\",\n    +   \"Expected indentation of 4 spaces but found 6. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 33\",\n    +   \"Expected indentation of 4 spaces but found 6. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 34\",\n    +   \"Expected indentation of 6 spaces but found 7. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 35\",\n    +   \"Expected indentation of 4 spaces but found 6. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 36\",\n    +   \"Expected indentation of 4 spaces but found 6. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 37\",\n    +   \"'value' is constant. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 37\",\n    +   \"Expected indentation of 2 spaces but found 4. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 38\",\n    +   \"Expected indentation of 0 spaces but found 2. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 39\",\n    +   \"Expected indentation of 0 spaces but found 2. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 40\",\n    +   \"Expected indentation of 2 spaces but found 4. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 41\",\n    +   \"Expected indentation of 4 spaces but found 6. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 42\",\n    +   \"'value' is constant. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 42\",\n    +   \"Expected indentation of 2 spaces but found 4. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 43\",\n    +   \"Expected indentation of 2 spaces but found 4. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 44\",\n    +   \"Expected indentation of 2 spaces but found 4. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 45\",\n    +   \"Expected indentation of 4 spaces but found 6. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 46\",\n    +   \"Expected indentation of 2 spaces but found 4. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 47\",\n    +   \"Expected indentation of 2 spaces but found 4. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 48\",\n    +   \"Expected indentation of 0 spaces but found 2. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 49\",\n    +   \"Expected indentation of 0 spaces but found 2. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 50\",\n    +   \"Newline required at end of file but not found. File: js-aofs-Amarendra7062/remove_adjacent_spaces.js Line: 50\",\n    + ]\n\n    \u001b[0m \u001b[90m 77 |\u001b[39m               )\n     \u001b[90m 78 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 79 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 80 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 81 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 82 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:79:30)\n\n  ● js-aofs › Amarendra7062 › array_equals › should log true when given two arrays are null\n\n    evalmachine.<anonymous>:33\n      if (arrayOne.length !== arrayTwo.length) {\n                   ^\n\n    TypeError: Cannot read properties of null (reading 'length')\n\n      at arrayEqual (evalmachine.<anonymous>:33:16)\n      at evalmachine.<anonymous>:63:15\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › Amarendra7062 › array_equals › should log false when ARRAY_1=undefined and ARRAY_2=null\n\n    evalmachine.<anonymous>:33\n      if (arrayOne.length !== arrayTwo.length) {\n                   ^\n\n    TypeError: Cannot read properties of undefined (reading 'length')\n\n      at arrayEqual (evalmachine.<anonymous>:33:16)\n      at evalmachine.<anonymous>:63:15\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › Amarendra7062 › array_equals › should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]\n\n    evalmachine.<anonymous>:33\n      if (arrayOne.length !== arrayTwo.length) {\n                   ^\n\n    TypeError: Cannot read properties of undefined (reading 'length')\n\n      at arrayEqual (evalmachine.<anonymous>:33:16)\n      at evalmachine.<anonymous>:63:15\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › Amarendra7062 › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  -  1\n    + Received  + 15\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (16). Maximum allowed is 15. File: js-aofs-Amarendra7062/array_equals.js Line: 32\",\n    +   \"Expected indentation of 2 spaces but found 3. File: js-aofs-Amarendra7062/array_equals.js Line: 36\",\n    +   \"Expected indentation of 4 spaces but found 5. File: js-aofs-Amarendra7062/array_equals.js Line: 37\",\n    +   \"Closing curly brace does not appear on the same line as the subsequent block. File: js-aofs-Amarendra7062/array_equals.js Line: 41\",\n    +   \"Expected indentation of 4 spaces but found 5. File: js-aofs-Amarendra7062/array_equals.js Line: 42\",\n    +   \"Expected indentation of 6 spaces but found 7. File: js-aofs-Amarendra7062/array_equals.js Line: 43\",\n    +   \"Expected indentation of 4 spaces but found 5. File: js-aofs-Amarendra7062/array_equals.js Line: 44\",\n    +   \"Expected indentation of 2 spaces but found 3. File: js-aofs-Amarendra7062/array_equals.js Line: 45\",\n    +   \"Expected indentation of 2 spaces but found 3. File: js-aofs-Amarendra7062/array_equals.js Line: 46\",\n    +   \"Expected indentation of 0 spaces but found 2. File: js-aofs-Amarendra7062/array_equals.js Line: 47\",\n    +   \"Trailing spaces not allowed. File: js-aofs-Amarendra7062/array_equals.js Line: 62\",\n    +   \"Expected indentation of 0 spaces but found 1. File: js-aofs-Amarendra7062/array_equals.js Line: 63\",\n    +   \"Newline required at end of file but not found. File: js-aofs-Amarendra7062/array_equals.js Line: 63\",\n    + ]\n\n    \u001b[0m \u001b[90m 77 |\u001b[39m               )\n     \u001b[90m 78 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 79 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 80 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 81 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 82 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:79:30)\n\n  ● js-aofs › Amarendra7062 › object_equals › should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}\n\n    evalmachine.<anonymous>:59\n    console.log(objectEqual(OBJECT_1, OBJECT_2));\n            ^\n\n    ReferenceError: objectEqual is not defined\n\n      at evalmachine.<anonymous>:59:9\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › Amarendra7062 › object_equals › should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}\n\n    evalmachine.<anonymous>:59\n    console.log(objectEqual(OBJECT_1, OBJECT_2));\n            ^\n\n    ReferenceError: objectEqual is not defined\n\n      at evalmachine.<anonymous>:59:9\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › Amarendra7062 › object_equals › should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}\n\n    evalmachine.<anonymous>:59\n    console.log(objectEqual(OBJECT_1, OBJECT_2));\n            ^\n\n    ReferenceError: objectEqual is not defined\n\n      at evalmachine.<anonymous>:59:9\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › Amarendra7062 › object_equals › should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}\n\n    evalmachine.<anonymous>:59\n    console.log(objectEqual(OBJECT_1, OBJECT_2));\n            ^\n\n    ReferenceError: objectEqual is not defined\n\n      at evalmachine.<anonymous>:59:9\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › Amarendra7062 › object_equals › should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}\n\n    evalmachine.<anonymous>:59\n    console.log(objectEqual(OBJECT_1, OBJECT_2));\n            ^\n\n    ReferenceError: objectEqual is not defined\n\n      at evalmachine.<anonymous>:59:9\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › Amarendra7062 › object_equals › should log true when OBJECT_1={} and OBJECT_2={}\n\n    evalmachine.<anonymous>:59\n    console.log(objectEqual(OBJECT_1, OBJECT_2));\n            ^\n\n    ReferenceError: objectEqual is not defined\n\n      at evalmachine.<anonymous>:59:9\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › Amarendra7062 › object_equals › should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}\n\n    evalmachine.<anonymous>:59\n    console.log(objectEqual(OBJECT_1, OBJECT_2));\n            ^\n\n    ReferenceError: objectEqual is not defined\n\n      at evalmachine.<anonymous>:59:9\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › Amarendra7062 › object_equals › should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}\n\n    evalmachine.<anonymous>:59\n    console.log(objectEqual(OBJECT_1, OBJECT_2));\n            ^\n\n    ReferenceError: objectEqual is not defined\n\n      at evalmachine.<anonymous>:59:9\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › Amarendra7062 › object_equals › should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}\n\n    evalmachine.<anonymous>:59\n    console.log(objectEqual(OBJECT_1, OBJECT_2));\n            ^\n\n    ReferenceError: objectEqual is not defined\n\n      at evalmachine.<anonymous>:59:9\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › Amarendra7062 › object_equals › should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}\n\n    evalmachine.<anonymous>:59\n    console.log(objectEqual(OBJECT_1, OBJECT_2));\n            ^\n\n    ReferenceError: objectEqual is not defined\n\n      at evalmachine.<anonymous>:59:9\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › Amarendra7062 › object_equals › should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}\n\n    evalmachine.<anonymous>:59\n    console.log(objectEqual(OBJECT_1, OBJECT_2));\n            ^\n\n    ReferenceError: objectEqual is not defined\n\n      at evalmachine.<anonymous>:59:9\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › Amarendra7062 › object_equals › should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}\n\n    evalmachine.<anonymous>:59\n    console.log(objectEqual(OBJECT_1, OBJECT_2));\n            ^\n\n    ReferenceError: objectEqual is not defined\n\n      at evalmachine.<anonymous>:59:9\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › Amarendra7062 › object_equals › should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}\n\n    evalmachine.<anonymous>:59\n    console.log(objectEqual(OBJECT_1, OBJECT_2));\n            ^\n\n    ReferenceError: objectEqual is not defined\n\n      at evalmachine.<anonymous>:59:9\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › Amarendra7062 › object_equals › should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}\n\n    evalmachine.<anonymous>:59\n    console.log(objectEqual(OBJECT_1, OBJECT_2));\n            ^\n\n    ReferenceError: objectEqual is not defined\n\n      at evalmachine.<anonymous>:59:9\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › Amarendra7062 › object_equals › should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}\n\n    evalmachine.<anonymous>:59\n    console.log(objectEqual(OBJECT_1, OBJECT_2));\n            ^\n\n    ReferenceError: objectEqual is not defined\n\n      at evalmachine.<anonymous>:59:9\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › Amarendra7062 › object_equals › should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}\n\n    evalmachine.<anonymous>:59\n    console.log(objectEqual(OBJECT_1, OBJECT_2));\n            ^\n\n    ReferenceError: objectEqual is not defined\n\n      at evalmachine.<anonymous>:59:9\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › Amarendra7062 › object_equals › should log true when OBJECT_1=null and OBJECT_2=null\n\n    evalmachine.<anonymous>:59\n    console.log(objectEqual(OBJECT_1, OBJECT_2));\n            ^\n\n    ReferenceError: objectEqual is not defined\n\n      at evalmachine.<anonymous>:59:9\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › Amarendra7062 › object_equals › should log false when OBJECT_1=undefined and OBJECT_2={}\n\n    evalmachine.<anonymous>:59\n    console.log(objectEqual(OBJECT_1, OBJECT_2));\n            ^\n\n    ReferenceError: objectEqual is not defined\n\n      at evalmachine.<anonymous>:59:9\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › Amarendra7062 › object_equals › should log false when OBJECT_1={} and OBJECT_2=undefined\n\n    evalmachine.<anonymous>:59\n    console.log(objectEqual(OBJECT_1, OBJECT_2));\n            ^\n\n    ReferenceError: objectEqual is not defined\n\n      at evalmachine.<anonymous>:59:9\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › Amarendra7062 › object_equals › should log true when OBJECT_1=undefined and OBJECT_2=undefined\n\n    evalmachine.<anonymous>:59\n    console.log(objectEqual(OBJECT_1, OBJECT_2));\n            ^\n\n    ReferenceError: objectEqual is not defined\n\n      at evalmachine.<anonymous>:59:9\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › Amarendra7062 › object_equals › should log false when OBJECT_1=[1] and OBJECT_2={0:1}\n\n    evalmachine.<anonymous>:59\n    console.log(objectEqual(OBJECT_1, OBJECT_2));\n            ^\n\n    ReferenceError: objectEqual is not defined\n\n      at evalmachine.<anonymous>:59:9\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › Amarendra7062 › object_equals › should log false when OBJECT_1={0:1} and OBJECT_2=[1]\n\n    evalmachine.<anonymous>:59\n    console.log(objectEqual(OBJECT_1, OBJECT_2));\n            ^\n\n    ReferenceError: objectEqual is not defined\n\n      at evalmachine.<anonymous>:59:9\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › Amarendra7062 › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 9\n\n    - Array []\n    + Array [\n    +   \"Missing semicolon. File: js-aofs-Amarendra7062/object_equals.js Line: 2\",\n    +   \"Missing semicolon. File: js-aofs-Amarendra7062/object_equals.js Line: 3\",\n    +   \"Expected indentation of 2 spaces but found 4. File: js-aofs-Amarendra7062/object_equals.js Line: 33\",\n    +   \"Expected indentation of 4 spaces but found 6. File: js-aofs-Amarendra7062/object_equals.js Line: 34\",\n    +   \"Expected indentation of 2 spaces but found 4. File: js-aofs-Amarendra7062/object_equals.js Line: 35\",\n    +   \"Expected indentation of 2 spaces but found 4. File: js-aofs-Amarendra7062/object_equals.js Line: 36\",\n    +   \"Trailing spaces not allowed. File: js-aofs-Amarendra7062/object_equals.js Line: 57\",\n    + ]\n\n    \u001b[0m \u001b[90m 77 |\u001b[39m               )\n     \u001b[90m 78 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 79 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 80 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 81 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 82 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:79:30)\n\n  ● js-aofs › Charantej21 › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (17). Maximum allowed is 15. File: js-aofs-Charantej21/array_equals.js Line: 31\",\n    +   \"This line has a length of 115. Maximum allowed is 80. File: js-aofs-Charantej21/array_equals.js Line: 34\",\n    + ]\n\n    \u001b[0m \u001b[90m 77 |\u001b[39m               )\n     \u001b[90m 78 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 79 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 80 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 81 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 82 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:79:30)\n\n  ● js-aofs › Charantej21 › object_equals › should log false when OBJECT_1=[1] and OBJECT_2={0:1}\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   false,\n    +   true,\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Charantej21 › object_equals › should log false when OBJECT_1={0:1} and OBJECT_2=[1]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   false,\n    +   true,\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Charantej21 › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"This line has a length of 153. Maximum allowed is 80. File: js-aofs-Charantej21/object_equals.js Line: 36\",\n    + ]\n\n    \u001b[0m \u001b[90m 77 |\u001b[39m               )\n     \u001b[90m 78 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 79 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 80 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 81 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 82 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:79:30)\n\n  ● js-aofs › GOWRIPRASADTW › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"Arrow function has too many lines (21). Maximum allowed is 15. File: js-aofs-GOWRIPRASADTW/array_equals.js Line: 32\",\n    +   \"This line has a length of 91. Maximum allowed is 80. File: js-aofs-GOWRIPRASADTW/array_equals.js Line: 36\",\n    + ]\n\n    \u001b[0m \u001b[90m 77 |\u001b[39m               )\n     \u001b[90m 78 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 79 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 80 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 81 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 82 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:79:30)\n\n  ● js-aofs › GOWRIPRASADTW › object_equals › should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   false,\n    +   true,\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › GOWRIPRASADTW › object_equals › should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   false,\n    +   true,\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › GOWRIPRASADTW › object_equals › should log false when OBJECT_1=undefined and OBJECT_2={}\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   false,\n    +   true,\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › GOWRIPRASADTW › object_equals › should log false when OBJECT_1={} and OBJECT_2=undefined\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   false,\n    +   true,\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › GOWRIPRASADTW › object_equals › should log false when OBJECT_1=[1] and OBJECT_2={0:1}\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   false,\n    +   true,\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › GOWRIPRASADTW › object_equals › should log false when OBJECT_1={0:1} and OBJECT_2=[1]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   false,\n    +   true,\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › GOWRIPRASADTW › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"This line has a length of 95. Maximum allowed is 80. File: js-aofs-GOWRIPRASADTW/object_equals.js Line: 36\",\n    +   \"Closing curly brace does not appear on the same line as the subsequent block. File: js-aofs-GOWRIPRASADTW/object_equals.js Line: 54\",\n    + ]\n\n    \u001b[0m \u001b[90m 77 |\u001b[39m               )\n     \u001b[90m 78 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 79 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 80 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 81 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 82 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:79:30)\n\n  ● js-aofs › HemPradeepthummala › tribonacci › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"This line has a length of 101. Maximum allowed is 80. File: js-aofs-HemPradeepthummala/tribonacci.js Line: 27\",\n    +   \"This line has a length of 90. Maximum allowed is 80. File: js-aofs-HemPradeepthummala/tribonacci.js Line: 35\",\n    + ]\n\n    \u001b[0m \u001b[90m 77 |\u001b[39m               )\n     \u001b[90m 78 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 79 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 80 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 81 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 82 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:79:30)\n\n  ● js-aofs › HemPradeepthummala › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 6\n\n    - Array []\n    + Array [\n    +   \"Function has a complexity of 27. Maximum allowed is 20. File: js-aofs-HemPradeepthummala/array_equals.js Line: 33\",\n    +   \"This line has a length of 251. Maximum allowed is 80. File: js-aofs-HemPradeepthummala/array_equals.js Line: 34\",\n    +   \"This line has a length of 133. Maximum allowed is 80. File: js-aofs-HemPradeepthummala/array_equals.js Line: 36\",\n    +   \"This line has a length of 176. Maximum allowed is 80. File: js-aofs-HemPradeepthummala/array_equals.js Line: 39\",\n    + ]\n\n    \u001b[0m \u001b[90m 77 |\u001b[39m               )\n     \u001b[90m 78 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 79 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 80 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 81 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 82 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:79:30)\n\n  ● js-aofs › HemPradeepthummala › object_equals › should log false when OBJECT_1=undefined and OBJECT_2={}\n\n    evalmachine.<anonymous>:34\n      if ((object1 === null && object2 === null) || (object1 !== null && object2 !== null && Object.keys(object1).length === Object.keys(object2).length)) {\n                                                                                                    ^\n\n    TypeError: Cannot convert undefined or null to object\n        at Function.keys (<anonymous>)\n\n      at compareObjects (evalmachine.<anonymous>:34:97)\n      at evalmachine.<anonymous>:51:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › HemPradeepthummala › object_equals › should log false when OBJECT_1={} and OBJECT_2=undefined\n\n    evalmachine.<anonymous>:34\n      if ((object1 === null && object2 === null) || (object1 !== null && object2 !== null && Object.keys(object1).length === Object.keys(object2).length)) {\n                                                                                                                                    ^\n\n    TypeError: Cannot convert undefined or null to object\n        at Function.keys (<anonymous>)\n\n      at compareObjects (evalmachine.<anonymous>:34:129)\n      at evalmachine.<anonymous>:51:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › HemPradeepthummala › object_equals › should log true when OBJECT_1=undefined and OBJECT_2=undefined\n\n    evalmachine.<anonymous>:34\n      if ((object1 === null && object2 === null) || (object1 !== null && object2 !== null && Object.keys(object1).length === Object.keys(object2).length)) {\n                                                                                                    ^\n\n    TypeError: Cannot convert undefined or null to object\n        at Function.keys (<anonymous>)\n\n      at compareObjects (evalmachine.<anonymous>:34:97)\n      at evalmachine.<anonymous>:51:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › HemPradeepthummala › object_equals › should log false when OBJECT_1=[1] and OBJECT_2={0:1}\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   false,\n    +   true,\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › HemPradeepthummala › object_equals › should log false when OBJECT_1={0:1} and OBJECT_2=[1]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   false,\n    +   true,\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › HemPradeepthummala › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 5\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (18). Maximum allowed is 15. File: js-aofs-HemPradeepthummala/object_equals.js Line: 33\",\n    +   \"This line has a length of 152. Maximum allowed is 80. File: js-aofs-HemPradeepthummala/object_equals.js Line: 34\",\n    +   \"Too many blank lines at the end of file. Max of 0 allowed. File: js-aofs-HemPradeepthummala/object_equals.js Line: 52\",\n    + ]\n\n    \u001b[0m \u001b[90m 77 |\u001b[39m               )\n     \u001b[90m 78 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 79 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 80 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 81 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 82 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:79:30)\n\n  ● js-aofs › Nithin7411 › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (17). Maximum allowed is 15. File: js-aofs-Nithin7411/array_equals.js Line: 49\",\n    + ]\n\n    \u001b[0m \u001b[90m 77 |\u001b[39m               )\n     \u001b[90m 78 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 79 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 80 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 81 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 82 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:79:30)\n\n  ● js-aofs › Nithin7411 › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"Function has too many lines (19). Maximum allowed is 15. File: js-aofs-Nithin7411/object_equals.js Line: 69\",\n    + ]\n\n    \u001b[0m \u001b[90m 77 |\u001b[39m               )\n     \u001b[90m 78 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 79 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 80 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 81 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 82 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:79:30)\n\n  ● js-aofs › SACHITH31 › remove_adjacent_spaces › should remove extra spaces when TEXT contains only space\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   \"\",\n    +   \" \",\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › SACHITH31 › remove_adjacent_spaces › should remove extra spaces when TEXT has leading spaces\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   \"Leading spaces!!!\",\n    +   \" Leading spaces!!!\",\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › SACHITH31 › remove_adjacent_spaces › should remove extra spaces when TEXT  has leading & trailing spaces\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   \"Leading spaces!!! & Trailing Spaces!!!\",\n    +   \" Leading spaces!!! & Trailing Spaces!!! \",\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › SACHITH31 › remove_adjacent_spaces › should remove extra spaces when TEXT has trailing spaces\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   \"Trailing Spaces!!!\",\n    +   \"Trailing Spaces!!! \",\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › SACHITH31 › remove_adjacent_spaces › should remove extra spaces when TEXT is multi lingual string with spaces\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   \"こんにちは 世界\",\n    +   \" こんにちは 世界 \",\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › SACHITH31 › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"'myArrayFunction' was used before it was defined. File: js-aofs-SACHITH31/array_equals.js Line: 34\",\n    +   \"This line has a length of 132. Maximum allowed is 80. File: js-aofs-SACHITH31/array_equals.js Line: 47\",\n    + ]\n\n    \u001b[0m \u001b[90m 77 |\u001b[39m               )\n     \u001b[90m 78 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 79 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 80 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 81 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 82 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:79:30)\n\n  ● js-aofs › SACHITH31 › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 5\n\n    - Array []\n    + Array [\n    +   \"This line has a length of 91. Maximum allowed is 80. File: js-aofs-SACHITH31/object_equals.js Line: 32\",\n    +   \"This line has a length of 91. Maximum allowed is 80. File: js-aofs-SACHITH31/object_equals.js Line: 35\",\n    +   \"'anotherFunction' was used before it was defined. File: js-aofs-SACHITH31/object_equals.js Line: 44\",\n    + ]\n\n    \u001b[0m \u001b[90m 77 |\u001b[39m               )\n     \u001b[90m 78 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 79 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 80 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 81 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 82 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:79:30)\n\n  ● js-aofs › Sravani175 › even_odd › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  -  1\n    + Received  + 26\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression. File: js-aofs-Sravani175/even_odd.js Line: 18\",\n    +   \"Missing space before opening brace. File: js-aofs-Sravani175/even_odd.js Line: 18\",\n    +   \"Expected indentation of 2 spaces but found 1. File: js-aofs-Sravani175/even_odd.js Line: 19\",\n    +   \"A space is required before '}'. File: js-aofs-Sravani175/even_odd.js Line: 19\",\n    +   \"Expected indentation of 2 spaces but found 4. File: js-aofs-Sravani175/even_odd.js Line: 20\",\n    +   \"There should be no space after this paren. File: js-aofs-Sravani175/even_odd.js Line: 20\",\n    +   \"'mine' is never reassigned. Use 'const' instead. File: js-aofs-Sravani175/even_odd.js Line: 20\",\n    +   \"Missing space before opening brace. File: js-aofs-Sravani175/even_odd.js Line: 20\",\n    +   \"Expected indentation of 4 spaces but found 6. File: js-aofs-Sravani175/even_odd.js Line: 21\",\n    +   \"There should be no space before this paren. File: js-aofs-Sravani175/even_odd.js Line: 21\",\n    +   \"Missing space before opening brace. File: js-aofs-Sravani175/even_odd.js Line: 21\",\n    +   \"Expected indentation of 6 spaces but found 4. File: js-aofs-Sravani175/even_odd.js Line: 22\",\n    +   \"Closing curly brace does not appear on the same line as the subsequent block. File: js-aofs-Sravani175/even_odd.js Line: 23\",\n    +   \"Expected indentation of 4 spaces but found 0. File: js-aofs-Sravani175/even_odd.js Line: 23\",\n    +   \"Expected indentation of 4 spaces but found 5. File: js-aofs-Sravani175/even_odd.js Line: 24\",\n    +   \"Expected indentation of 6 spaces but found 9. File: js-aofs-Sravani175/even_odd.js Line: 25\",\n    +   \"Expected indentation of 4 spaces but found 6. File: js-aofs-Sravani175/even_odd.js Line: 26\",\n    +   \"Expected indentation of 2 spaces but found 4. File: js-aofs-Sravani175/even_odd.js Line: 27\",\n    +   \"Expected indentation of 2 spaces but found 6. File: js-aofs-Sravani175/even_odd.js Line: 28\",\n    +   \"Expected indentation of 0 spaces but found 2. File: js-aofs-Sravani175/even_odd.js Line: 29\",\n    +   \"Expected indentation of 0 spaces but found 4. File: js-aofs-Sravani175/even_odd.js Line: 30\",\n    +   \"Trailing spaces not allowed. File: js-aofs-Sravani175/even_odd.js Line: 31\",\n    +   \"Too many blank lines at the end of file. Max of 0 allowed. File: js-aofs-Sravani175/even_odd.js Line: 31\",\n    +   \"Newline required at end of file but not found. File: js-aofs-Sravani175/even_odd.js Line: 31\",\n    + ]\n\n    \u001b[0m \u001b[90m 77 |\u001b[39m               )\n     \u001b[90m 78 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 79 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 80 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 81 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 82 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:79:30)\n\n  ● js-aofs › Sravani175 › categorise › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  -  1\n    + Received  + 32\n\n    - Array []\n    + Array [\n    +   \"Expected a function expression. File: js-aofs-Sravani175/categorise.js Line: 26\",\n    +   \"Function 'groupNumbers' has too many lines (16). Maximum allowed is 15. File: js-aofs-Sravani175/categorise.js Line: 26\",\n    +   \"Missing space before opening brace. File: js-aofs-Sravani175/categorise.js Line: 26\",\n    +   \"Expected indentation of 2 spaces but found 4. File: js-aofs-Sravani175/categorise.js Line: 28\",\n    +   \"'num' is never reassigned. Use 'const' instead. File: js-aofs-Sravani175/categorise.js Line: 28\",\n    +   \"Expected indentation of 4 spaces but found 6. File: js-aofs-Sravani175/categorise.js Line: 29\",\n    +   \"Unexpected whitespace before property num. File: js-aofs-Sravani175/categorise.js Line: 29\",\n    +   \"There should be no space before this paren. File: js-aofs-Sravani175/categorise.js Line: 29\",\n    +   \"Expected indentation of 6 spaces but found 2. File: js-aofs-Sravani175/categorise.js Line: 30\",\n    +   \"Unexpected whitespace before property num. File: js-aofs-Sravani175/categorise.js Line: 30\",\n    +   \"Expected indentation of 4 spaces but found 0. File: js-aofs-Sravani175/categorise.js Line: 31\",\n    +   \"Expected indentation of 4 spaces but found 3. File: js-aofs-Sravani175/categorise.js Line: 32\",\n    +   \"Unexpected whitespace before property num. File: js-aofs-Sravani175/categorise.js Line: 32\",\n    +   \"Expected indentation of 2 spaces but found 4. File: js-aofs-Sravani175/categorise.js Line: 33\",\n    +   \"Expected indentation of 2 spaces but found 0. File: js-aofs-Sravani175/categorise.js Line: 34\",\n    +   \"'arrays' is never reassigned. Use 'const' instead. File: js-aofs-Sravani175/categorise.js Line: 34\",\n    +   \"'keys' is never reassigned. Use 'const' instead. File: js-aofs-Sravani175/categorise.js Line: 35\",\n    +   \"Operator '=' must be spaced. File: js-aofs-Sravani175/categorise.js Line: 35\",\n    +   \"A space is required after ','. File: js-aofs-Sravani175/categorise.js Line: 35\",\n    +   \"Missing space before =>. File: js-aofs-Sravani175/categorise.js Line: 35\",\n    +   \"Missing space after =>. File: js-aofs-Sravani175/categorise.js Line: 35\",\n    +   \"Operator '-' must be spaced. File: js-aofs-Sravani175/categorise.js Line: 35\",\n    +   \"Expected indentation of 2 spaces but found 3. File: js-aofs-Sravani175/categorise.js Line: 36\",\n    +   \"Expected space(s) after \\\"for\\\". File: js-aofs-Sravani175/categorise.js Line: 36\",\n    +   \"'k' is never reassigned. Use 'const' instead. File: js-aofs-Sravani175/categorise.js Line: 36\",\n    +   \"Opening curly brace does not appear on the same line as controlling statement. File: js-aofs-Sravani175/categorise.js Line: 37\",\n    +   \"Expected indentation of 2 spaces but found 0. File: js-aofs-Sravani175/categorise.js Line: 37\",\n    +   \"Expected indentation of 2 spaces but found 0. File: js-aofs-Sravani175/categorise.js Line: 39\",\n    +   \"Expected indentation of 2 spaces but found 3. File: js-aofs-Sravani175/categorise.js Line: 40\",\n    +   \"Newline required at end of file but not found. File: js-aofs-Sravani175/categorise.js Line: 42\",\n    + ]\n\n    \u001b[0m \u001b[90m 77 |\u001b[39m               )\n     \u001b[90m 78 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 79 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 80 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 81 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 82 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:79:30)\n\n  ● js-aofs › Sravani175 › entries › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  -  1\n    + Received  + 20\n\n    - Array []\n    + Array [\n    +   \"A space is required after '{'. File: js-aofs-Sravani175/entries.js Line: 3\",\n    +   \"A space is required before '}'. File: js-aofs-Sravani175/entries.js Line: 3\",\n    +   \"Trailing spaces not allowed. File: js-aofs-Sravani175/entries.js Line: 6\",\n    +   \"Expected indentation of 0 spaces but found 1. File: js-aofs-Sravani175/entries.js Line: 22\",\n    +   \"Missing space before function parentheses. File: js-aofs-Sravani175/entries.js Line: 22\",\n    +   \"'OBJECT' is already declared in the upper scope on line 3 column 7. File: js-aofs-Sravani175/entries.js Line: 22\",\n    +   \"Expected indentation of 2 spaces but found 4. File: js-aofs-Sravani175/entries.js Line: 23\",\n    +   \"There should be no space after this paren. File: js-aofs-Sravani175/entries.js Line: 24\",\n    +   \"'mine' is never reassigned. Use 'const' instead. File: js-aofs-Sravani175/entries.js Line: 24\",\n    +   \"Expected indentation of 4 spaces but found 6. File: js-aofs-Sravani175/entries.js Line: 25\",\n    +   \"'index' is never reassigned. Use 'const' instead. File: js-aofs-Sravani175/entries.js Line: 25\",\n    +   \"Expected indentation of 4 spaces but found 8. File: js-aofs-Sravani175/entries.js Line: 26\",\n    +   \"Expected indentation of 4 spaces but found 5. File: js-aofs-Sravani175/entries.js Line: 27\",\n    +   \"Expected indentation of 4 spaces but found 3. File: js-aofs-Sravani175/entries.js Line: 28\",\n    +   \"Expected indentation of 2 spaces but found 4. File: js-aofs-Sravani175/entries.js Line: 30\",\n    +   \"Missing semicolon. File: js-aofs-Sravani175/entries.js Line: 31\",\n    +   \"Expected indentation of 0 spaces but found 4. File: js-aofs-Sravani175/entries.js Line: 32\",\n    +   \"Expected indentation of 0 spaces but found 2. File: js-aofs-Sravani175/entries.js Line: 33\",\n    + ]\n\n    \u001b[0m \u001b[90m 77 |\u001b[39m               )\n     \u001b[90m 78 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 79 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 80 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 81 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 82 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:79:30)\n\n  ● js-aofs › Sravani175 › remove_adjacent_spaces › should remove extra spaces when TEXT contains only 1 extra space\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   \"One extra space!!!\",\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › remove_adjacent_spaces › should remove extra spaces when TEXT contains multiple extra spaces\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   \"Multiple extra spaces!!!\",\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › remove_adjacent_spaces › should remove extra spaces when TEXT contains only space\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   \"\",\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › remove_adjacent_spaces › should remove extra spaces when TEXT is empty string\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   \"\",\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › remove_adjacent_spaces › should remove extra spaces when TEXT is a single word\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   \"SingleWord\",\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › remove_adjacent_spaces › should remove extra spaces when TEXT is a single character\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   \"a\",\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › remove_adjacent_spaces › should remove extra spaces when TEXT has no spaces\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   \"ItsALongSentenceWithoutAnySpaces\",\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › remove_adjacent_spaces › should remove extra spaces when TEXT has leading spaces\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   \"Leading spaces!!!\",\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › remove_adjacent_spaces › should remove extra spaces when TEXT  has leading & trailing spaces\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   \"Leading spaces!!! & Trailing Spaces!!!\",\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › remove_adjacent_spaces › should remove extra spaces when TEXT has trailing spaces\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   \"Trailing Spaces!!!\",\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › remove_adjacent_spaces › should remove extra spaces when TEXT has mixed spaces & tabs\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   \"String \t with \t spaces \t and \t tabs!!!\",\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › remove_adjacent_spaces › should remove extra spaces when TEXT has mixed spaces & newlines\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 7\n    + Received  + 1\n\n    - Array [\n    -   \"String \n    -  with \n    -  spaces \n    -  and \n    -  newlines!!!\",\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › remove_adjacent_spaces › should remove extra spaces when TEXT is numeric string with spaces\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   \"123 456 789\",\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › remove_adjacent_spaces › should remove extra spaces when TEXT is multi lingual string with spaces\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   \"こんにちは 世界\",\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › remove_adjacent_spaces › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"Strings must use singlequote. File: js-aofs-Sravani175/remove_adjacent_spaces.js Line: 3\",\n    +   \"Trailing spaces not allowed. File: js-aofs-Sravani175/remove_adjacent_spaces.js Line: 7\",\n    + ]\n\n    \u001b[0m \u001b[90m 77 |\u001b[39m               )\n     \u001b[90m 78 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 79 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 80 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 81 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 82 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:79:30)\n\n  ● js-aofs › Sravani175 › tribonacci › should print the sequence for ENDING_RANGE=7\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 11\n    + Received  +  1\n\n    - Array [\n    -   Array [\n    -     0,\n    -     0,\n    -     1,\n    -     1,\n    -     2,\n    -     4,\n    -     7,\n    -   ],\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › tribonacci › should print the sequence for ENDING_RANGE=24\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 13\n    + Received  +  1\n\n    - Array [\n    -   Array [\n    -     0,\n    -     0,\n    -     1,\n    -     1,\n    -     2,\n    -     4,\n    -     7,\n    -     13,\n    -     24,\n    -   ],\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › tribonacci › should print the sequence for ENDING_RANGE=100\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 15\n    + Received  +  1\n\n    - Array [\n    -   Array [\n    -     0,\n    -     0,\n    -     1,\n    -     1,\n    -     2,\n    -     4,\n    -     7,\n    -     13,\n    -     24,\n    -     44,\n    -     81,\n    -   ],\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › tribonacci › should print the sequence for ENDING_RANGE=300\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 17\n    + Received  +  1\n\n    - Array [\n    -   Array [\n    -     0,\n    -     0,\n    -     1,\n    -     1,\n    -     2,\n    -     4,\n    -     7,\n    -     13,\n    -     24,\n    -     44,\n    -     81,\n    -     149,\n    -     274,\n    -   ],\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › tribonacci › should print the sequence for ENDING_RANGE=2\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 9\n    + Received  + 1\n\n    - Array [\n    -   Array [\n    -     0,\n    -     0,\n    -     1,\n    -     1,\n    -     2,\n    -   ],\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › tribonacci › should print the sequence for ENDING_RANGE=1\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 8\n    + Received  + 1\n\n    - Array [\n    -   Array [\n    -     0,\n    -     0,\n    -     1,\n    -     1,\n    -   ],\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › tribonacci › should print the sequence for ENDING_RANGE=0\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 6\n    + Received  + 1\n\n    - Array [\n    -   Array [\n    -     0,\n    -     0,\n    -   ],\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › tribonacci › should print the sequence for ENDING_RANGE=-1\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   Array [],\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › tribonacci › should print the sequence for ENDING_RANGE=-2\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   Array [],\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › tribonacci › should print the sequence for ENDING_RANGE=-10\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   Array [],\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › tribonacci › should print the sequence when ENDING_RANGE is a larger number\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 22\n    + Received  +  1\n\n    - Array [\n    -   Array [\n    -     0,\n    -     0,\n    -     1,\n    -     1,\n    -     2,\n    -     4,\n    -     7,\n    -     13,\n    -     24,\n    -     44,\n    -     81,\n    -     149,\n    -     274,\n    -     504,\n    -     927,\n    -     1705,\n    -     3136,\n    -     5768,\n    -   ],\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › tribonacci › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 6\n\n    - Array []\n    + Array [\n    +   \"Trailing spaces not allowed. File: js-aofs-Sravani175/tribonacci.js Line: 7\",\n    +   \"Trailing spaces not allowed. File: js-aofs-Sravani175/tribonacci.js Line: 23\",\n    +   \"Too many blank lines at the end of file. Max of 0 allowed. File: js-aofs-Sravani175/tribonacci.js Line: 23\",\n    +   \"Newline required at end of file but not found. File: js-aofs-Sravani175/tribonacci.js Line: 23\",\n    + ]\n\n    \u001b[0m \u001b[90m 77 |\u001b[39m               )\n     \u001b[90m 78 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 79 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 80 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 81 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 82 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:79:30)\n\n  ● js-aofs › Sravani175 › array_equals › should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   true,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › array_equals › should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › array_equals › should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › array_equals › should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › array_equals › should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   true,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › array_equals › should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › array_equals › should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › array_equals › should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   true,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › array_equals › should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   true,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › array_equals › should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › array_equals › should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › array_equals › should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   true,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › array_equals › should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › array_equals › should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › array_equals › should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › array_equals › should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › array_equals › should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › array_equals › should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › array_equals › should log true when given two very large arrays with same data\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   true,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › array_equals › should log false when given two very large arrays with different data\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › array_equals › should log true when given two arrays are null\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   true,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › array_equals › should log true when given two deep arrays are equal\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   true,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › array_equals › should log false when ARRAY_1=undefined and ARRAY_2=null\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › array_equals › should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › array_equals › should log false when ARRAY_1=[1] and ARRAY_2={0:1}\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › array_equals › should log false when ARRAY_1={0:1} and ARRAY_2=[1]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › object_equals › should log true when OBJECT_1={name: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   true,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › object_equals › should log false when OBJECT_1={name: 'Ravi', age: 20} and OBJECT_2={name: 'Ram', age: 20}\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › object_equals › should log false when OBJECT_1={username: 'Ram', age: 20} and OBJECT_2={name: 'Ram', age: 20}\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › object_equals › should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › object_equals › should log true when OBJECT_1={age: 20, name: 'Ram'} and OBJECT_2={name: 'Ram', age: 20}\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   true,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › object_equals › should log true when OBJECT_1={} and OBJECT_2={}\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   true,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › object_equals › should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › object_equals › should log true when OBJECT_1={name: 'Ram', marks:{maths: 100, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   true,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › object_equals › should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › object_equals › should log true when OBJECT_1={name: 'Ram', marks: null} and OBJECT_2={name: 'Ram', marks: null}\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   true,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › object_equals › should log true when OBJECT_1={name: 'Ram', marks: undefined} and OBJECT_2={name: 'Ram', marks: undefined}\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   true,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › object_equals › should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › object_equals › should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › object_equals › should log true when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}}\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   true,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › object_equals › should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › object_equals › should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › object_equals › should log true when OBJECT_1=null and OBJECT_2=null\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   true,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › object_equals › should log false when OBJECT_1=undefined and OBJECT_2={}\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › object_equals › should log false when OBJECT_1={} and OBJECT_2=undefined\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › object_equals › should log true when OBJECT_1=undefined and OBJECT_2=undefined\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   true,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › object_equals › should log false when OBJECT_1=[1] and OBJECT_2={0:1}\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Sravani175 › object_equals › should log false when OBJECT_1={0:1} and OBJECT_2=[1]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 1\n\n    - Array [\n    -   false,\n    - ]\n    + Array []\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Triveni12062006 › remove_adjacent_spaces › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"Arrow function has too many lines (23). Maximum allowed is 15. File: js-aofs-Triveni12062006/remove_adjacent_spaces.js Line: 31\",\n    + ]\n\n    \u001b[0m \u001b[90m 77 |\u001b[39m               )\n     \u001b[90m 78 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 79 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 80 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 81 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 82 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:79:30)\n\n  ● js-aofs › Triveni12062006 › object_equals › should log false when OBJECT_1={name: 'Ram', age: 20, location: 'Hyderabad'} and OBJECT_2={name: 'Ram', age: 20}\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   false,\n    +   true,\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Triveni12062006 › object_equals › should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={}\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   false,\n    +   true,\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Triveni12062006 › object_equals › should log false when OBJECT_1={name: 'Ram'} and OBJECT_2={name: 'Ram', marks: undefined}\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   false,\n    +   true,\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Triveni12062006 › object_equals › should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100, key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {random_key: 'random value', key6: 100, key7: 'value7', key9: null, key10: {}}}}}}}\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   false,\n    +   true,\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Triveni12062006 › object_equals › should log false when OBJECT_1={key1: {key2: {key3: {key4: {key5: {key6: 100}, key11: 'value11'}}}}} and OBJECT_2={key1: {key2: {key3: {key4: {key5: {key6: '100', key7: 'value7', key8: 'value8', key9: null, key10: {}}, key11: 'value11'}, key12: 5}}}}\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   false,\n    +   true,\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Triveni12062006 › object_equals › should log false when OBJECT_1=[1] and OBJECT_2={0:1}\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   false,\n    +   true,\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Triveni12062006 › object_equals › should log false when OBJECT_1={0:1} and OBJECT_2=[1]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   false,\n    +   true,\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › Triveni12062006 › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  -  1\n    + Received  + 24\n\n    - Array []\n    + Array [\n    +   \"Arrow function has too many lines (19). Maximum allowed is 15. File: js-aofs-Triveni12062006/object_equals.js Line: 31\",\n    +   \"Expected indentation of 2 spaces but found 0. File: js-aofs-Triveni12062006/object_equals.js Line: 32\",\n    +   \"Expected indentation of 4 spaces but found 2. File: js-aofs-Triveni12062006/object_equals.js Line: 33\",\n    +   \"Expected indentation of 2 spaces but found 0. File: js-aofs-Triveni12062006/object_equals.js Line: 34\",\n    +   \"Expected space(s) after \\\"if\\\". File: js-aofs-Triveni12062006/object_equals.js Line: 35\",\n    +   \"Expected indentation of 2 spaces but found 0. File: js-aofs-Triveni12062006/object_equals.js Line: 35\",\n    +   \"Operator '||' must be spaced. File: js-aofs-Triveni12062006/object_equals.js Line: 35\",\n    +   \"Expected indentation of 4 spaces but found 2. File: js-aofs-Triveni12062006/object_equals.js Line: 36\",\n    +   \"Expected indentation of 2 spaces but found 0. File: js-aofs-Triveni12062006/object_equals.js Line: 37\",\n    +   \"Expected indentation of 2 spaces but found 0. File: js-aofs-Triveni12062006/object_equals.js Line: 38\",\n    +   \"Expected indentation of 2 spaces but found 0. File: js-aofs-Triveni12062006/object_equals.js Line: 39\",\n    +   \"Expected space(s) after \\\"if\\\". File: js-aofs-Triveni12062006/object_equals.js Line: 40\",\n    +   \"Expected indentation of 2 spaces but found 0. File: js-aofs-Triveni12062006/object_equals.js Line: 40\",\n    +   \"There should be no space after this paren. File: js-aofs-Triveni12062006/object_equals.js Line: 40\",\n    +   \"Expected indentation of 4 spaces but found 2. File: js-aofs-Triveni12062006/object_equals.js Line: 41\",\n    +   \"Expected indentation of 2 spaces but found 0. File: js-aofs-Triveni12062006/object_equals.js Line: 42\",\n    +   \"Expected indentation of 2 spaces but found 0. File: js-aofs-Triveni12062006/object_equals.js Line: 43\",\n    +   \"Expected indentation of 4 spaces but found 2. File: js-aofs-Triveni12062006/object_equals.js Line: 44\",\n    +   \"Expected indentation of 6 spaces but found 4. File: js-aofs-Triveni12062006/object_equals.js Line: 45\",\n    +   \"Expected indentation of 4 spaces but found 2. File: js-aofs-Triveni12062006/object_equals.js Line: 46\",\n    +   \"Expected indentation of 2 spaces but found 0. File: js-aofs-Triveni12062006/object_equals.js Line: 47\",\n    +   \"Expected indentation of 2 spaces but found 1. File: js-aofs-Triveni12062006/object_equals.js Line: 48\",\n    + ]\n\n    \u001b[0m \u001b[90m 77 |\u001b[39m               )\n     \u001b[90m 78 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 79 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 80 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 81 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 82 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:79:30)\n\n  ● js-aofs › VETR1-V1GNESH › object_equals › should log false when OBJECT_1={name: 'Ram', marks:{maths: 90, science: 90}} and OBJECT_2={name: 'Ram', marks:{maths: 100, science: 90}}\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   false,\n    +   true,\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › kumarnandeesh › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"'functionForObjEqual' was used before it was defined. File: js-aofs-kumarnandeesh/object_equals.js Line: 43\",\n    + ]\n\n    \u001b[0m \u001b[90m 77 |\u001b[39m               )\n     \u001b[90m 78 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 79 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 80 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 81 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 82 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:79:30)\n\n  ● js-aofs › mr-mouli03 › array_equals › should log true when given two arrays are identical ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3]\n\n    evalmachine.<anonymous>:43\n      if (arrayChecker(arrayOne, arrayTwo) !== undefined) {\n      ^\n\n    ReferenceError: arrayChecker is not defined\n\n      at isArrayEqual (evalmachine.<anonymous>:43:3)\n      at evalmachine.<anonymous>:57:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › mr-mouli03 › array_equals › should log false when given two arrays with different lengths ARRAY_1=[1, 2, 3] and ARRAY_2=[1, 2, 3, 4]\n\n    evalmachine.<anonymous>:43\n      if (arrayChecker(arrayOne, arrayTwo) !== undefined) {\n      ^\n\n    ReferenceError: arrayChecker is not defined\n\n      at isArrayEqual (evalmachine.<anonymous>:43:3)\n      at evalmachine.<anonymous>:57:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › mr-mouli03 › array_equals › should log false when given two arrays with same lengths but different elements ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 4]\n\n    evalmachine.<anonymous>:43\n      if (arrayChecker(arrayOne, arrayTwo) !== undefined) {\n      ^\n\n    ReferenceError: arrayChecker is not defined\n\n      at isArrayEqual (evalmachine.<anonymous>:43:3)\n      at evalmachine.<anonymous>:57:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › mr-mouli03 › array_equals › should log false when given two arrays with same lengths same elements in different order ARRAY_1=[1, 2, 3] and ARRAY_2=[2, 3, 1]\n\n    evalmachine.<anonymous>:43\n      if (arrayChecker(arrayOne, arrayTwo) !== undefined) {\n      ^\n\n    ReferenceError: arrayChecker is not defined\n\n      at isArrayEqual (evalmachine.<anonymous>:43:3)\n      at evalmachine.<anonymous>:57:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › mr-mouli03 › array_equals › should log true when given two empty arrays ARRAY_1=[] and ARRAY_2=[]\n\n    evalmachine.<anonymous>:43\n      if (arrayChecker(arrayOne, arrayTwo) !== undefined) {\n      ^\n\n    ReferenceError: arrayChecker is not defined\n\n      at isArrayEqual (evalmachine.<anonymous>:43:3)\n      at evalmachine.<anonymous>:57:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › mr-mouli03 › array_equals › should log false when given one empty array and one non-empty array ARRAY_1=[1, 2, 3] and ARRAY_2=[]\n\n    evalmachine.<anonymous>:43\n      if (arrayChecker(arrayOne, arrayTwo) !== undefined) {\n      ^\n\n    ReferenceError: arrayChecker is not defined\n\n      at isArrayEqual (evalmachine.<anonymous>:43:3)\n      at evalmachine.<anonymous>:57:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › mr-mouli03 › array_equals › should log false when given two arrays with different data types ARRAY_1=[1, '2', 3] and ARRAY_2=[1, 2, 3]\n\n    evalmachine.<anonymous>:43\n      if (arrayChecker(arrayOne, arrayTwo) !== undefined) {\n      ^\n\n    ReferenceError: arrayChecker is not defined\n\n      at isArrayEqual (evalmachine.<anonymous>:43:3)\n      at evalmachine.<anonymous>:57:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › mr-mouli03 › array_equals › should log true when given two arrays with mixed data types but identical ARRAY_1=[1, '2', 3] and ARRAY_2=[1, '2', 3]\n\n    evalmachine.<anonymous>:43\n      if (arrayChecker(arrayOne, arrayTwo) !== undefined) {\n      ^\n\n    ReferenceError: arrayChecker is not defined\n\n      at isArrayEqual (evalmachine.<anonymous>:43:3)\n      at evalmachine.<anonymous>:57:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › mr-mouli03 › array_equals › should log true when given two identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]\n\n    evalmachine.<anonymous>:43\n      if (arrayChecker(arrayOne, arrayTwo) !== undefined) {\n      ^\n\n    ReferenceError: arrayChecker is not defined\n\n      at isArrayEqual (evalmachine.<anonymous>:43:3)\n      at evalmachine.<anonymous>:57:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › mr-mouli03 › array_equals › should log false when given two non-identical arrays with nested arrays ARRAY_1=[1,[3],[2]] and ARRAY_2=[1,[2],[2]]\n\n    evalmachine.<anonymous>:43\n      if (arrayChecker(arrayOne, arrayTwo) !== undefined) {\n      ^\n\n    ReferenceError: arrayChecker is not defined\n\n      at isArrayEqual (evalmachine.<anonymous>:43:3)\n      at evalmachine.<anonymous>:57:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › mr-mouli03 › array_equals › should log false when given two non-identical arrays with nested arrays ARRAY_1=[1, 2, 3, [4, 6]] and ARRAY_2=[1, 2, 3, [4, 5, 6]]\n\n    evalmachine.<anonymous>:43\n      if (arrayChecker(arrayOne, arrayTwo) !== undefined) {\n      ^\n\n    ReferenceError: arrayChecker is not defined\n\n      at isArrayEqual (evalmachine.<anonymous>:43:3)\n      at evalmachine.<anonymous>:57:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › mr-mouli03 › array_equals › should log true when given two identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]]\n\n    evalmachine.<anonymous>:43\n      if (arrayChecker(arrayOne, arrayTwo) !== undefined) {\n      ^\n\n    ReferenceError: arrayChecker is not defined\n\n      at isArrayEqual (evalmachine.<anonymous>:43:3)\n      at evalmachine.<anonymous>:57:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › mr-mouli03 › array_equals › should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]\n\n    evalmachine.<anonymous>:43\n      if (arrayChecker(arrayOne, arrayTwo) !== undefined) {\n      ^\n\n    ReferenceError: arrayChecker is not defined\n\n      at isArrayEqual (evalmachine.<anonymous>:43:3)\n      at evalmachine.<anonymous>:57:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › mr-mouli03 › array_equals › should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [125]]]]]]\n\n    evalmachine.<anonymous>:43\n      if (arrayChecker(arrayOne, arrayTwo) !== undefined) {\n      ^\n\n    ReferenceError: arrayChecker is not defined\n\n      at isArrayEqual (evalmachine.<anonymous>:43:3)\n      at evalmachine.<anonymous>:57:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › mr-mouli03 › array_equals › should log false when given two non-identical arrays with deep nested arrays ARRAY_1=[1, 2, 3, [4, 5, 6, [100, 99, 44, [20, 19, 16, [10, 20], ['hello', 'app'], ['hi', [123]]]]]] and ARRAY_2=[1, 2, 3, [4, 5, 6, [100, 99, 44, ['20', 19, '16', [10, '20'], ['hello', 'app'], ['hi', [123]]]]]]\n\n    evalmachine.<anonymous>:43\n      if (arrayChecker(arrayOne, arrayTwo) !== undefined) {\n      ^\n\n    ReferenceError: arrayChecker is not defined\n\n      at isArrayEqual (evalmachine.<anonymous>:43:3)\n      at evalmachine.<anonymous>:57:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › mr-mouli03 › array_equals › should log false when given two arrays with null values ARRAY_1=[1, 2, null] and ARRAY_2=[1, 3, null]\n\n    evalmachine.<anonymous>:43\n      if (arrayChecker(arrayOne, arrayTwo) !== undefined) {\n      ^\n\n    ReferenceError: arrayChecker is not defined\n\n      at isArrayEqual (evalmachine.<anonymous>:43:3)\n      at evalmachine.<anonymous>:57:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › mr-mouli03 › array_equals › should log false when given two arrays with boolean values ARRAY_1=[1, true, 3] and ARRAY_2=[1, false, 3]\n\n    evalmachine.<anonymous>:43\n      if (arrayChecker(arrayOne, arrayTwo) !== undefined) {\n      ^\n\n    ReferenceError: arrayChecker is not defined\n\n      at isArrayEqual (evalmachine.<anonymous>:43:3)\n      at evalmachine.<anonymous>:57:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › mr-mouli03 › array_equals › should log false when given two arrays with undefined values ARRAY_1=[1, undefined, 3] and ARRAY_2=[1, 2, 3]\n\n    evalmachine.<anonymous>:43\n      if (arrayChecker(arrayOne, arrayTwo) !== undefined) {\n      ^\n\n    ReferenceError: arrayChecker is not defined\n\n      at isArrayEqual (evalmachine.<anonymous>:43:3)\n      at evalmachine.<anonymous>:57:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › mr-mouli03 › array_equals › should log true when given two very large arrays with same data\n\n    evalmachine.<anonymous>:43\n      if (arrayChecker(arrayOne, arrayTwo) !== undefined) {\n      ^\n\n    ReferenceError: arrayChecker is not defined\n\n      at isArrayEqual (evalmachine.<anonymous>:43:3)\n      at evalmachine.<anonymous>:57:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › mr-mouli03 › array_equals › should log false when given two very large arrays with different data\n\n    evalmachine.<anonymous>:43\n      if (arrayChecker(arrayOne, arrayTwo) !== undefined) {\n      ^\n\n    ReferenceError: arrayChecker is not defined\n\n      at isArrayEqual (evalmachine.<anonymous>:43:3)\n      at evalmachine.<anonymous>:57:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › mr-mouli03 › array_equals › should log true when given two arrays are null\n\n    evalmachine.<anonymous>:43\n      if (arrayChecker(arrayOne, arrayTwo) !== undefined) {\n      ^\n\n    ReferenceError: arrayChecker is not defined\n\n      at isArrayEqual (evalmachine.<anonymous>:43:3)\n      at evalmachine.<anonymous>:57:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › mr-mouli03 › array_equals › should log true when given two deep arrays are equal\n\n    evalmachine.<anonymous>:43\n      if (arrayChecker(arrayOne, arrayTwo) !== undefined) {\n      ^\n\n    ReferenceError: arrayChecker is not defined\n\n      at isArrayEqual (evalmachine.<anonymous>:43:3)\n      at evalmachine.<anonymous>:57:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › mr-mouli03 › array_equals › should log false when ARRAY_1=undefined and ARRAY_2=null\n\n    evalmachine.<anonymous>:43\n      if (arrayChecker(arrayOne, arrayTwo) !== undefined) {\n      ^\n\n    ReferenceError: arrayChecker is not defined\n\n      at isArrayEqual (evalmachine.<anonymous>:43:3)\n      at evalmachine.<anonymous>:57:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › mr-mouli03 › array_equals › should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]\n\n    evalmachine.<anonymous>:43\n      if (arrayChecker(arrayOne, arrayTwo) !== undefined) {\n      ^\n\n    ReferenceError: arrayChecker is not defined\n\n      at isArrayEqual (evalmachine.<anonymous>:43:3)\n      at evalmachine.<anonymous>:57:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › mr-mouli03 › array_equals › should log false when ARRAY_1=[1] and ARRAY_2={0:1}\n\n    evalmachine.<anonymous>:43\n      if (arrayChecker(arrayOne, arrayTwo) !== undefined) {\n      ^\n\n    ReferenceError: arrayChecker is not defined\n\n      at isArrayEqual (evalmachine.<anonymous>:43:3)\n      at evalmachine.<anonymous>:57:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › mr-mouli03 › array_equals › should log false when ARRAY_1={0:1} and ARRAY_2=[1]\n\n    evalmachine.<anonymous>:43\n      if (arrayChecker(arrayOne, arrayTwo) !== undefined) {\n      ^\n\n    ReferenceError: arrayChecker is not defined\n\n      at isArrayEqual (evalmachine.<anonymous>:43:3)\n      at evalmachine.<anonymous>:57:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › naveen-kumar-vadla › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 3\n\n    - Array []\n    + Array [\n    +   \"This line has a length of 92. Maximum allowed is 80. File: js-aofs-naveen-kumar-vadla/array_equals.js Line: 37\",\n    + ]\n\n    \u001b[0m \u001b[90m 77 |\u001b[39m               )\n     \u001b[90m 78 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 79 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 80 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 81 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 82 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:79:30)\n\n  ● js-aofs › naveen-kumar-vadla › object_equals › should log false when OBJECT_1={} and OBJECT_2=undefined\n\n    evalmachine.<anonymous>:39\n      const object2Keys = Object.keys(object2);\n                                 ^\n\n    TypeError: Cannot convert undefined or null to object\n        at Function.keys (<anonymous>)\n\n      at areObjectsEqual (evalmachine.<anonymous>:39:30)\n      at evalmachine.<anonymous>:70:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › naveen-kumar-vadla › object_equals › should log false when OBJECT_1=[1] and OBJECT_2={0:1}\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   false,\n    +   true,\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › naveen-kumar-vadla › object_equals › should log false when OBJECT_1={0:1} and OBJECT_2=[1]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   false,\n    +   true,\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › nithindenkada › categorise › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  -  1\n    + Received  + 16\n\n    - Array []\n    + Array [\n    +   \"'sorting' was used before it was defined. File: js-aofs-nithindenkada/categorise.js Line: 31\",\n    +   \"Expected space(s) after \\\"while\\\". File: js-aofs-nithindenkada/categorise.js Line: 32\",\n    +   \"Expected space(s) after \\\"while\\\". File: js-aofs-nithindenkada/categorise.js Line: 34\",\n    +   \"Multiple spaces found before 'index'. File: js-aofs-nithindenkada/categorise.js Line: 35\",\n    +   \"This line has 2 statements. Maximum allowed is 1. File: js-aofs-nithindenkada/categorise.js Line: 35\",\n    +   \"'copyOfNumbers' is already declared in the upper scope on line 27 column 7. File: js-aofs-nithindenkada/categorise.js Line: 44\",\n    +   \"Missing whitespace after semicolon. File: js-aofs-nithindenkada/categorise.js Line: 45\",\n    +   \"Operator '<' must be spaced. File: js-aofs-nithindenkada/categorise.js Line: 45\",\n    +   \"Missing space before opening brace. File: js-aofs-nithindenkada/categorise.js Line: 45\",\n    +   \"This line has a length of 88. Maximum allowed is 80. File: js-aofs-nithindenkada/categorise.js Line: 46\",\n    +   \"Operator '+' must be spaced. File: js-aofs-nithindenkada/categorise.js Line: 46\",\n    +   \"Operator '<' must be spaced. File: js-aofs-nithindenkada/categorise.js Line: 46\",\n    +   \"Missing space before opening brace. File: js-aofs-nithindenkada/categorise.js Line: 46\",\n    +   \"'temporary' is never reassigned. Use 'const' instead. File: js-aofs-nithindenkada/categorise.js Line: 48\",\n    + ]\n\n    \u001b[0m \u001b[90m 77 |\u001b[39m               )\n     \u001b[90m 78 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 79 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 80 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 81 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 82 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:79:30)\n\n  ● js-aofs › nithindenkada › entries › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 4\n\n    - Array []\n    + Array [\n    +   \"Trailing spaces not allowed. File: js-aofs-nithindenkada/entries.js Line: 6\",\n    +   \"Expected space(s) after \\\"for\\\". File: js-aofs-nithindenkada/entries.js Line: 26\",\n    + ]\n\n    \u001b[0m \u001b[90m 77 |\u001b[39m               )\n     \u001b[90m 78 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 79 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 80 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 81 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 82 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:79:30)\n\n  ● js-aofs › nithindenkada › remove_adjacent_spaces › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  -  1\n    + Received  + 17\n\n    - Array []\n    + Array [\n    +   \"Trailing spaces not allowed. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 3\",\n    +   \"Trailing spaces not allowed. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 5\",\n    +   \"More than 1 blank line not allowed. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 30\",\n    +   \"Function has too many lines (26). Maximum allowed is 15. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 31\",\n    +   \"Unexpected whitespace before semicolon. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 35\",\n    +   \"There should be no space after this paren. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 36\",\n    +   \"There should be no space after this paren. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 39\",\n    +   \"Expected indentation of 6 spaces but found 8. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 40\",\n    +   \"Expected indentation of 6 spaces but found 8. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 41\",\n    +   \"Expected space(s) after \\\"if\\\". File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 46\",\n    +   \"Operator '-' must be spaced. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 49\",\n    +   \"Operator '-' must be spaced. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 50\",\n    +   \"There should be no space after this paren. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 52\",\n    +   \"Expected indentation of 0 spaces but found 1. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 56\",\n    +   \"Expected indentation of 0 spaces but found 1. File: js-aofs-nithindenkada/remove_adjacent_spaces.js Line: 57\",\n    + ]\n\n    \u001b[0m \u001b[90m 77 |\u001b[39m               )\n     \u001b[90m 78 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 79 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 80 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 81 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 82 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:79:30)\n\n  ● js-aofs › nithindenkada › tribonacci › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  -  1\n    + Received  + 23\n\n    - Array []\n    + Array [\n    +   \"Trailing spaces not allowed. File: js-aofs-nithindenkada/tribonacci.js Line: 6\",\n    +   \"'number' is never reassigned. Use 'const' instead. File: js-aofs-nithindenkada/tribonacci.js Line: 22\",\n    +   \"Identifier 'number_1' is not in camel case. File: js-aofs-nithindenkada/tribonacci.js Line: 23\",\n    +   \"Identifier 'number_2' is not in camel case. File: js-aofs-nithindenkada/tribonacci.js Line: 24\",\n    +   \"Identifier 'number_3' is not in camel case. File: js-aofs-nithindenkada/tribonacci.js Line: 25\",\n    +   \"Identifier 'number_4' is not in camel case. File: js-aofs-nithindenkada/tribonacci.js Line: 26\",\n    +   \"Identifier 'number_1' is not in camel case. File: js-aofs-nithindenkada/tribonacci.js Line: 26\",\n    +   \"Identifier 'number_2' is not in camel case. File: js-aofs-nithindenkada/tribonacci.js Line: 26\",\n    +   \"Identifier 'number_3' is not in camel case. File: js-aofs-nithindenkada/tribonacci.js Line: 26\",\n    +   \"Assignment to function parameter 'number1'. File: js-aofs-nithindenkada/tribonacci.js Line: 34\",\n    +   \"Assignment to function parameter 'number2'. File: js-aofs-nithindenkada/tribonacci.js Line: 35\",\n    +   \"Assignment to function parameter 'number3'. File: js-aofs-nithindenkada/tribonacci.js Line: 36\",\n    +   \"Assignment to function parameter 'number4'. File: js-aofs-nithindenkada/tribonacci.js Line: 37\",\n    +   \"A space is required after ','. File: js-aofs-nithindenkada/tribonacci.js Line: 38\",\n    +   \"A space is required after ','. File: js-aofs-nithindenkada/tribonacci.js Line: 38\",\n    +   \"A space is required after ','. File: js-aofs-nithindenkada/tribonacci.js Line: 38\",\n    +   \"Expected indentation of 2 spaces but found 4. File: js-aofs-nithindenkada/tribonacci.js Line: 39\",\n    +   \"Unnecessary 'else' after 'return'. File: js-aofs-nithindenkada/tribonacci.js Line: 39\",\n    +   \"Expected indentation of 4 spaces but found 6. File: js-aofs-nithindenkada/tribonacci.js Line: 40\",\n    +   \"Expected indentation of 2 spaces but found 4. File: js-aofs-nithindenkada/tribonacci.js Line: 41\",\n    +   \"Expected indentation of 0 spaces but found 2. File: js-aofs-nithindenkada/tribonacci.js Line: 42\",\n    + ]\n\n    \u001b[0m \u001b[90m 77 |\u001b[39m               )\n     \u001b[90m 78 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 79 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 80 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 81 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 82 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:79:30)\n\n  ● js-aofs › nithindenkada › array_equals › should log false when ARRAY_1=undefined and ARRAY_2=[1, 2, 3]\n\n    evalmachine.<anonymous>:34\n      if (array1.length != array2.length) {\n                 ^\n\n    TypeError: Cannot read properties of undefined (reading 'length')\n\n      at arrayEqualOrNot (evalmachine.<anonymous>:34:14)\n      at evalmachine.<anonymous>:48:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › nithindenkada › array_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  -  1\n    + Received  + 19\n\n    - Array []\n    + Array [\n    +   \"Trailing spaces not allowed. File: js-aofs-nithindenkada/array_equals.js Line: 10\",\n    +   \"Function has too many lines (18). Maximum allowed is 15. File: js-aofs-nithindenkada/array_equals.js Line: 30\",\n    +   \"A space is required after ','. File: js-aofs-nithindenkada/array_equals.js Line: 30\",\n    +   \"Operator '||' must be spaced. File: js-aofs-nithindenkada/array_equals.js Line: 31\",\n    +   \"Operator '===' must be spaced. File: js-aofs-nithindenkada/array_equals.js Line: 32\",\n    +   \"Expected '!==' and instead saw '!='. File: js-aofs-nithindenkada/array_equals.js Line: 34\",\n    +   \"There should be no space before this paren. File: js-aofs-nithindenkada/array_equals.js Line: 37\",\n    +   \"Unary word operator 'typeof' must be followed by whitespace. File: js-aofs-nithindenkada/array_equals.js Line: 38\",\n    +   \"Unary word operator 'typeof' must be followed by whitespace. File: js-aofs-nithindenkada/array_equals.js Line: 38\",\n    +   \"A space is required after ','. File: js-aofs-nithindenkada/array_equals.js Line: 39\",\n    +   \"Expected '!==' and instead saw '!='. File: js-aofs-nithindenkada/array_equals.js Line: 39\",\n    +   \"Expected indentation of 6 spaces but found 8. File: js-aofs-nithindenkada/array_equals.js Line: 43\",\n    +   \"Expected indentation of 4 spaces but found 6. File: js-aofs-nithindenkada/array_equals.js Line: 44\",\n    +   \"Trailing spaces not allowed. File: js-aofs-nithindenkada/array_equals.js Line: 44\",\n    +   \"Expected indentation of 2 spaces but found 4. File: js-aofs-nithindenkada/array_equals.js Line: 45\",\n    +   \"Expected indentation of 0 spaces but found 1. File: js-aofs-nithindenkada/array_equals.js Line: 47\",\n    +   \"A space is required after ','. File: js-aofs-nithindenkada/array_equals.js Line: 48\",\n    + ]\n\n    \u001b[0m \u001b[90m 77 |\u001b[39m               )\n     \u001b[90m 78 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 79 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 80 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 81 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 82 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:79:30)\n\n  ● js-aofs › nithindenkada › object_equals › should log false when OBJECT_1={name: 'Raju', address: null} and OBJECT_2={name: 'Raju', address: {location: 'Hyderabad'}}\n\n    evalmachine.<anonymous>:38\n      let array_1 = Object.keys(obj1);\n                           ^\n\n    TypeError: Cannot convert undefined or null to object\n        at Function.keys (<anonymous>)\n\n      at objectEqual (evalmachine.<anonymous>:38:24)\n      at objectEqual (evalmachine.<anonymous>:51:18)\n      at evalmachine.<anonymous>:34:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › nithindenkada › object_equals › should log true when OBJECT_1=null and OBJECT_2=null\n\n    evalmachine.<anonymous>:38\n      let array_1 = Object.keys(obj1);\n                           ^\n\n    TypeError: Cannot convert undefined or null to object\n        at Function.keys (<anonymous>)\n\n      at objectEqual (evalmachine.<anonymous>:38:24)\n      at evalmachine.<anonymous>:34:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › nithindenkada › object_equals › should log false when OBJECT_1=undefined and OBJECT_2={}\n\n    evalmachine.<anonymous>:38\n      let array_1 = Object.keys(obj1);\n                           ^\n\n    TypeError: Cannot convert undefined or null to object\n        at Function.keys (<anonymous>)\n\n      at objectEqual (evalmachine.<anonymous>:38:24)\n      at evalmachine.<anonymous>:34:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › nithindenkada › object_equals › should log false when OBJECT_1={} and OBJECT_2=undefined\n\n    evalmachine.<anonymous>:39\n      let array_2 = Object.keys(obj2);\n                           ^\n\n    TypeError: Cannot convert undefined or null to object\n        at Function.keys (<anonymous>)\n\n      at objectEqual (evalmachine.<anonymous>:39:24)\n      at evalmachine.<anonymous>:34:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › nithindenkada › object_equals › should log true when OBJECT_1=undefined and OBJECT_2=undefined\n\n    evalmachine.<anonymous>:38\n      let array_1 = Object.keys(obj1);\n                           ^\n\n    TypeError: Cannot convert undefined or null to object\n        at Function.keys (<anonymous>)\n\n      at objectEqual (evalmachine.<anonymous>:38:24)\n      at evalmachine.<anonymous>:34:13\n      at Object.runInContext (test/test.js:38:33)\n\n  ● js-aofs › nithindenkada › object_equals › should log false when OBJECT_1=[1] and OBJECT_2={0:1}\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   false,\n    +   true,\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › nithindenkada › object_equals › should log false when OBJECT_1={0:1} and OBJECT_2=[1]\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n\n      Array [\n    -   false,\n    +   true,\n      ]\n\n    \u001b[0m \u001b[90m 37 |\u001b[39m               \u001b[36mtry\u001b[39m {\n     \u001b[90m 38 |\u001b[39m                 actual \u001b[33m=\u001b[39m script\u001b[33m.\u001b[39mrunInContext(context\u001b[33m,\u001b[39m {timeout\u001b[33m:\u001b[39m \u001b[35m1500\u001b[39m})\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m                 expect(actual)\u001b[33m.\u001b[39mtoEqual(expected)\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 40 |\u001b[39m               } \u001b[36mcatch\u001b[39m (err) {\n     \u001b[90m 41 |\u001b[39m                 \u001b[36mif\u001b[39m (err\u001b[33m.\u001b[39mcode \u001b[33m===\u001b[39m \u001b[32m'ERR_SCRIPT_EXECUTION_TIMEOUT'\u001b[39m) {\n     \u001b[90m 42 |\u001b[39m                   \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[0m\n\n      at Object.toEqual (test/test.js:39:32)\n\n  ● js-aofs › nithindenkada › object_equals › should follow coding conventions\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  -  1\n    + Received  + 59\n\n    - Array []\n    + Array [\n    +   \"There should be no space before ','. File: js-aofs-nithindenkada/object_equals.js Line: 3\",\n    +   \"A space is required after ','. File: js-aofs-nithindenkada/object_equals.js Line: 3\",\n    +   \"Missing space before value for key 'd'. File: js-aofs-nithindenkada/object_equals.js Line: 3\",\n    +   \"A space is required after '{'. File: js-aofs-nithindenkada/object_equals.js Line: 3\",\n    +   \"Missing space before value for key 'b'. File: js-aofs-nithindenkada/object_equals.js Line: 3\",\n    +   \"A space is required after ','. File: js-aofs-nithindenkada/object_equals.js Line: 3\",\n    +   \"Missing space before value for key 'a'. File: js-aofs-nithindenkada/object_equals.js Line: 3\",\n    +   \"A space is required before '}'. File: js-aofs-nithindenkada/object_equals.js Line: 3\",\n    +   \"A space is required before '}'. File: js-aofs-nithindenkada/object_equals.js Line: 3\",\n    +   \"Missing space before value for key 'd'. File: js-aofs-nithindenkada/object_equals.js Line: 4\",\n    +   \"A space is required after '{'. File: js-aofs-nithindenkada/object_equals.js Line: 4\",\n    +   \"Missing space before value for key 'a'. File: js-aofs-nithindenkada/object_equals.js Line: 4\",\n    +   \"A space is required after ','. File: js-aofs-nithindenkada/object_equals.js Line: 4\",\n    +   \"Missing space before value for key 'b'. File: js-aofs-nithindenkada/object_equals.js Line: 4\",\n    +   \"A space is required before '}'. File: js-aofs-nithindenkada/object_equals.js Line: 4\",\n    +   \"A space is required before '}'. File: js-aofs-nithindenkada/object_equals.js Line: 4\",\n    +   \"Trailing spaces not allowed. File: js-aofs-nithindenkada/object_equals.js Line: 5\",\n    +   \"More than 1 blank line not allowed. File: js-aofs-nithindenkada/object_equals.js Line: 32\",\n    +   \"'objectEqual' was used before it was defined. File: js-aofs-nithindenkada/object_equals.js Line: 33\",\n    +   \"A space is required after ','. File: js-aofs-nithindenkada/object_equals.js Line: 33\",\n    +   \"Missing semicolon. File: js-aofs-nithindenkada/object_equals.js Line: 33\",\n    +   \"Expected a function expression. File: js-aofs-nithindenkada/object_equals.js Line: 35\",\n    +   \"Function 'objectEqual' has too many lines (25). Maximum allowed is 15. File: js-aofs-nithindenkada/object_equals.js Line: 35\",\n    +   \"A space is required after ','. File: js-aofs-nithindenkada/object_equals.js Line: 35\",\n    +   \"Block must not be padded by blank lines. File: js-aofs-nithindenkada/object_equals.js Line: 35\",\n    +   \"Trailing spaces not allowed. File: js-aofs-nithindenkada/object_equals.js Line: 36\",\n    +   \"Identifier 'array_1' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 37\",\n    +   \"'array_1' is never reassigned. Use 'const' instead. File: js-aofs-nithindenkada/object_equals.js Line: 37\",\n    +   \"Identifier 'array_2' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 38\",\n    +   \"'array_2' is never reassigned. Use 'const' instead. File: js-aofs-nithindenkada/object_equals.js Line: 38\",\n    +   \"Identifier 'array_1' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 39\",\n    +   \"Expected '!==' and instead saw '!='. File: js-aofs-nithindenkada/object_equals.js Line: 39\",\n    +   \"Identifier 'array_2' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 39\",\n    +   \"Expected indentation of 4 spaces but found 3. File: js-aofs-nithindenkada/object_equals.js Line: 40\",\n    +   \"Identifier 'array_1' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 42\",\n    +   \"Unexpected whitespace before semicolon. File: js-aofs-nithindenkada/object_equals.js Line: 42\",\n    +   \"Missing space before opening brace. File: js-aofs-nithindenkada/object_equals.js Line: 42\",\n    +   \"Expected indentation of 4 spaces but found 5. File: js-aofs-nithindenkada/object_equals.js Line: 43\",\n    +   \"Operator '<' must be spaced. File: js-aofs-nithindenkada/object_equals.js Line: 44\",\n    +   \"Identifier 'array_2' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 44\",\n    +   \"Identifier 'array_1' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 45\",\n    +   \"Identifier 'array_2' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 45\",\n    +   \"Identifier 'array_1' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 46\",\n    +   \"Identifier 'array_2' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 46\",\n    +   \"Closing curly brace does not appear on the same line as the subsequent block. File: js-aofs-nithindenkada/object_equals.js Line: 48\",\n    +   \"Expected indentation of 8 spaces but found 0. File: js-aofs-nithindenkada/object_equals.js Line: 48\",\n    +   \"Unary word operator 'typeof' must be followed by whitespace. File: js-aofs-nithindenkada/object_equals.js Line: 49\",\n    +   \"Identifier 'array_1' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 49\",\n    +   \"Operator '&&' must be spaced. File: js-aofs-nithindenkada/object_equals.js Line: 49\",\n    +   \"Unary word operator 'typeof' must be followed by whitespace. File: js-aofs-nithindenkada/object_equals.js Line: 49\",\n    +   \"Identifier 'array_2' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 49\",\n    +   \"Operator '===' must be spaced. File: js-aofs-nithindenkada/object_equals.js Line: 49\",\n    +   \"Identifier 'array_1' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 50\",\n    +   \"Identifier 'array_2' is not in camel case. File: js-aofs-nithindenkada/object_equals.js Line: 50\",\n    +   \"Missing semicolon. File: js-aofs-nithindenkada/object_equals.js Line: 50\",\n    +   \"Expected space(s) after \\\"if\\\". File: js-aofs-nithindenkada/object_equals.js Line: 54\",\n    +   \"Expected '===' and instead saw '=='. File: js-aofs-nithindenkada/object_equals.js Line: 54\",\n    + ]\n\n    \u001b[0m \u001b[90m 77 |\u001b[39m               )\n     \u001b[90m 78 |\u001b[39m             )\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 79 |\u001b[39m             expect(messages)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\n     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 80 |\u001b[39m           })\u001b[33m;\u001b[39m\n     \u001b[90m 81 |\u001b[39m         })\u001b[33m;\u001b[39m\n     \u001b[90m 82 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toEqual (test/test.js:79:30)\n","name":"/home/runner/work/test-suite/test-suite/test/test.js","startTime":1727189095383,"status":"failed","summary":""}],"wasInterrupted":false}
